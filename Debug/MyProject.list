
MyProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008034  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  080081c4  080081c4  000091c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080082fc  080082fc  0000a014  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080082fc  080082fc  000092fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008304  08008304  0000a014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008304  08008304  00009304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008308  08008308  00009308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  0800830c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a014  2**0
                  CONTENTS
 10 .bss          00004a8c  20000014  20000014  0000a014  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004aa0  20004aa0  0000a014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a014  2**0
                  CONTENTS, READONLY
 13 .debug_info   000172d4  00000000  00000000  0000a044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003404  00000000  00000000  00021318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001568  00000000  00000000  00024720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010af  00000000  00000000  00025c88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021f25  00000000  00000000  00026d37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000179a1  00000000  00000000  00048c5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d5809  00000000  00000000  000605fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00135e06  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005b14  00000000  00000000  00135e4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  0013b960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000014 	.word	0x20000014
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080081ac 	.word	0x080081ac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000018 	.word	0x20000018
 80001cc:	080081ac 	.word	0x080081ac

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b988 	b.w	80004f8 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	468e      	mov	lr, r1
 8000208:	4604      	mov	r4, r0
 800020a:	4688      	mov	r8, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14a      	bne.n	80002a6 <__udivmoddi4+0xa6>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d962      	bls.n	80002dc <__udivmoddi4+0xdc>
 8000216:	fab2 f682 	clz	r6, r2
 800021a:	b14e      	cbz	r6, 8000230 <__udivmoddi4+0x30>
 800021c:	f1c6 0320 	rsb	r3, r6, #32
 8000220:	fa01 f806 	lsl.w	r8, r1, r6
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	40b7      	lsls	r7, r6
 800022a:	ea43 0808 	orr.w	r8, r3, r8
 800022e:	40b4      	lsls	r4, r6
 8000230:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000234:	fa1f fc87 	uxth.w	ip, r7
 8000238:	fbb8 f1fe 	udiv	r1, r8, lr
 800023c:	0c23      	lsrs	r3, r4, #16
 800023e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000242:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000246:	fb01 f20c 	mul.w	r2, r1, ip
 800024a:	429a      	cmp	r2, r3
 800024c:	d909      	bls.n	8000262 <__udivmoddi4+0x62>
 800024e:	18fb      	adds	r3, r7, r3
 8000250:	f101 30ff 	add.w	r0, r1, #4294967295
 8000254:	f080 80ea 	bcs.w	800042c <__udivmoddi4+0x22c>
 8000258:	429a      	cmp	r2, r3
 800025a:	f240 80e7 	bls.w	800042c <__udivmoddi4+0x22c>
 800025e:	3902      	subs	r1, #2
 8000260:	443b      	add	r3, r7
 8000262:	1a9a      	subs	r2, r3, r2
 8000264:	b2a3      	uxth	r3, r4
 8000266:	fbb2 f0fe 	udiv	r0, r2, lr
 800026a:	fb0e 2210 	mls	r2, lr, r0, r2
 800026e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000272:	fb00 fc0c 	mul.w	ip, r0, ip
 8000276:	459c      	cmp	ip, r3
 8000278:	d909      	bls.n	800028e <__udivmoddi4+0x8e>
 800027a:	18fb      	adds	r3, r7, r3
 800027c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000280:	f080 80d6 	bcs.w	8000430 <__udivmoddi4+0x230>
 8000284:	459c      	cmp	ip, r3
 8000286:	f240 80d3 	bls.w	8000430 <__udivmoddi4+0x230>
 800028a:	443b      	add	r3, r7
 800028c:	3802      	subs	r0, #2
 800028e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000292:	eba3 030c 	sub.w	r3, r3, ip
 8000296:	2100      	movs	r1, #0
 8000298:	b11d      	cbz	r5, 80002a2 <__udivmoddi4+0xa2>
 800029a:	40f3      	lsrs	r3, r6
 800029c:	2200      	movs	r2, #0
 800029e:	e9c5 3200 	strd	r3, r2, [r5]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d905      	bls.n	80002b6 <__udivmoddi4+0xb6>
 80002aa:	b10d      	cbz	r5, 80002b0 <__udivmoddi4+0xb0>
 80002ac:	e9c5 0100 	strd	r0, r1, [r5]
 80002b0:	2100      	movs	r1, #0
 80002b2:	4608      	mov	r0, r1
 80002b4:	e7f5      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002b6:	fab3 f183 	clz	r1, r3
 80002ba:	2900      	cmp	r1, #0
 80002bc:	d146      	bne.n	800034c <__udivmoddi4+0x14c>
 80002be:	4573      	cmp	r3, lr
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xc8>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 8105 	bhi.w	80004d2 <__udivmoddi4+0x2d2>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4690      	mov	r8, r2
 80002d2:	2d00      	cmp	r5, #0
 80002d4:	d0e5      	beq.n	80002a2 <__udivmoddi4+0xa2>
 80002d6:	e9c5 4800 	strd	r4, r8, [r5]
 80002da:	e7e2      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002dc:	2a00      	cmp	r2, #0
 80002de:	f000 8090 	beq.w	8000402 <__udivmoddi4+0x202>
 80002e2:	fab2 f682 	clz	r6, r2
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	f040 80a4 	bne.w	8000434 <__udivmoddi4+0x234>
 80002ec:	1a8a      	subs	r2, r1, r2
 80002ee:	0c03      	lsrs	r3, r0, #16
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	b280      	uxth	r0, r0
 80002f6:	b2bc      	uxth	r4, r7
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb2 fcfe 	udiv	ip, r2, lr
 80002fe:	fb0e 221c 	mls	r2, lr, ip, r2
 8000302:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000306:	fb04 f20c 	mul.w	r2, r4, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d907      	bls.n	800031e <__udivmoddi4+0x11e>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000314:	d202      	bcs.n	800031c <__udivmoddi4+0x11c>
 8000316:	429a      	cmp	r2, r3
 8000318:	f200 80e0 	bhi.w	80004dc <__udivmoddi4+0x2dc>
 800031c:	46c4      	mov	ip, r8
 800031e:	1a9b      	subs	r3, r3, r2
 8000320:	fbb3 f2fe 	udiv	r2, r3, lr
 8000324:	fb0e 3312 	mls	r3, lr, r2, r3
 8000328:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800032c:	fb02 f404 	mul.w	r4, r2, r4
 8000330:	429c      	cmp	r4, r3
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x144>
 8000334:	18fb      	adds	r3, r7, r3
 8000336:	f102 30ff 	add.w	r0, r2, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x142>
 800033c:	429c      	cmp	r4, r3
 800033e:	f200 80ca 	bhi.w	80004d6 <__udivmoddi4+0x2d6>
 8000342:	4602      	mov	r2, r0
 8000344:	1b1b      	subs	r3, r3, r4
 8000346:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0x98>
 800034c:	f1c1 0620 	rsb	r6, r1, #32
 8000350:	408b      	lsls	r3, r1
 8000352:	fa22 f706 	lsr.w	r7, r2, r6
 8000356:	431f      	orrs	r7, r3
 8000358:	fa0e f401 	lsl.w	r4, lr, r1
 800035c:	fa20 f306 	lsr.w	r3, r0, r6
 8000360:	fa2e fe06 	lsr.w	lr, lr, r6
 8000364:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000368:	4323      	orrs	r3, r4
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	fa1f fc87 	uxth.w	ip, r7
 8000372:	fbbe f0f9 	udiv	r0, lr, r9
 8000376:	0c1c      	lsrs	r4, r3, #16
 8000378:	fb09 ee10 	mls	lr, r9, r0, lr
 800037c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000380:	fb00 fe0c 	mul.w	lr, r0, ip
 8000384:	45a6      	cmp	lr, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x1a0>
 800038c:	193c      	adds	r4, r7, r4
 800038e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000392:	f080 809c 	bcs.w	80004ce <__udivmoddi4+0x2ce>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f240 8099 	bls.w	80004ce <__udivmoddi4+0x2ce>
 800039c:	3802      	subs	r0, #2
 800039e:	443c      	add	r4, r7
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	fa1f fe83 	uxth.w	lr, r3
 80003a8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ac:	fb09 4413 	mls	r4, r9, r3, r4
 80003b0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003b4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b8:	45a4      	cmp	ip, r4
 80003ba:	d908      	bls.n	80003ce <__udivmoddi4+0x1ce>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f103 3eff 	add.w	lr, r3, #4294967295
 80003c2:	f080 8082 	bcs.w	80004ca <__udivmoddi4+0x2ca>
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d97f      	bls.n	80004ca <__udivmoddi4+0x2ca>
 80003ca:	3b02      	subs	r3, #2
 80003cc:	443c      	add	r4, r7
 80003ce:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	fba0 ec02 	umull	lr, ip, r0, r2
 80003da:	4564      	cmp	r4, ip
 80003dc:	4673      	mov	r3, lr
 80003de:	46e1      	mov	r9, ip
 80003e0:	d362      	bcc.n	80004a8 <__udivmoddi4+0x2a8>
 80003e2:	d05f      	beq.n	80004a4 <__udivmoddi4+0x2a4>
 80003e4:	b15d      	cbz	r5, 80003fe <__udivmoddi4+0x1fe>
 80003e6:	ebb8 0203 	subs.w	r2, r8, r3
 80003ea:	eb64 0409 	sbc.w	r4, r4, r9
 80003ee:	fa04 f606 	lsl.w	r6, r4, r6
 80003f2:	fa22 f301 	lsr.w	r3, r2, r1
 80003f6:	431e      	orrs	r6, r3
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	e9c5 6400 	strd	r6, r4, [r5]
 80003fe:	2100      	movs	r1, #0
 8000400:	e74f      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000402:	fbb1 fcf2 	udiv	ip, r1, r2
 8000406:	0c01      	lsrs	r1, r0, #16
 8000408:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800040c:	b280      	uxth	r0, r0
 800040e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000412:	463b      	mov	r3, r7
 8000414:	4638      	mov	r0, r7
 8000416:	463c      	mov	r4, r7
 8000418:	46b8      	mov	r8, r7
 800041a:	46be      	mov	lr, r7
 800041c:	2620      	movs	r6, #32
 800041e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000422:	eba2 0208 	sub.w	r2, r2, r8
 8000426:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800042a:	e766      	b.n	80002fa <__udivmoddi4+0xfa>
 800042c:	4601      	mov	r1, r0
 800042e:	e718      	b.n	8000262 <__udivmoddi4+0x62>
 8000430:	4610      	mov	r0, r2
 8000432:	e72c      	b.n	800028e <__udivmoddi4+0x8e>
 8000434:	f1c6 0220 	rsb	r2, r6, #32
 8000438:	fa2e f302 	lsr.w	r3, lr, r2
 800043c:	40b7      	lsls	r7, r6
 800043e:	40b1      	lsls	r1, r6
 8000440:	fa20 f202 	lsr.w	r2, r0, r2
 8000444:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000448:	430a      	orrs	r2, r1
 800044a:	fbb3 f8fe 	udiv	r8, r3, lr
 800044e:	b2bc      	uxth	r4, r7
 8000450:	fb0e 3318 	mls	r3, lr, r8, r3
 8000454:	0c11      	lsrs	r1, r2, #16
 8000456:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045a:	fb08 f904 	mul.w	r9, r8, r4
 800045e:	40b0      	lsls	r0, r6
 8000460:	4589      	cmp	r9, r1
 8000462:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000466:	b280      	uxth	r0, r0
 8000468:	d93e      	bls.n	80004e8 <__udivmoddi4+0x2e8>
 800046a:	1879      	adds	r1, r7, r1
 800046c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000470:	d201      	bcs.n	8000476 <__udivmoddi4+0x276>
 8000472:	4589      	cmp	r9, r1
 8000474:	d81f      	bhi.n	80004b6 <__udivmoddi4+0x2b6>
 8000476:	eba1 0109 	sub.w	r1, r1, r9
 800047a:	fbb1 f9fe 	udiv	r9, r1, lr
 800047e:	fb09 f804 	mul.w	r8, r9, r4
 8000482:	fb0e 1119 	mls	r1, lr, r9, r1
 8000486:	b292      	uxth	r2, r2
 8000488:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800048c:	4542      	cmp	r2, r8
 800048e:	d229      	bcs.n	80004e4 <__udivmoddi4+0x2e4>
 8000490:	18ba      	adds	r2, r7, r2
 8000492:	f109 31ff 	add.w	r1, r9, #4294967295
 8000496:	d2c4      	bcs.n	8000422 <__udivmoddi4+0x222>
 8000498:	4542      	cmp	r2, r8
 800049a:	d2c2      	bcs.n	8000422 <__udivmoddi4+0x222>
 800049c:	f1a9 0102 	sub.w	r1, r9, #2
 80004a0:	443a      	add	r2, r7
 80004a2:	e7be      	b.n	8000422 <__udivmoddi4+0x222>
 80004a4:	45f0      	cmp	r8, lr
 80004a6:	d29d      	bcs.n	80003e4 <__udivmoddi4+0x1e4>
 80004a8:	ebbe 0302 	subs.w	r3, lr, r2
 80004ac:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b0:	3801      	subs	r0, #1
 80004b2:	46e1      	mov	r9, ip
 80004b4:	e796      	b.n	80003e4 <__udivmoddi4+0x1e4>
 80004b6:	eba7 0909 	sub.w	r9, r7, r9
 80004ba:	4449      	add	r1, r9
 80004bc:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c0:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c4:	fb09 f804 	mul.w	r8, r9, r4
 80004c8:	e7db      	b.n	8000482 <__udivmoddi4+0x282>
 80004ca:	4673      	mov	r3, lr
 80004cc:	e77f      	b.n	80003ce <__udivmoddi4+0x1ce>
 80004ce:	4650      	mov	r0, sl
 80004d0:	e766      	b.n	80003a0 <__udivmoddi4+0x1a0>
 80004d2:	4608      	mov	r0, r1
 80004d4:	e6fd      	b.n	80002d2 <__udivmoddi4+0xd2>
 80004d6:	443b      	add	r3, r7
 80004d8:	3a02      	subs	r2, #2
 80004da:	e733      	b.n	8000344 <__udivmoddi4+0x144>
 80004dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e0:	443b      	add	r3, r7
 80004e2:	e71c      	b.n	800031e <__udivmoddi4+0x11e>
 80004e4:	4649      	mov	r1, r9
 80004e6:	e79c      	b.n	8000422 <__udivmoddi4+0x222>
 80004e8:	eba1 0109 	sub.w	r1, r1, r9
 80004ec:	46c4      	mov	ip, r8
 80004ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f2:	fb09 f804 	mul.w	r8, r9, r4
 80004f6:	e7c4      	b.n	8000482 <__udivmoddi4+0x282>

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <bh1750_write_cmd>:
#include "bh1750.h"

static HAL_StatusTypeDef bh1750_write_cmd(BH1750_Handle_t *dev, uint8_t cmd, uint32_t to)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b086      	sub	sp, #24
 8000500:	af02      	add	r7, sp, #8
 8000502:	60f8      	str	r0, [r7, #12]
 8000504:	460b      	mov	r3, r1
 8000506:	607a      	str	r2, [r7, #4]
 8000508:	72fb      	strb	r3, [r7, #11]
    return HAL_I2C_Master_Transmit(dev->i2c, dev->addr, &cmd, 1, to);
 800050a:	68fb      	ldr	r3, [r7, #12]
 800050c:	6818      	ldr	r0, [r3, #0]
 800050e:	68fb      	ldr	r3, [r7, #12]
 8000510:	8899      	ldrh	r1, [r3, #4]
 8000512:	f107 020b 	add.w	r2, r7, #11
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	9300      	str	r3, [sp, #0]
 800051a:	2301      	movs	r3, #1
 800051c:	f001 fd34 	bl	8001f88 <HAL_I2C_Master_Transmit>
 8000520:	4603      	mov	r3, r0
}
 8000522:	4618      	mov	r0, r3
 8000524:	3710      	adds	r7, #16
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}

0800052a <BH1750_Init>:

HAL_StatusTypeDef BH1750_Init(BH1750_Handle_t *dev)
{
 800052a:	b580      	push	{r7, lr}
 800052c:	b084      	sub	sp, #16
 800052e:	af00      	add	r7, sp, #0
 8000530:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef r;
    r = bh1750_write_cmd(dev, BH1750_CMD_POWER_ON, 50); if (r != HAL_OK) return r;
 8000532:	2232      	movs	r2, #50	@ 0x32
 8000534:	2101      	movs	r1, #1
 8000536:	6878      	ldr	r0, [r7, #4]
 8000538:	f7ff ffe0 	bl	80004fc <bh1750_write_cmd>
 800053c:	4603      	mov	r3, r0
 800053e:	73fb      	strb	r3, [r7, #15]
 8000540:	7bfb      	ldrb	r3, [r7, #15]
 8000542:	2b00      	cmp	r3, #0
 8000544:	d001      	beq.n	800054a <BH1750_Init+0x20>
 8000546:	7bfb      	ldrb	r3, [r7, #15]
 8000548:	e01b      	b.n	8000582 <BH1750_Init+0x58>
    r = bh1750_write_cmd(dev, BH1750_CMD_RESET,    50); if (r != HAL_OK) return r;
 800054a:	2232      	movs	r2, #50	@ 0x32
 800054c:	2107      	movs	r1, #7
 800054e:	6878      	ldr	r0, [r7, #4]
 8000550:	f7ff ffd4 	bl	80004fc <bh1750_write_cmd>
 8000554:	4603      	mov	r3, r0
 8000556:	73fb      	strb	r3, [r7, #15]
 8000558:	7bfb      	ldrb	r3, [r7, #15]
 800055a:	2b00      	cmp	r3, #0
 800055c:	d001      	beq.n	8000562 <BH1750_Init+0x38>
 800055e:	7bfb      	ldrb	r3, [r7, #15]
 8000560:	e00f      	b.n	8000582 <BH1750_Init+0x58>
    r = bh1750_write_cmd(dev, BH1750_CONT_HIRES,   50); if (r != HAL_OK) return r;
 8000562:	2232      	movs	r2, #50	@ 0x32
 8000564:	2110      	movs	r1, #16
 8000566:	6878      	ldr	r0, [r7, #4]
 8000568:	f7ff ffc8 	bl	80004fc <bh1750_write_cmd>
 800056c:	4603      	mov	r3, r0
 800056e:	73fb      	strb	r3, [r7, #15]
 8000570:	7bfb      	ldrb	r3, [r7, #15]
 8000572:	2b00      	cmp	r3, #0
 8000574:	d001      	beq.n	800057a <BH1750_Init+0x50>
 8000576:	7bfb      	ldrb	r3, [r7, #15]
 8000578:	e003      	b.n	8000582 <BH1750_Init+0x58>
    HAL_Delay(180);
 800057a:	20b4      	movs	r0, #180	@ 0xb4
 800057c:	f001 f8a2 	bl	80016c4 <HAL_Delay>
    return HAL_OK;
 8000580:	2300      	movs	r3, #0
}
 8000582:	4618      	mov	r0, r3
 8000584:	3710      	adds	r7, #16
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
	...

0800058c <BH1750_ReadLux>:

HAL_StatusTypeDef BH1750_ReadLux(BH1750_Handle_t *dev, float *lux, uint32_t timeout_ms)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b088      	sub	sp, #32
 8000590:	af02      	add	r7, sp, #8
 8000592:	60f8      	str	r0, [r7, #12]
 8000594:	60b9      	str	r1, [r7, #8]
 8000596:	607a      	str	r2, [r7, #4]
    uint8_t buf[2] = {0,0};
 8000598:	2300      	movs	r3, #0
 800059a:	823b      	strh	r3, [r7, #16]
    HAL_StatusTypeDef r = HAL_I2C_Master_Receive(dev->i2c, dev->addr, buf, 2, timeout_ms);
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	6818      	ldr	r0, [r3, #0]
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	8899      	ldrh	r1, [r3, #4]
 80005a4:	f107 0210 	add.w	r2, r7, #16
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	9300      	str	r3, [sp, #0]
 80005ac:	2302      	movs	r3, #2
 80005ae:	f001 fde9 	bl	8002184 <HAL_I2C_Master_Receive>
 80005b2:	4603      	mov	r3, r0
 80005b4:	75fb      	strb	r3, [r7, #23]
    if (r != HAL_OK) return r;
 80005b6:	7dfb      	ldrb	r3, [r7, #23]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <BH1750_ReadLux+0x34>
 80005bc:	7dfb      	ldrb	r3, [r7, #23]
 80005be:	e015      	b.n	80005ec <BH1750_ReadLux+0x60>

    uint16_t raw = ((uint16_t)buf[0] << 8) | buf[1];
 80005c0:	7c3b      	ldrb	r3, [r7, #16]
 80005c2:	b21b      	sxth	r3, r3
 80005c4:	021b      	lsls	r3, r3, #8
 80005c6:	b21a      	sxth	r2, r3
 80005c8:	7c7b      	ldrb	r3, [r7, #17]
 80005ca:	b21b      	sxth	r3, r3
 80005cc:	4313      	orrs	r3, r2
 80005ce:	b21b      	sxth	r3, r3
 80005d0:	82bb      	strh	r3, [r7, #20]
    *lux = ((float)raw) / 1.2f;
 80005d2:	8abb      	ldrh	r3, [r7, #20]
 80005d4:	ee07 3a90 	vmov	s15, r3
 80005d8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80005dc:	eddf 6a05 	vldr	s13, [pc, #20]	@ 80005f4 <BH1750_ReadLux+0x68>
 80005e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80005e4:	68bb      	ldr	r3, [r7, #8]
 80005e6:	edc3 7a00 	vstr	s15, [r3]
    return HAL_OK;
 80005ea:	2300      	movs	r3, #0
}
 80005ec:	4618      	mov	r0, r3
 80005ee:	3718      	adds	r7, #24
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	3f99999a 	.word	0x3f99999a

080005f8 <DWT_Delay_Init>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static inline void DWT_Delay_Init(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80005fc:	4b08      	ldr	r3, [pc, #32]	@ (8000620 <DWT_Delay_Init+0x28>)
 80005fe:	68db      	ldr	r3, [r3, #12]
 8000600:	4a07      	ldr	r2, [pc, #28]	@ (8000620 <DWT_Delay_Init+0x28>)
 8000602:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000606:	60d3      	str	r3, [r2, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000608:	4b06      	ldr	r3, [pc, #24]	@ (8000624 <DWT_Delay_Init+0x2c>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a05      	ldr	r2, [pc, #20]	@ (8000624 <DWT_Delay_Init+0x2c>)
 800060e:	f043 0301 	orr.w	r3, r3, #1
 8000612:	6013      	str	r3, [r2, #0]
}
 8000614:	bf00      	nop
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	e000edf0 	.word	0xe000edf0
 8000624:	e0001000 	.word	0xe0001000

08000628 <delay_us>:

static inline void delay_us(uint32_t us)
{
 8000628:	b480      	push	{r7}
 800062a:	b085      	sub	sp, #20
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
  uint32_t start = DWT->CYCCNT;
 8000630:	4b0e      	ldr	r3, [pc, #56]	@ (800066c <delay_us+0x44>)
 8000632:	685b      	ldr	r3, [r3, #4]
 8000634:	60fb      	str	r3, [r7, #12]
  uint32_t ticks = (SystemCoreClock / 1000000) * us;
 8000636:	4b0e      	ldr	r3, [pc, #56]	@ (8000670 <delay_us+0x48>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	4a0e      	ldr	r2, [pc, #56]	@ (8000674 <delay_us+0x4c>)
 800063c:	fba2 2303 	umull	r2, r3, r2, r3
 8000640:	0c9a      	lsrs	r2, r3, #18
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	fb02 f303 	mul.w	r3, r2, r3
 8000648:	60bb      	str	r3, [r7, #8]
  while ((DWT->CYCCNT - start) < ticks) { __NOP(); }
 800064a:	e000      	b.n	800064e <delay_us+0x26>
 800064c:	bf00      	nop
 800064e:	4b07      	ldr	r3, [pc, #28]	@ (800066c <delay_us+0x44>)
 8000650:	685a      	ldr	r2, [r3, #4]
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	1ad3      	subs	r3, r2, r3
 8000656:	68ba      	ldr	r2, [r7, #8]
 8000658:	429a      	cmp	r2, r3
 800065a:	d8f7      	bhi.n	800064c <delay_us+0x24>
}
 800065c:	bf00      	nop
 800065e:	bf00      	nop
 8000660:	3714      	adds	r7, #20
 8000662:	46bd      	mov	sp, r7
 8000664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop
 800066c:	e0001000 	.word	0xe0001000
 8000670:	20000004 	.word	0x20000004
 8000674:	431bde83 	.word	0x431bde83

08000678 <trig_pulse_10us>:

static inline void trig_pulse_10us(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 800067c:	2200      	movs	r2, #0
 800067e:	2102      	movs	r1, #2
 8000680:	480a      	ldr	r0, [pc, #40]	@ (80006ac <trig_pulse_10us+0x34>)
 8000682:	f001 faf1 	bl	8001c68 <HAL_GPIO_WritePin>
  delay_us(2);
 8000686:	2002      	movs	r0, #2
 8000688:	f7ff ffce 	bl	8000628 <delay_us>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 800068c:	2201      	movs	r2, #1
 800068e:	2102      	movs	r1, #2
 8000690:	4806      	ldr	r0, [pc, #24]	@ (80006ac <trig_pulse_10us+0x34>)
 8000692:	f001 fae9 	bl	8001c68 <HAL_GPIO_WritePin>
  delay_us(12);
 8000696:	200c      	movs	r0, #12
 8000698:	f7ff ffc6 	bl	8000628 <delay_us>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 800069c:	2200      	movs	r2, #0
 800069e:	2102      	movs	r1, #2
 80006a0:	4802      	ldr	r0, [pc, #8]	@ (80006ac <trig_pulse_10us+0x34>)
 80006a2:	f001 fae1 	bl	8001c68 <HAL_GPIO_WritePin>
}
 80006a6:	bf00      	nop
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	40020000 	.word	0x40020000

080006b0 <LED_ALL_OFF>:

static inline void LED_ALL_OFF(void) {
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 80006b4:	2200      	movs	r2, #0
 80006b6:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80006ba:	4802      	ldr	r0, [pc, #8]	@ (80006c4 <LED_ALL_OFF+0x14>)
 80006bc:	f001 fad4 	bl	8001c68 <HAL_GPIO_WritePin>
}
 80006c0:	bf00      	nop
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	40020c00 	.word	0x40020c00

080006c8 <LED_ALL_TOGGLE>:

static inline void LED_ALL_TOGGLE(void) {
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin);
 80006cc:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80006d0:	4802      	ldr	r0, [pc, #8]	@ (80006dc <LED_ALL_TOGGLE+0x14>)
 80006d2:	f001 fae2 	bl	8001c9a <HAL_GPIO_TogglePin>
}
 80006d6:	bf00      	nop
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	40020c00 	.word	0x40020c00

080006e0 <vMuteLedTimerCb>:

static void vMuteLedTimerCb(TimerHandle_t xTimer) {
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
    xEventGroupClearBits(gEg, EG_BIT_MUTE_LED);
 80006e8:	4b04      	ldr	r3, [pc, #16]	@ (80006fc <vMuteLedTimerCb+0x1c>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	2101      	movs	r1, #1
 80006ee:	4618      	mov	r0, r3
 80006f0:	f004 fcf8 	bl	80050e4 <xEventGroupClearBits>
}
 80006f4:	bf00      	nop
 80006f6:	3708      	adds	r7, #8
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	20000138 	.word	0x20000138

08000700 <vMuteBuzTimerCb>:

static void vMuteBuzTimerCb(TimerHandle_t xTimer) {
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
    xEventGroupClearBits(gEg, EG_BIT_MUTE_BUZ);
 8000708:	4b04      	ldr	r3, [pc, #16]	@ (800071c <vMuteBuzTimerCb+0x1c>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	2102      	movs	r1, #2
 800070e:	4618      	mov	r0, r3
 8000710:	f004 fce8 	bl	80050e4 <xEventGroupClearBits>
}
 8000714:	bf00      	nop
 8000716:	3708      	adds	r7, #8
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	20000138 	.word	0x20000138

08000720 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b086      	sub	sp, #24
 8000724:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000726:	f000 ff5b 	bl	80015e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800072a:	f000 f8c3 	bl	80008b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800072e:	f000 fa41 	bl	8000bb4 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000732:	f000 f9c7 	bl	8000ac4 <MX_TIM3_Init>
  MX_TIM2_Init();
 8000736:	f000 f955 	bl	80009e4 <MX_TIM2_Init>
  MX_I2C3_Init();
 800073a:	f000 f925 	bl	8000988 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800073e:	2104      	movs	r1, #4
 8000740:	4844      	ldr	r0, [pc, #272]	@ (8000854 <main+0x134>)
 8000742:	f003 f803 	bl	800374c <HAL_TIM_PWM_Start>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3);
 8000746:	2108      	movs	r1, #8
 8000748:	4843      	ldr	r0, [pc, #268]	@ (8000858 <main+0x138>)
 800074a:	f003 f921 	bl	8003990 <HAL_TIM_IC_Start_IT>
  DWT_Delay_Init();
 800074e:	f7ff ff53 	bl	80005f8 <DWT_Delay_Init>
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 2000);
 8000752:	4b40      	ldr	r3, [pc, #256]	@ (8000854 <main+0x134>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800075a:	639a      	str	r2, [r3, #56]	@ 0x38
  gEg = xEventGroupCreate();
 800075c:	f004 fbd6 	bl	8004f0c <xEventGroupCreate>
 8000760:	4603      	mov	r3, r0
 8000762:	4a3e      	ldr	r2, [pc, #248]	@ (800085c <main+0x13c>)
 8000764:	6013      	str	r3, [r2, #0]
  configASSERT(gEg != NULL);
 8000766:	4b3d      	ldr	r3, [pc, #244]	@ (800085c <main+0x13c>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	2b00      	cmp	r3, #0
 800076c:	d10b      	bne.n	8000786 <main+0x66>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800076e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000772:	f383 8811 	msr	BASEPRI, r3
 8000776:	f3bf 8f6f 	isb	sy
 800077a:	f3bf 8f4f 	dsb	sy
 800077e:	60fb      	str	r3, [r7, #12]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000780:	bf00      	nop
 8000782:	bf00      	nop
 8000784:	e7fd      	b.n	8000782 <main+0x62>

  MuteLedTimer = xTimerCreate("MuteLED5s", pdMS_TO_TICKS(5000), pdFALSE, NULL, vMuteLedTimerCb);
 8000786:	4b36      	ldr	r3, [pc, #216]	@ (8000860 <main+0x140>)
 8000788:	9300      	str	r3, [sp, #0]
 800078a:	2300      	movs	r3, #0
 800078c:	2200      	movs	r2, #0
 800078e:	f241 3188 	movw	r1, #5000	@ 0x1388
 8000792:	4834      	ldr	r0, [pc, #208]	@ (8000864 <main+0x144>)
 8000794:	f006 fcfe 	bl	8007194 <xTimerCreate>
 8000798:	4603      	mov	r3, r0
 800079a:	4a33      	ldr	r2, [pc, #204]	@ (8000868 <main+0x148>)
 800079c:	6013      	str	r3, [r2, #0]
  configASSERT(MuteLedTimer != NULL);
 800079e:	4b32      	ldr	r3, [pc, #200]	@ (8000868 <main+0x148>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d10b      	bne.n	80007be <main+0x9e>
	__asm volatile
 80007a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80007aa:	f383 8811 	msr	BASEPRI, r3
 80007ae:	f3bf 8f6f 	isb	sy
 80007b2:	f3bf 8f4f 	dsb	sy
 80007b6:	60bb      	str	r3, [r7, #8]
}
 80007b8:	bf00      	nop
 80007ba:	bf00      	nop
 80007bc:	e7fd      	b.n	80007ba <main+0x9a>

  MuteBuzTimer = xTimerCreate("MuteBUZ5s", pdMS_TO_TICKS(5000), pdFALSE, NULL, vMuteBuzTimerCb);
 80007be:	4b2b      	ldr	r3, [pc, #172]	@ (800086c <main+0x14c>)
 80007c0:	9300      	str	r3, [sp, #0]
 80007c2:	2300      	movs	r3, #0
 80007c4:	2200      	movs	r2, #0
 80007c6:	f241 3188 	movw	r1, #5000	@ 0x1388
 80007ca:	4829      	ldr	r0, [pc, #164]	@ (8000870 <main+0x150>)
 80007cc:	f006 fce2 	bl	8007194 <xTimerCreate>
 80007d0:	4603      	mov	r3, r0
 80007d2:	4a28      	ldr	r2, [pc, #160]	@ (8000874 <main+0x154>)
 80007d4:	6013      	str	r3, [r2, #0]
  configASSERT(MuteBuzTimer != NULL);
 80007d6:	4b27      	ldr	r3, [pc, #156]	@ (8000874 <main+0x154>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d10b      	bne.n	80007f6 <main+0xd6>
	__asm volatile
 80007de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80007e2:	f383 8811 	msr	BASEPRI, r3
 80007e6:	f3bf 8f6f 	isb	sy
 80007ea:	f3bf 8f4f 	dsb	sy
 80007ee:	607b      	str	r3, [r7, #4]
}
 80007f0:	bf00      	nop
 80007f2:	bf00      	nop
 80007f4:	e7fd      	b.n	80007f2 <main+0xd2>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80007f6:	f004 fa79 	bl	8004cec <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of BuzzerTask */
  BuzzerTaskHandle = osThreadNew(StartTask01, NULL, &BuzzerTask_attributes);
 80007fa:	4a1f      	ldr	r2, [pc, #124]	@ (8000878 <main+0x158>)
 80007fc:	2100      	movs	r1, #0
 80007fe:	481f      	ldr	r0, [pc, #124]	@ (800087c <main+0x15c>)
 8000800:	f004 fabe 	bl	8004d80 <osThreadNew>
 8000804:	4603      	mov	r3, r0
 8000806:	4a1e      	ldr	r2, [pc, #120]	@ (8000880 <main+0x160>)
 8000808:	6013      	str	r3, [r2, #0]

  /* creation of SensorTask */
  SensorTaskHandle = osThreadNew(StartTask02, NULL, &SensorTask_attributes);
 800080a:	4a1e      	ldr	r2, [pc, #120]	@ (8000884 <main+0x164>)
 800080c:	2100      	movs	r1, #0
 800080e:	481e      	ldr	r0, [pc, #120]	@ (8000888 <main+0x168>)
 8000810:	f004 fab6 	bl	8004d80 <osThreadNew>
 8000814:	4603      	mov	r3, r0
 8000816:	4a1d      	ldr	r2, [pc, #116]	@ (800088c <main+0x16c>)
 8000818:	6013      	str	r3, [r2, #0]

  /* creation of ServoTask */
  ServoTaskHandle = osThreadNew(StartTask03, NULL, &ServoTask_attributes);
 800081a:	4a1d      	ldr	r2, [pc, #116]	@ (8000890 <main+0x170>)
 800081c:	2100      	movs	r1, #0
 800081e:	481d      	ldr	r0, [pc, #116]	@ (8000894 <main+0x174>)
 8000820:	f004 faae 	bl	8004d80 <osThreadNew>
 8000824:	4603      	mov	r3, r0
 8000826:	4a1c      	ldr	r2, [pc, #112]	@ (8000898 <main+0x178>)
 8000828:	6013      	str	r3, [r2, #0]

  /* creation of LedTask */
  LedTaskHandle = osThreadNew(StartTask04, NULL, &LedTask_attributes);
 800082a:	4a1c      	ldr	r2, [pc, #112]	@ (800089c <main+0x17c>)
 800082c:	2100      	movs	r1, #0
 800082e:	481c      	ldr	r0, [pc, #112]	@ (80008a0 <main+0x180>)
 8000830:	f004 faa6 	bl	8004d80 <osThreadNew>
 8000834:	4603      	mov	r3, r0
 8000836:	4a1b      	ldr	r2, [pc, #108]	@ (80008a4 <main+0x184>)
 8000838:	6013      	str	r3, [r2, #0]

  /* creation of LuxTask */
  LuxTaskHandle = osThreadNew(StartTask05, NULL, &LuxTask_attributes);
 800083a:	4a1b      	ldr	r2, [pc, #108]	@ (80008a8 <main+0x188>)
 800083c:	2100      	movs	r1, #0
 800083e:	481b      	ldr	r0, [pc, #108]	@ (80008ac <main+0x18c>)
 8000840:	f004 fa9e 	bl	8004d80 <osThreadNew>
 8000844:	4603      	mov	r3, r0
 8000846:	4a1a      	ldr	r2, [pc, #104]	@ (80008b0 <main+0x190>)
 8000848:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800084a:	f004 fa73 	bl	8004d34 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800084e:	bf00      	nop
 8000850:	e7fd      	b.n	800084e <main+0x12e>
 8000852:	bf00      	nop
 8000854:	200000cc 	.word	0x200000cc
 8000858:	20000084 	.word	0x20000084
 800085c:	20000138 	.word	0x20000138
 8000860:	080006e1 	.word	0x080006e1
 8000864:	080081f8 	.word	0x080081f8
 8000868:	2000013c 	.word	0x2000013c
 800086c:	08000701 	.word	0x08000701
 8000870:	08008204 	.word	0x08008204
 8000874:	20000140 	.word	0x20000140
 8000878:	08008230 	.word	0x08008230
 800087c:	08000ee9 	.word	0x08000ee9
 8000880:	20000114 	.word	0x20000114
 8000884:	08008254 	.word	0x08008254
 8000888:	08000f95 	.word	0x08000f95
 800088c:	20000118 	.word	0x20000118
 8000890:	08008278 	.word	0x08008278
 8000894:	08001021 	.word	0x08001021
 8000898:	2000011c 	.word	0x2000011c
 800089c:	0800829c 	.word	0x0800829c
 80008a0:	080010b5 	.word	0x080010b5
 80008a4:	20000120 	.word	0x20000120
 80008a8:	080082c0 	.word	0x080082c0
 80008ac:	08001151 	.word	0x08001151
 80008b0:	20000124 	.word	0x20000124

080008b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b094      	sub	sp, #80	@ 0x50
 80008b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ba:	f107 0320 	add.w	r3, r7, #32
 80008be:	2230      	movs	r2, #48	@ 0x30
 80008c0:	2100      	movs	r1, #0
 80008c2:	4618      	mov	r0, r3
 80008c4:	f007 fc38 	bl	8008138 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008c8:	f107 030c 	add.w	r3, r7, #12
 80008cc:	2200      	movs	r2, #0
 80008ce:	601a      	str	r2, [r3, #0]
 80008d0:	605a      	str	r2, [r3, #4]
 80008d2:	609a      	str	r2, [r3, #8]
 80008d4:	60da      	str	r2, [r3, #12]
 80008d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008d8:	2300      	movs	r3, #0
 80008da:	60bb      	str	r3, [r7, #8]
 80008dc:	4b28      	ldr	r3, [pc, #160]	@ (8000980 <SystemClock_Config+0xcc>)
 80008de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008e0:	4a27      	ldr	r2, [pc, #156]	@ (8000980 <SystemClock_Config+0xcc>)
 80008e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80008e8:	4b25      	ldr	r3, [pc, #148]	@ (8000980 <SystemClock_Config+0xcc>)
 80008ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008f0:	60bb      	str	r3, [r7, #8]
 80008f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008f4:	2300      	movs	r3, #0
 80008f6:	607b      	str	r3, [r7, #4]
 80008f8:	4b22      	ldr	r3, [pc, #136]	@ (8000984 <SystemClock_Config+0xd0>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a21      	ldr	r2, [pc, #132]	@ (8000984 <SystemClock_Config+0xd0>)
 80008fe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000902:	6013      	str	r3, [r2, #0]
 8000904:	4b1f      	ldr	r3, [pc, #124]	@ (8000984 <SystemClock_Config+0xd0>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800090c:	607b      	str	r3, [r7, #4]
 800090e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000910:	2301      	movs	r3, #1
 8000912:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000914:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000918:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800091a:	2302      	movs	r3, #2
 800091c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800091e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000922:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000924:	2308      	movs	r3, #8
 8000926:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000928:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800092c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800092e:	2302      	movs	r3, #2
 8000930:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000932:	2307      	movs	r3, #7
 8000934:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000936:	f107 0320 	add.w	r3, r7, #32
 800093a:	4618      	mov	r0, r3
 800093c:	f002 f9da 	bl	8002cf4 <HAL_RCC_OscConfig>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000946:	f000 fc9b 	bl	8001280 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800094a:	230f      	movs	r3, #15
 800094c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800094e:	2302      	movs	r3, #2
 8000950:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000952:	2300      	movs	r3, #0
 8000954:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000956:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800095a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800095c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000960:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000962:	f107 030c 	add.w	r3, r7, #12
 8000966:	2105      	movs	r1, #5
 8000968:	4618      	mov	r0, r3
 800096a:	f002 fc3b 	bl	80031e4 <HAL_RCC_ClockConfig>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000974:	f000 fc84 	bl	8001280 <Error_Handler>
  }
}
 8000978:	bf00      	nop
 800097a:	3750      	adds	r7, #80	@ 0x50
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	40023800 	.word	0x40023800
 8000984:	40007000 	.word	0x40007000

08000988 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800098c:	4b12      	ldr	r3, [pc, #72]	@ (80009d8 <MX_I2C3_Init+0x50>)
 800098e:	4a13      	ldr	r2, [pc, #76]	@ (80009dc <MX_I2C3_Init+0x54>)
 8000990:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000992:	4b11      	ldr	r3, [pc, #68]	@ (80009d8 <MX_I2C3_Init+0x50>)
 8000994:	4a12      	ldr	r2, [pc, #72]	@ (80009e0 <MX_I2C3_Init+0x58>)
 8000996:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000998:	4b0f      	ldr	r3, [pc, #60]	@ (80009d8 <MX_I2C3_Init+0x50>)
 800099a:	2200      	movs	r2, #0
 800099c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800099e:	4b0e      	ldr	r3, [pc, #56]	@ (80009d8 <MX_I2C3_Init+0x50>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009a4:	4b0c      	ldr	r3, [pc, #48]	@ (80009d8 <MX_I2C3_Init+0x50>)
 80009a6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80009aa:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009ac:	4b0a      	ldr	r3, [pc, #40]	@ (80009d8 <MX_I2C3_Init+0x50>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80009b2:	4b09      	ldr	r3, [pc, #36]	@ (80009d8 <MX_I2C3_Init+0x50>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009b8:	4b07      	ldr	r3, [pc, #28]	@ (80009d8 <MX_I2C3_Init+0x50>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009be:	4b06      	ldr	r3, [pc, #24]	@ (80009d8 <MX_I2C3_Init+0x50>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80009c4:	4804      	ldr	r0, [pc, #16]	@ (80009d8 <MX_I2C3_Init+0x50>)
 80009c6:	f001 f99b 	bl	8001d00 <HAL_I2C_Init>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80009d0:	f000 fc56 	bl	8001280 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80009d4:	bf00      	nop
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	20000030 	.word	0x20000030
 80009dc:	40005c00 	.word	0x40005c00
 80009e0:	000186a0 	.word	0x000186a0

080009e4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b08a      	sub	sp, #40	@ 0x28
 80009e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009ea:	f107 0318 	add.w	r3, r7, #24
 80009ee:	2200      	movs	r2, #0
 80009f0:	601a      	str	r2, [r3, #0]
 80009f2:	605a      	str	r2, [r3, #4]
 80009f4:	609a      	str	r2, [r3, #8]
 80009f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009f8:	f107 0310 	add.w	r3, r7, #16
 80009fc:	2200      	movs	r2, #0
 80009fe:	601a      	str	r2, [r3, #0]
 8000a00:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000a02:	463b      	mov	r3, r7
 8000a04:	2200      	movs	r2, #0
 8000a06:	601a      	str	r2, [r3, #0]
 8000a08:	605a      	str	r2, [r3, #4]
 8000a0a:	609a      	str	r2, [r3, #8]
 8000a0c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a0e:	4b2c      	ldr	r3, [pc, #176]	@ (8000ac0 <MX_TIM2_Init+0xdc>)
 8000a10:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a14:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8000a16:	4b2a      	ldr	r3, [pc, #168]	@ (8000ac0 <MX_TIM2_Init+0xdc>)
 8000a18:	2253      	movs	r2, #83	@ 0x53
 8000a1a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a1c:	4b28      	ldr	r3, [pc, #160]	@ (8000ac0 <MX_TIM2_Init+0xdc>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000a22:	4b27      	ldr	r3, [pc, #156]	@ (8000ac0 <MX_TIM2_Init+0xdc>)
 8000a24:	f04f 32ff 	mov.w	r2, #4294967295
 8000a28:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a2a:	4b25      	ldr	r3, [pc, #148]	@ (8000ac0 <MX_TIM2_Init+0xdc>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a30:	4b23      	ldr	r3, [pc, #140]	@ (8000ac0 <MX_TIM2_Init+0xdc>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a36:	4822      	ldr	r0, [pc, #136]	@ (8000ac0 <MX_TIM2_Init+0xdc>)
 8000a38:	f002 fde0 	bl	80035fc <HAL_TIM_Base_Init>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8000a42:	f000 fc1d 	bl	8001280 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a46:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a4a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a4c:	f107 0318 	add.w	r3, r7, #24
 8000a50:	4619      	mov	r1, r3
 8000a52:	481b      	ldr	r0, [pc, #108]	@ (8000ac0 <MX_TIM2_Init+0xdc>)
 8000a54:	f003 fb12 	bl	800407c <HAL_TIM_ConfigClockSource>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000a5e:	f000 fc0f 	bl	8001280 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000a62:	4817      	ldr	r0, [pc, #92]	@ (8000ac0 <MX_TIM2_Init+0xdc>)
 8000a64:	f002 ff3a 	bl	80038dc <HAL_TIM_IC_Init>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000a6e:	f000 fc07 	bl	8001280 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a72:	2300      	movs	r3, #0
 8000a74:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a76:	2300      	movs	r3, #0
 8000a78:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a7a:	f107 0310 	add.w	r3, r7, #16
 8000a7e:	4619      	mov	r1, r3
 8000a80:	480f      	ldr	r0, [pc, #60]	@ (8000ac0 <MX_TIM2_Init+0xdc>)
 8000a82:	f004 f86f 	bl	8004b64 <HAL_TIMEx_MasterConfigSynchronization>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8000a8c:	f000 fbf8 	bl	8001280 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000a90:	2300      	movs	r3, #0
 8000a92:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000a94:	2301      	movs	r3, #1
 8000a96:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8000aa0:	463b      	mov	r3, r7
 8000aa2:	2208      	movs	r2, #8
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4806      	ldr	r0, [pc, #24]	@ (8000ac0 <MX_TIM2_Init+0xdc>)
 8000aa8:	f003 f98a 	bl	8003dc0 <HAL_TIM_IC_ConfigChannel>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8000ab2:	f000 fbe5 	bl	8001280 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ab6:	bf00      	nop
 8000ab8:	3728      	adds	r7, #40	@ 0x28
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	20000084 	.word	0x20000084

08000ac4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b08e      	sub	sp, #56	@ 0x38
 8000ac8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000aca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ace:	2200      	movs	r2, #0
 8000ad0:	601a      	str	r2, [r3, #0]
 8000ad2:	605a      	str	r2, [r3, #4]
 8000ad4:	609a      	str	r2, [r3, #8]
 8000ad6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ad8:	f107 0320 	add.w	r3, r7, #32
 8000adc:	2200      	movs	r2, #0
 8000ade:	601a      	str	r2, [r3, #0]
 8000ae0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ae2:	1d3b      	adds	r3, r7, #4
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	605a      	str	r2, [r3, #4]
 8000aea:	609a      	str	r2, [r3, #8]
 8000aec:	60da      	str	r2, [r3, #12]
 8000aee:	611a      	str	r2, [r3, #16]
 8000af0:	615a      	str	r2, [r3, #20]
 8000af2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000af4:	4b2d      	ldr	r3, [pc, #180]	@ (8000bac <MX_TIM3_Init+0xe8>)
 8000af6:	4a2e      	ldr	r2, [pc, #184]	@ (8000bb0 <MX_TIM3_Init+0xec>)
 8000af8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8000afa:	4b2c      	ldr	r3, [pc, #176]	@ (8000bac <MX_TIM3_Init+0xe8>)
 8000afc:	2253      	movs	r2, #83	@ 0x53
 8000afe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b00:	4b2a      	ldr	r3, [pc, #168]	@ (8000bac <MX_TIM3_Init+0xe8>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 8000b06:	4b29      	ldr	r3, [pc, #164]	@ (8000bac <MX_TIM3_Init+0xe8>)
 8000b08:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000b0c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b0e:	4b27      	ldr	r3, [pc, #156]	@ (8000bac <MX_TIM3_Init+0xe8>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b14:	4b25      	ldr	r3, [pc, #148]	@ (8000bac <MX_TIM3_Init+0xe8>)
 8000b16:	2280      	movs	r2, #128	@ 0x80
 8000b18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000b1a:	4824      	ldr	r0, [pc, #144]	@ (8000bac <MX_TIM3_Init+0xe8>)
 8000b1c:	f002 fd6e 	bl	80035fc <HAL_TIM_Base_Init>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000b26:	f000 fbab 	bl	8001280 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b2a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000b30:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b34:	4619      	mov	r1, r3
 8000b36:	481d      	ldr	r0, [pc, #116]	@ (8000bac <MX_TIM3_Init+0xe8>)
 8000b38:	f003 faa0 	bl	800407c <HAL_TIM_ConfigClockSource>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000b42:	f000 fb9d 	bl	8001280 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000b46:	4819      	ldr	r0, [pc, #100]	@ (8000bac <MX_TIM3_Init+0xe8>)
 8000b48:	f002 fda7 	bl	800369a <HAL_TIM_PWM_Init>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000b52:	f000 fb95 	bl	8001280 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b56:	2300      	movs	r3, #0
 8000b58:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b5e:	f107 0320 	add.w	r3, r7, #32
 8000b62:	4619      	mov	r1, r3
 8000b64:	4811      	ldr	r0, [pc, #68]	@ (8000bac <MX_TIM3_Init+0xe8>)
 8000b66:	f003 fffd 	bl	8004b64 <HAL_TIMEx_MasterConfigSynchronization>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000b70:	f000 fb86 	bl	8001280 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b74:	2360      	movs	r3, #96	@ 0x60
 8000b76:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1500;
 8000b78:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000b7c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b82:	2300      	movs	r3, #0
 8000b84:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b86:	1d3b      	adds	r3, r7, #4
 8000b88:	2204      	movs	r2, #4
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4807      	ldr	r0, [pc, #28]	@ (8000bac <MX_TIM3_Init+0xe8>)
 8000b8e:	f003 f9b3 	bl	8003ef8 <HAL_TIM_PWM_ConfigChannel>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000b98:	f000 fb72 	bl	8001280 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000b9c:	4803      	ldr	r0, [pc, #12]	@ (8000bac <MX_TIM3_Init+0xe8>)
 8000b9e:	f000 fc6f 	bl	8001480 <HAL_TIM_MspPostInit>

}
 8000ba2:	bf00      	nop
 8000ba4:	3738      	adds	r7, #56	@ 0x38
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	200000cc 	.word	0x200000cc
 8000bb0:	40000400 	.word	0x40000400

08000bb4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b08e      	sub	sp, #56	@ 0x38
 8000bb8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	601a      	str	r2, [r3, #0]
 8000bc2:	605a      	str	r2, [r3, #4]
 8000bc4:	609a      	str	r2, [r3, #8]
 8000bc6:	60da      	str	r2, [r3, #12]
 8000bc8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	60fb      	str	r3, [r7, #12]
 8000bce:	4b4a      	ldr	r3, [pc, #296]	@ (8000cf8 <MX_GPIO_Init+0x144>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd2:	4a49      	ldr	r2, [pc, #292]	@ (8000cf8 <MX_GPIO_Init+0x144>)
 8000bd4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000bd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bda:	4b47      	ldr	r3, [pc, #284]	@ (8000cf8 <MX_GPIO_Init+0x144>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000be2:	60fb      	str	r3, [r7, #12]
 8000be4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	60bb      	str	r3, [r7, #8]
 8000bea:	4b43      	ldr	r3, [pc, #268]	@ (8000cf8 <MX_GPIO_Init+0x144>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bee:	4a42      	ldr	r2, [pc, #264]	@ (8000cf8 <MX_GPIO_Init+0x144>)
 8000bf0:	f043 0301 	orr.w	r3, r3, #1
 8000bf4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bf6:	4b40      	ldr	r3, [pc, #256]	@ (8000cf8 <MX_GPIO_Init+0x144>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfa:	f003 0301 	and.w	r3, r3, #1
 8000bfe:	60bb      	str	r3, [r7, #8]
 8000c00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c02:	2300      	movs	r3, #0
 8000c04:	607b      	str	r3, [r7, #4]
 8000c06:	4b3c      	ldr	r3, [pc, #240]	@ (8000cf8 <MX_GPIO_Init+0x144>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c0a:	4a3b      	ldr	r2, [pc, #236]	@ (8000cf8 <MX_GPIO_Init+0x144>)
 8000c0c:	f043 0308 	orr.w	r3, r3, #8
 8000c10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c12:	4b39      	ldr	r3, [pc, #228]	@ (8000cf8 <MX_GPIO_Init+0x144>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c16:	f003 0308 	and.w	r3, r3, #8
 8000c1a:	607b      	str	r3, [r7, #4]
 8000c1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c1e:	2300      	movs	r3, #0
 8000c20:	603b      	str	r3, [r7, #0]
 8000c22:	4b35      	ldr	r3, [pc, #212]	@ (8000cf8 <MX_GPIO_Init+0x144>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c26:	4a34      	ldr	r2, [pc, #208]	@ (8000cf8 <MX_GPIO_Init+0x144>)
 8000c28:	f043 0304 	orr.w	r3, r3, #4
 8000c2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c2e:	4b32      	ldr	r3, [pc, #200]	@ (8000cf8 <MX_GPIO_Init+0x144>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c32:	f003 0304 	and.w	r3, r3, #4
 8000c36:	603b      	str	r3, [r7, #0]
 8000c38:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	2102      	movs	r1, #2
 8000c3e:	482f      	ldr	r0, [pc, #188]	@ (8000cfc <MX_GPIO_Init+0x148>)
 8000c40:	f001 f812 	bl	8001c68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8000c44:	2201      	movs	r2, #1
 8000c46:	2140      	movs	r1, #64	@ 0x40
 8000c48:	482c      	ldr	r0, [pc, #176]	@ (8000cfc <MX_GPIO_Init+0x148>)
 8000c4a:	f001 f80d 	bl	8001c68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 8000c4e:	2200      	movs	r2, #0
 8000c50:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000c54:	482a      	ldr	r0, [pc, #168]	@ (8000d00 <MX_GPIO_Init+0x14c>)
 8000c56:	f001 f807 	bl	8001c68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c5e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c62:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c64:	2300      	movs	r3, #0
 8000c66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	4823      	ldr	r0, [pc, #140]	@ (8000cfc <MX_GPIO_Init+0x148>)
 8000c70:	f000 fe5e 	bl	8001930 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6;
 8000c74:	2342      	movs	r3, #66	@ 0x42
 8000c76:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c80:	2300      	movs	r3, #0
 8000c82:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c84:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c88:	4619      	mov	r1, r3
 8000c8a:	481c      	ldr	r0, [pc, #112]	@ (8000cfc <MX_GPIO_Init+0x148>)
 8000c8c:	f000 fe50 	bl	8001930 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin;
 8000c90:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000c94:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c96:	2301      	movs	r3, #1
 8000c98:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ca2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	4815      	ldr	r0, [pc, #84]	@ (8000d00 <MX_GPIO_Init+0x14c>)
 8000caa:	f000 fe41 	bl	8001930 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000cae:	2200      	movs	r2, #0
 8000cb0:	2105      	movs	r1, #5
 8000cb2:	2006      	movs	r0, #6
 8000cb4:	f000 fe05 	bl	80018c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000cb8:	2006      	movs	r0, #6
 8000cba:	f000 fe1e 	bl	80018fa <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  // PA2 -> TIM2_CH3 (ECHO)
  GPIO_InitTypeDef GPIO_InitStruct2 = {0};
 8000cbe:	f107 0310 	add.w	r3, r7, #16
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	601a      	str	r2, [r3, #0]
 8000cc6:	605a      	str	r2, [r3, #4]
 8000cc8:	609a      	str	r2, [r3, #8]
 8000cca:	60da      	str	r2, [r3, #12]
 8000ccc:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct2.Pin       = GPIO_PIN_2;
 8000cce:	2304      	movs	r3, #4
 8000cd0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct2.Mode      = GPIO_MODE_AF_PP;
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct2.Pull      = GPIO_PULLDOWN;
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct2.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000cda:	2302      	movs	r3, #2
 8000cdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct2.Alternate = GPIO_AF1_TIM2;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct2);
 8000ce2:	f107 0310 	add.w	r3, r7, #16
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	4804      	ldr	r0, [pc, #16]	@ (8000cfc <MX_GPIO_Init+0x148>)
 8000cea:	f000 fe21 	bl	8001930 <HAL_GPIO_Init>

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000cee:	bf00      	nop
 8000cf0:	3738      	adds	r7, #56	@ 0x38
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	40023800 	.word	0x40023800
 8000cfc:	40020000 	.word	0x40020000
 8000d00:	40020c00 	.word	0x40020c00

08000d04 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b086      	sub	sp, #24
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM2 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d14:	d156      	bne.n	8000dc4 <HAL_TIM_IC_CaptureCallback+0xc0>
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	7f1b      	ldrb	r3, [r3, #28]
 8000d1a:	2b04      	cmp	r3, #4
 8000d1c:	d152      	bne.n	8000dc4 <HAL_TIM_IC_CaptureCallback+0xc0>
  {
    if (g_capState == 0) {
 8000d1e:	4b2b      	ldr	r3, [pc, #172]	@ (8000dcc <HAL_TIM_IC_CaptureCallback+0xc8>)
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	b2db      	uxtb	r3, r3
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d11a      	bne.n	8000d5e <HAL_TIM_IC_CaptureCallback+0x5a>
        g_icStart = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_3);
 8000d28:	2108      	movs	r1, #8
 8000d2a:	4829      	ldr	r0, [pc, #164]	@ (8000dd0 <HAL_TIM_IC_CaptureCallback+0xcc>)
 8000d2c:	f003 fa6e 	bl	800420c <HAL_TIM_ReadCapturedValue>
 8000d30:	4603      	mov	r3, r0
 8000d32:	4a28      	ldr	r2, [pc, #160]	@ (8000dd4 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8000d34:	6013      	str	r3, [r2, #0]
        __HAL_TIM_SET_CAPTUREPOLARITY(&htim2, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000d36:	4b26      	ldr	r3, [pc, #152]	@ (8000dd0 <HAL_TIM_IC_CaptureCallback+0xcc>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	6a1a      	ldr	r2, [r3, #32]
 8000d3c:	4b24      	ldr	r3, [pc, #144]	@ (8000dd0 <HAL_TIM_IC_CaptureCallback+0xcc>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	f422 6220 	bic.w	r2, r2, #2560	@ 0xa00
 8000d44:	621a      	str	r2, [r3, #32]
 8000d46:	4b22      	ldr	r3, [pc, #136]	@ (8000dd0 <HAL_TIM_IC_CaptureCallback+0xcc>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	6a1a      	ldr	r2, [r3, #32]
 8000d4c:	4b20      	ldr	r3, [pc, #128]	@ (8000dd0 <HAL_TIM_IC_CaptureCallback+0xcc>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000d54:	621a      	str	r2, [r3, #32]
        g_capState = 1;
 8000d56:	4b1d      	ldr	r3, [pc, #116]	@ (8000dcc <HAL_TIM_IC_CaptureCallback+0xc8>)
 8000d58:	2201      	movs	r2, #1
 8000d5a:	701a      	strb	r2, [r3, #0]
        BaseType_t hp = pdFALSE;
        vTaskNotifyGiveFromISR(SensorTaskHandle, &hp);
        portYIELD_FROM_ISR(hp);
    }
  }
}
 8000d5c:	e032      	b.n	8000dc4 <HAL_TIM_IC_CaptureCallback+0xc0>
        uint32_t icEnd = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_3);
 8000d5e:	2108      	movs	r1, #8
 8000d60:	481b      	ldr	r0, [pc, #108]	@ (8000dd0 <HAL_TIM_IC_CaptureCallback+0xcc>)
 8000d62:	f003 fa53 	bl	800420c <HAL_TIM_ReadCapturedValue>
 8000d66:	6178      	str	r0, [r7, #20]
        uint32_t dur = icEnd-g_icStart;
 8000d68:	4b1a      	ldr	r3, [pc, #104]	@ (8000dd4 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	697a      	ldr	r2, [r7, #20]
 8000d6e:	1ad3      	subs	r3, r2, r3
 8000d70:	613b      	str	r3, [r7, #16]
        g_echoUs = dur;
 8000d72:	4a19      	ldr	r2, [pc, #100]	@ (8000dd8 <HAL_TIM_IC_CaptureCallback+0xd4>)
 8000d74:	693b      	ldr	r3, [r7, #16]
 8000d76:	6013      	str	r3, [r2, #0]
        __HAL_TIM_SET_CAPTUREPOLARITY(&htim2, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_RISING);
 8000d78:	4b15      	ldr	r3, [pc, #84]	@ (8000dd0 <HAL_TIM_IC_CaptureCallback+0xcc>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	6a1a      	ldr	r2, [r3, #32]
 8000d7e:	4b14      	ldr	r3, [pc, #80]	@ (8000dd0 <HAL_TIM_IC_CaptureCallback+0xcc>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f422 6220 	bic.w	r2, r2, #2560	@ 0xa00
 8000d86:	621a      	str	r2, [r3, #32]
 8000d88:	4b11      	ldr	r3, [pc, #68]	@ (8000dd0 <HAL_TIM_IC_CaptureCallback+0xcc>)
 8000d8a:	681a      	ldr	r2, [r3, #0]
 8000d8c:	4b10      	ldr	r3, [pc, #64]	@ (8000dd0 <HAL_TIM_IC_CaptureCallback+0xcc>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	6a12      	ldr	r2, [r2, #32]
 8000d92:	621a      	str	r2, [r3, #32]
        g_capState = 0;
 8000d94:	4b0d      	ldr	r3, [pc, #52]	@ (8000dcc <HAL_TIM_IC_CaptureCallback+0xc8>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	701a      	strb	r2, [r3, #0]
        BaseType_t hp = pdFALSE;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	60fb      	str	r3, [r7, #12]
        vTaskNotifyGiveFromISR(SensorTaskHandle, &hp);
 8000d9e:	4b0f      	ldr	r3, [pc, #60]	@ (8000ddc <HAL_TIM_IC_CaptureCallback+0xd8>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f107 020c 	add.w	r2, r7, #12
 8000da6:	4611      	mov	r1, r2
 8000da8:	4618      	mov	r0, r3
 8000daa:	f006 f8c1 	bl	8006f30 <vTaskNotifyGiveFromISR>
        portYIELD_FROM_ISR(hp);
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d007      	beq.n	8000dc4 <HAL_TIM_IC_CaptureCallback+0xc0>
 8000db4:	4b0a      	ldr	r3, [pc, #40]	@ (8000de0 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8000db6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000dba:	601a      	str	r2, [r3, #0]
 8000dbc:	f3bf 8f4f 	dsb	sy
 8000dc0:	f3bf 8f6f 	isb	sy
}
 8000dc4:	bf00      	nop
 8000dc6:	3718      	adds	r7, #24
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	20000130 	.word	0x20000130
 8000dd0:	20000084 	.word	0x20000084
 8000dd4:	20000128 	.word	0x20000128
 8000dd8:	2000012c 	.word	0x2000012c
 8000ddc:	20000118 	.word	0x20000118
 8000de0:	e000ed04 	.word	0xe000ed04

08000de4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN) {
 8000de4:	b590      	push	{r4, r7, lr}
 8000de6:	b08b      	sub	sp, #44	@ 0x2c
 8000de8:	af02      	add	r7, sp, #8
 8000dea:	4603      	mov	r3, r0
 8000dec:	80fb      	strh	r3, [r7, #6]
    if (GPIO_PIN == GPIO_PIN_0) {
 8000dee:	88fb      	ldrh	r3, [r7, #6]
 8000df0:	2b01      	cmp	r3, #1
 8000df2:	d16a      	bne.n	8000eca <HAL_GPIO_EXTI_Callback+0xe6>
        static uint32_t last = 0;
        uint32_t nowMs = HAL_GetTick();
 8000df4:	f000 fc5a 	bl	80016ac <HAL_GetTick>
 8000df8:	61f8      	str	r0, [r7, #28]
        if ((nowMs - last) < 150) return;
 8000dfa:	4b35      	ldr	r3, [pc, #212]	@ (8000ed0 <HAL_GPIO_EXTI_Callback+0xec>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	69fa      	ldr	r2, [r7, #28]
 8000e00:	1ad3      	subs	r3, r2, r3
 8000e02:	2b95      	cmp	r3, #149	@ 0x95
 8000e04:	d95e      	bls.n	8000ec4 <HAL_GPIO_EXTI_Callback+0xe0>
        last = nowMs;
 8000e06:	4a32      	ldr	r2, [pc, #200]	@ (8000ed0 <HAL_GPIO_EXTI_Callback+0xec>)
 8000e08:	69fb      	ldr	r3, [r7, #28]
 8000e0a:	6013      	str	r3, [r2, #0]

        EventBits_t bitsNow = xEventGroupGetBitsFromISR(gEg);
 8000e0c:	4b31      	ldr	r3, [pc, #196]	@ (8000ed4 <HAL_GPIO_EXTI_Callback+0xf0>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4618      	mov	r0, r3
 8000e12:	f004 f9a0 	bl	8005156 <xEventGroupGetBitsFromISR>
 8000e16:	61b8      	str	r0, [r7, #24]
        if (bitsNow & EG_BIT_DARK) {
 8000e18:	69bb      	ldr	r3, [r7, #24]
 8000e1a:	f003 0308 	and.w	r3, r3, #8
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d152      	bne.n	8000ec8 <HAL_GPIO_EXTI_Callback+0xe4>
            return;
        }

        BaseType_t hp = pdFALSE;
 8000e22:	2300      	movs	r3, #0
 8000e24:	60fb      	str	r3, [r7, #12]

        TickType_t nowTicks = xTaskGetTickCountFromISR();
 8000e26:	f005 fbb7 	bl	8006598 <xTaskGetTickCountFromISR>
 8000e2a:	6178      	str	r0, [r7, #20]
        TickType_t newDeadline = nowTicks + pdMS_TO_TICKS(5000);
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	f503 539c 	add.w	r3, r3, #4992	@ 0x1380
 8000e32:	3308      	adds	r3, #8
 8000e34:	613b      	str	r3, [r7, #16]
        if ((int32_t)(newDeadline - g_servoDeadlineTicks) > 0) {
 8000e36:	4b28      	ldr	r3, [pc, #160]	@ (8000ed8 <HAL_GPIO_EXTI_Callback+0xf4>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	693a      	ldr	r2, [r7, #16]
 8000e3c:	1ad3      	subs	r3, r2, r3
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	dd02      	ble.n	8000e48 <HAL_GPIO_EXTI_Callback+0x64>
            g_servoDeadlineTicks = newDeadline;
 8000e42:	4a25      	ldr	r2, [pc, #148]	@ (8000ed8 <HAL_GPIO_EXTI_Callback+0xf4>)
 8000e44:	693b      	ldr	r3, [r7, #16]
 8000e46:	6013      	str	r3, [r2, #0]
        }

        xEventGroupSetBitsFromISR(gEg, EG_BIT_MUTE_LED, &hp);
 8000e48:	4b22      	ldr	r3, [pc, #136]	@ (8000ed4 <HAL_GPIO_EXTI_Callback+0xf0>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f107 020c 	add.w	r2, r7, #12
 8000e50:	2101      	movs	r1, #1
 8000e52:	4618      	mov	r0, r3
 8000e54:	f004 fa5e 	bl	8005314 <xEventGroupSetBitsFromISR>
        xTimerResetFromISR(MuteLedTimer, &hp);
 8000e58:	4b20      	ldr	r3, [pc, #128]	@ (8000edc <HAL_GPIO_EXTI_Callback+0xf8>)
 8000e5a:	681c      	ldr	r4, [r3, #0]
 8000e5c:	f005 fb9c 	bl	8006598 <xTaskGetTickCountFromISR>
 8000e60:	4602      	mov	r2, r0
 8000e62:	f107 030c 	add.w	r3, r7, #12
 8000e66:	2100      	movs	r1, #0
 8000e68:	9100      	str	r1, [sp, #0]
 8000e6a:	2107      	movs	r1, #7
 8000e6c:	4620      	mov	r0, r4
 8000e6e:	f006 f9ef 	bl	8007250 <xTimerGenericCommand>

        xEventGroupSetBitsFromISR(gEg, EG_BIT_MUTE_BUZ, &hp);
 8000e72:	4b18      	ldr	r3, [pc, #96]	@ (8000ed4 <HAL_GPIO_EXTI_Callback+0xf0>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f107 020c 	add.w	r2, r7, #12
 8000e7a:	2102      	movs	r1, #2
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f004 fa49 	bl	8005314 <xEventGroupSetBitsFromISR>
        xTimerResetFromISR(MuteBuzTimer, &hp);
 8000e82:	4b17      	ldr	r3, [pc, #92]	@ (8000ee0 <HAL_GPIO_EXTI_Callback+0xfc>)
 8000e84:	681c      	ldr	r4, [r3, #0]
 8000e86:	f005 fb87 	bl	8006598 <xTaskGetTickCountFromISR>
 8000e8a:	4602      	mov	r2, r0
 8000e8c:	f107 030c 	add.w	r3, r7, #12
 8000e90:	2100      	movs	r1, #0
 8000e92:	9100      	str	r1, [sp, #0]
 8000e94:	2107      	movs	r1, #7
 8000e96:	4620      	mov	r0, r4
 8000e98:	f006 f9da 	bl	8007250 <xTimerGenericCommand>

        xEventGroupSetBitsFromISR(gEg, EG_BIT_SERVO, &hp);
 8000e9c:	4b0d      	ldr	r3, [pc, #52]	@ (8000ed4 <HAL_GPIO_EXTI_Callback+0xf0>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f107 020c 	add.w	r2, r7, #12
 8000ea4:	2104      	movs	r1, #4
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f004 fa34 	bl	8005314 <xEventGroupSetBitsFromISR>

        portYIELD_FROM_ISR(hp);
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d00b      	beq.n	8000eca <HAL_GPIO_EXTI_Callback+0xe6>
 8000eb2:	4b0c      	ldr	r3, [pc, #48]	@ (8000ee4 <HAL_GPIO_EXTI_Callback+0x100>)
 8000eb4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000eb8:	601a      	str	r2, [r3, #0]
 8000eba:	f3bf 8f4f 	dsb	sy
 8000ebe:	f3bf 8f6f 	isb	sy
 8000ec2:	e002      	b.n	8000eca <HAL_GPIO_EXTI_Callback+0xe6>
        if ((nowMs - last) < 150) return;
 8000ec4:	bf00      	nop
 8000ec6:	e000      	b.n	8000eca <HAL_GPIO_EXTI_Callback+0xe6>
            return;
 8000ec8:	bf00      	nop
    }
}
 8000eca:	3724      	adds	r7, #36	@ 0x24
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd90      	pop	{r4, r7, pc}
 8000ed0:	20000148 	.word	0x20000148
 8000ed4:	20000138 	.word	0x20000138
 8000ed8:	20000134 	.word	0x20000134
 8000edc:	2000013c 	.word	0x2000013c
 8000ee0:	20000140 	.word	0x20000140
 8000ee4:	e000ed04 	.word	0xe000ed04

08000ee8 <StartTask01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask01 */
void StartTask01(void *argument)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b086      	sub	sp, #24
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint8_t buzzer = 0;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	75fb      	strb	r3, [r7, #23]
  /* Infinite loop */
  for(;;)
  {
	    EventBits_t bits = xEventGroupGetBits(gEg);
 8000ef4:	4b24      	ldr	r3, [pc, #144]	@ (8000f88 <StartTask01+0xa0>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	2100      	movs	r1, #0
 8000efa:	4618      	mov	r0, r3
 8000efc:	f004 f8f2 	bl	80050e4 <xEventGroupClearBits>
 8000f00:	6138      	str	r0, [r7, #16]
	    if (bits & EG_BIT_MUTE_BUZ) {
 8000f02:	693b      	ldr	r3, [r7, #16]
 8000f04:	f003 0302 	and.w	r3, r3, #2
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d008      	beq.n	8000f1e <StartTask01+0x36>
	        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	2140      	movs	r1, #64	@ 0x40
 8000f10:	481e      	ldr	r0, [pc, #120]	@ (8000f8c <StartTask01+0xa4>)
 8000f12:	f000 fea9 	bl	8001c68 <HAL_GPIO_WritePin>
	        vTaskDelay(pdMS_TO_TICKS(50));
 8000f16:	2032      	movs	r0, #50	@ 0x32
 8000f18:	f005 f9e4 	bl	80062e4 <vTaskDelay>
	        continue;
 8000f1c:	e033      	b.n	8000f86 <StartTask01+0x9e>
	    }
	  float d = g_distance_cm;
 8000f1e:	4b1c      	ldr	r3, [pc, #112]	@ (8000f90 <StartTask01+0xa8>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	60fb      	str	r3, [r7, #12]
	  if(!buzzer&&d<5.0f) {
 8000f24:	7dfb      	ldrb	r3, [r7, #23]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d10b      	bne.n	8000f42 <StartTask01+0x5a>
 8000f2a:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f2e:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8000f32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f3a:	d502      	bpl.n	8000f42 <StartTask01+0x5a>
		  buzzer=1;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	75fb      	strb	r3, [r7, #23]
 8000f40:	e00d      	b.n	8000f5e <StartTask01+0x76>
	  } else if(buzzer&&d>6.0f) {
 8000f42:	7dfb      	ldrb	r3, [r7, #23]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d00a      	beq.n	8000f5e <StartTask01+0x76>
 8000f48:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f4c:	eeb1 7a08 	vmov.f32	s14, #24	@ 0x40c00000  6.0
 8000f50:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f58:	dd01      	ble.n	8000f5e <StartTask01+0x76>
		  buzzer=0;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	75fb      	strb	r3, [r7, #23]
	  }
	  if(buzzer) {
 8000f5e:	7dfb      	ldrb	r3, [r7, #23]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d008      	beq.n	8000f76 <StartTask01+0x8e>
	      HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_6);
 8000f64:	2140      	movs	r1, #64	@ 0x40
 8000f66:	4809      	ldr	r0, [pc, #36]	@ (8000f8c <StartTask01+0xa4>)
 8000f68:	f000 fe97 	bl	8001c9a <HAL_GPIO_TogglePin>
	      vTaskDelay(pdMS_TO_TICKS(300));
 8000f6c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000f70:	f005 f9b8 	bl	80062e4 <vTaskDelay>
 8000f74:	e7be      	b.n	8000ef4 <StartTask01+0xc>
	  } else {
	      HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_SET);
 8000f76:	2201      	movs	r2, #1
 8000f78:	2140      	movs	r1, #64	@ 0x40
 8000f7a:	4804      	ldr	r0, [pc, #16]	@ (8000f8c <StartTask01+0xa4>)
 8000f7c:	f000 fe74 	bl	8001c68 <HAL_GPIO_WritePin>
	      vTaskDelay(pdMS_TO_TICKS(100));
 8000f80:	2064      	movs	r0, #100	@ 0x64
 8000f82:	f005 f9af 	bl	80062e4 <vTaskDelay>
  {
 8000f86:	e7b5      	b.n	8000ef4 <StartTask01+0xc>
 8000f88:	20000138 	.word	0x20000138
 8000f8c:	40020000 	.word	0x40020000
 8000f90:	20000000 	.word	0x20000000

08000f94 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b086      	sub	sp, #24
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
	  const TickType_t period = pdMS_TO_TICKS(60);
 8000f9c:	233c      	movs	r3, #60	@ 0x3c
 8000f9e:	617b      	str	r3, [r7, #20]
	  TickType_t last = xTaskGetTickCount();
 8000fa0:	f005 faea 	bl	8006578 <xTaskGetTickCount>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	60bb      	str	r3, [r7, #8]
	  for(;;)
	  {
	    trig_pulse_10us();
 8000fa8:	f7ff fb66 	bl	8000678 <trig_pulse_10us>
	    if (ulTaskNotifyTake(pdTRUE, pdMS_TO_TICKS(40)) == 1) {
 8000fac:	2128      	movs	r1, #40	@ 0x28
 8000fae:	2001      	movs	r0, #1
 8000fb0:	f005 ff76 	bl	8006ea0 <ulTaskNotifyTake>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d122      	bne.n	8001000 <StartTask02+0x6c>
	      uint32_t us = g_echoUs;
 8000fba:	4b15      	ldr	r3, [pc, #84]	@ (8001010 <StartTask02+0x7c>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	613b      	str	r3, [r7, #16]
	      float d = (float)us / 58.0f;
 8000fc0:	693b      	ldr	r3, [r7, #16]
 8000fc2:	ee07 3a90 	vmov	s15, r3
 8000fc6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000fca:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8001014 <StartTask02+0x80>
 8000fce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fd2:	edc7 7a03 	vstr	s15, [r7, #12]

	      if (d >= 2.0f && d <= 400.0f) {
 8000fd6:	edd7 7a03 	vldr	s15, [r7, #12]
 8000fda:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8000fde:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fe6:	db0b      	blt.n	8001000 <StartTask02+0x6c>
 8000fe8:	edd7 7a03 	vldr	s15, [r7, #12]
 8000fec:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8001018 <StartTask02+0x84>
 8000ff0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ff8:	d802      	bhi.n	8001000 <StartTask02+0x6c>
	        g_distance_cm = d;
 8000ffa:	4a08      	ldr	r2, [pc, #32]	@ (800101c <StartTask02+0x88>)
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	6013      	str	r3, [r2, #0]
	      }
	    }
	    vTaskDelayUntil(&last, period);
 8001000:	f107 0308 	add.w	r3, r7, #8
 8001004:	6979      	ldr	r1, [r7, #20]
 8001006:	4618      	mov	r0, r3
 8001008:	f005 f8ec 	bl	80061e4 <vTaskDelayUntil>
	    trig_pulse_10us();
 800100c:	e7cc      	b.n	8000fa8 <StartTask02+0x14>
 800100e:	bf00      	nop
 8001010:	2000012c 	.word	0x2000012c
 8001014:	42680000 	.word	0x42680000
 8001018:	43c80000 	.word	0x43c80000
 800101c:	20000000 	.word	0x20000000

08001020 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8001020:	b590      	push	{r4, r7, lr}
 8001022:	b085      	sub	sp, #20
 8001024:	af02      	add	r7, sp, #8
 8001026:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
	  for(;;)
	  {
	    xEventGroupWaitBits(gEg, EG_BIT_SERVO, pdTRUE, pdFALSE, portMAX_DELAY);
 8001028:	4b1f      	ldr	r3, [pc, #124]	@ (80010a8 <StartTask03+0x88>)
 800102a:	6818      	ldr	r0, [r3, #0]
 800102c:	f04f 33ff 	mov.w	r3, #4294967295
 8001030:	9300      	str	r3, [sp, #0]
 8001032:	2300      	movs	r3, #0
 8001034:	2201      	movs	r2, #1
 8001036:	2104      	movs	r1, #4
 8001038:	f003 ff82 	bl	8004f40 <xEventGroupWaitBits>

	    if (xEventGroupGetBits(gEg) & EG_BIT_DARK) {
 800103c:	4b1a      	ldr	r3, [pc, #104]	@ (80010a8 <StartTask03+0x88>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	2100      	movs	r1, #0
 8001042:	4618      	mov	r0, r3
 8001044:	f004 f84e 	bl	80050e4 <xEventGroupClearBits>
 8001048:	4603      	mov	r3, r0
 800104a:	f003 0308 	and.w	r3, r3, #8
 800104e:	2b00      	cmp	r3, #0
 8001050:	d005      	beq.n	800105e <StartTask03+0x3e>
	        __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 2000);
 8001052:	4b16      	ldr	r3, [pc, #88]	@ (80010ac <StartTask03+0x8c>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800105a:	639a      	str	r2, [r3, #56]	@ 0x38
	        continue;
 800105c:	e022      	b.n	80010a4 <StartTask03+0x84>
	    }

	    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 1000);
 800105e:	4b13      	ldr	r3, [pc, #76]	@ (80010ac <StartTask03+0x8c>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001066:	639a      	str	r2, [r3, #56]	@ 0x38

	    while ((int32_t)(g_servoDeadlineTicks - xTaskGetTickCount()) > 0) {
 8001068:	e00d      	b.n	8001086 <StartTask03+0x66>
	        if (xEventGroupGetBits(gEg) & EG_BIT_DARK) {
 800106a:	4b0f      	ldr	r3, [pc, #60]	@ (80010a8 <StartTask03+0x88>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	2100      	movs	r1, #0
 8001070:	4618      	mov	r0, r3
 8001072:	f004 f837 	bl	80050e4 <xEventGroupClearBits>
 8001076:	4603      	mov	r3, r0
 8001078:	f003 0308 	and.w	r3, r3, #8
 800107c:	2b00      	cmp	r3, #0
 800107e:	d10b      	bne.n	8001098 <StartTask03+0x78>
	            break;
	        }
	        vTaskDelay(pdMS_TO_TICKS(10));
 8001080:	200a      	movs	r0, #10
 8001082:	f005 f92f 	bl	80062e4 <vTaskDelay>
	    while ((int32_t)(g_servoDeadlineTicks - xTaskGetTickCount()) > 0) {
 8001086:	4b0a      	ldr	r3, [pc, #40]	@ (80010b0 <StartTask03+0x90>)
 8001088:	681c      	ldr	r4, [r3, #0]
 800108a:	f005 fa75 	bl	8006578 <xTaskGetTickCount>
 800108e:	4603      	mov	r3, r0
 8001090:	1ae3      	subs	r3, r4, r3
 8001092:	2b00      	cmp	r3, #0
 8001094:	dce9      	bgt.n	800106a <StartTask03+0x4a>
 8001096:	e000      	b.n	800109a <StartTask03+0x7a>
	            break;
 8001098:	bf00      	nop
	    }

	    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 2000);
 800109a:	4b04      	ldr	r3, [pc, #16]	@ (80010ac <StartTask03+0x8c>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80010a2:	639a      	str	r2, [r3, #56]	@ 0x38
	    xEventGroupWaitBits(gEg, EG_BIT_SERVO, pdTRUE, pdFALSE, portMAX_DELAY);
 80010a4:	e7c0      	b.n	8001028 <StartTask03+0x8>
 80010a6:	bf00      	nop
 80010a8:	20000138 	.word	0x20000138
 80010ac:	200000cc 	.word	0x200000cc
 80010b0:	20000134 	.word	0x20000134

080010b4 <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void *argument)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
  /* Infinite loop */
	uint8_t nearState = 0;
 80010bc:	2300      	movs	r3, #0
 80010be:	73fb      	strb	r3, [r7, #15]
	LED_ALL_OFF();
 80010c0:	f7ff faf6 	bl	80006b0 <LED_ALL_OFF>
  for(;;)
  {
	    if (xEventGroupGetBits(gEg) & EG_BIT_MUTE_LED) {
 80010c4:	4b20      	ldr	r3, [pc, #128]	@ (8001148 <StartTask04+0x94>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	2100      	movs	r1, #0
 80010ca:	4618      	mov	r0, r3
 80010cc:	f004 f80a 	bl	80050e4 <xEventGroupClearBits>
 80010d0:	4603      	mov	r3, r0
 80010d2:	f003 0301 	and.w	r3, r3, #1
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d005      	beq.n	80010e6 <StartTask04+0x32>
	        LED_ALL_OFF();
 80010da:	f7ff fae9 	bl	80006b0 <LED_ALL_OFF>
	        vTaskDelay(pdMS_TO_TICKS(50));
 80010de:	2032      	movs	r0, #50	@ 0x32
 80010e0:	f005 f900 	bl	80062e4 <vTaskDelay>
	        continue;
 80010e4:	e02e      	b.n	8001144 <StartTask04+0x90>
	    }

	  float d = g_distance_cm;
 80010e6:	4b19      	ldr	r3, [pc, #100]	@ (800114c <StartTask04+0x98>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	60bb      	str	r3, [r7, #8]
	  if(!nearState&&d<5.0f) {
 80010ec:	7bfb      	ldrb	r3, [r7, #15]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d10b      	bne.n	800110a <StartTask04+0x56>
 80010f2:	edd7 7a02 	vldr	s15, [r7, #8]
 80010f6:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 80010fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001102:	d502      	bpl.n	800110a <StartTask04+0x56>
		  nearState=1;
 8001104:	2301      	movs	r3, #1
 8001106:	73fb      	strb	r3, [r7, #15]
 8001108:	e00d      	b.n	8001126 <StartTask04+0x72>
	  } else if(nearState&&d>6.0f) {
 800110a:	7bfb      	ldrb	r3, [r7, #15]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d00a      	beq.n	8001126 <StartTask04+0x72>
 8001110:	edd7 7a02 	vldr	s15, [r7, #8]
 8001114:	eeb1 7a08 	vmov.f32	s14, #24	@ 0x40c00000  6.0
 8001118:	eef4 7ac7 	vcmpe.f32	s15, s14
 800111c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001120:	dd01      	ble.n	8001126 <StartTask04+0x72>
		  nearState=0;
 8001122:	2300      	movs	r3, #0
 8001124:	73fb      	strb	r3, [r7, #15]
	  }
	  if(nearState) {
 8001126:	7bfb      	ldrb	r3, [r7, #15]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d006      	beq.n	800113a <StartTask04+0x86>
	      LED_ALL_TOGGLE();
 800112c:	f7ff facc 	bl	80006c8 <LED_ALL_TOGGLE>
	      vTaskDelay(pdMS_TO_TICKS(300));
 8001130:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001134:	f005 f8d6 	bl	80062e4 <vTaskDelay>
 8001138:	e7c4      	b.n	80010c4 <StartTask04+0x10>
	  } else {
	      LED_ALL_OFF();
 800113a:	f7ff fab9 	bl	80006b0 <LED_ALL_OFF>
	      vTaskDelay(pdMS_TO_TICKS(100));
 800113e:	2064      	movs	r0, #100	@ 0x64
 8001140:	f005 f8d0 	bl	80062e4 <vTaskDelay>
  {
 8001144:	e7be      	b.n	80010c4 <StartTask04+0x10>
 8001146:	bf00      	nop
 8001148:	20000138 	.word	0x20000138
 800114c:	20000000 	.word	0x20000000

08001150 <StartTask05>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask05 */
void StartTask05(void *argument)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b08a      	sub	sp, #40	@ 0x28
 8001154:	af02      	add	r7, sp, #8
 8001156:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask05 */
  /* Infinite loop */
    BH1750_Handle_t bh = {
 8001158:	4a42      	ldr	r2, [pc, #264]	@ (8001264 <StartTask05+0x114>)
 800115a:	f107 0310 	add.w	r3, r7, #16
 800115e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001162:	e883 0003 	stmia.w	r3, {r0, r1}
        .i2c  = &hi2c3,
        .addr = (0x23u << 1)
    };

    // Init BH1750 cho tới khi thành công
    while (BH1750_Init(&bh) != HAL_OK) {
 8001166:	e003      	b.n	8001170 <StartTask05+0x20>
        vTaskDelay(pdMS_TO_TICKS(500));
 8001168:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800116c:	f005 f8ba 	bl	80062e4 <vTaskDelay>
    while (BH1750_Init(&bh) != HAL_OK) {
 8001170:	f107 0310 	add.w	r3, r7, #16
 8001174:	4618      	mov	r0, r3
 8001176:	f7ff f9d8 	bl	800052a <BH1750_Init>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d1f3      	bne.n	8001168 <StartTask05+0x18>
    }

    uint8_t isDark = 0;
 8001180:	2300      	movs	r3, #0
 8001182:	77fb      	strb	r3, [r7, #31]
    const TickType_t period = pdMS_TO_TICKS(500);
 8001184:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001188:	61bb      	str	r3, [r7, #24]

    for (;;) {
        float lux = 0.0f;
 800118a:	f04f 0300 	mov.w	r3, #0
 800118e:	60fb      	str	r3, [r7, #12]
        if (BH1750_ReadLux(&bh, &lux, 50) == HAL_OK) {
 8001190:	f107 010c 	add.w	r1, r7, #12
 8001194:	f107 0310 	add.w	r3, r7, #16
 8001198:	2232      	movs	r2, #50	@ 0x32
 800119a:	4618      	mov	r0, r3
 800119c:	f7ff f9f6 	bl	800058c <BH1750_ReadLux>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d154      	bne.n	8001250 <StartTask05+0x100>
            g_lux = lux;
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	4a2f      	ldr	r2, [pc, #188]	@ (8001268 <StartTask05+0x118>)
 80011aa:	6013      	str	r3, [r2, #0]

            if (!isDark && lux < LUX_DARK_THRESHOLD) {
 80011ac:	7ffb      	ldrb	r3, [r7, #31]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d133      	bne.n	800121a <StartTask05+0xca>
 80011b2:	edd7 7a03 	vldr	s15, [r7, #12]
 80011b6:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 80011ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011c2:	d52a      	bpl.n	800121a <StartTask05+0xca>
                isDark = 1;
 80011c4:	2301      	movs	r3, #1
 80011c6:	77fb      	strb	r3, [r7, #31]
                xEventGroupSetBits(gEg, EG_BIT_DARK);
 80011c8:	4b28      	ldr	r3, [pc, #160]	@ (800126c <StartTask05+0x11c>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	2108      	movs	r1, #8
 80011ce:	4618      	mov	r0, r3
 80011d0:	f003 ffe5 	bl	800519e <xEventGroupSetBits>

                __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 2000);
 80011d4:	4b26      	ldr	r3, [pc, #152]	@ (8001270 <StartTask05+0x120>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80011dc:	639a      	str	r2, [r3, #56]	@ 0x38
                g_servoDeadlineTicks = xTaskGetTickCount();
 80011de:	f005 f9cb 	bl	8006578 <xTaskGetTickCount>
 80011e2:	4603      	mov	r3, r0
 80011e4:	4a23      	ldr	r2, [pc, #140]	@ (8001274 <StartTask05+0x124>)
 80011e6:	6013      	str	r3, [r2, #0]

                xEventGroupSetBits(gEg, EG_BIT_MUTE_LED | EG_BIT_MUTE_BUZ);
 80011e8:	4b20      	ldr	r3, [pc, #128]	@ (800126c <StartTask05+0x11c>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	2103      	movs	r1, #3
 80011ee:	4618      	mov	r0, r3
 80011f0:	f003 ffd5 	bl	800519e <xEventGroupSetBits>
                xTimerStop(MuteLedTimer, 0);
 80011f4:	4b20      	ldr	r3, [pc, #128]	@ (8001278 <StartTask05+0x128>)
 80011f6:	6818      	ldr	r0, [r3, #0]
 80011f8:	2300      	movs	r3, #0
 80011fa:	9300      	str	r3, [sp, #0]
 80011fc:	2300      	movs	r3, #0
 80011fe:	2200      	movs	r2, #0
 8001200:	2103      	movs	r1, #3
 8001202:	f006 f825 	bl	8007250 <xTimerGenericCommand>
                xTimerStop(MuteBuzTimer, 0);
 8001206:	4b1d      	ldr	r3, [pc, #116]	@ (800127c <StartTask05+0x12c>)
 8001208:	6818      	ldr	r0, [r3, #0]
 800120a:	2300      	movs	r3, #0
 800120c:	9300      	str	r3, [sp, #0]
 800120e:	2300      	movs	r3, #0
 8001210:	2200      	movs	r2, #0
 8001212:	2103      	movs	r1, #3
 8001214:	f006 f81c 	bl	8007250 <xTimerGenericCommand>
 8001218:	e01f      	b.n	800125a <StartTask05+0x10a>

            } else if (isDark && lux > (LUX_DARK_THRESHOLD + LUX_HYSTERESIS)) {
 800121a:	7ffb      	ldrb	r3, [r7, #31]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d01c      	beq.n	800125a <StartTask05+0x10a>
 8001220:	edd7 7a03 	vldr	s15, [r7, #12]
 8001224:	eeb3 7a01 	vmov.f32	s14, #49	@ 0x41880000  17.0
 8001228:	eef4 7ac7 	vcmpe.f32	s15, s14
 800122c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001230:	dd13      	ble.n	800125a <StartTask05+0x10a>
                isDark = 0;
 8001232:	2300      	movs	r3, #0
 8001234:	77fb      	strb	r3, [r7, #31]
                xEventGroupClearBits(gEg, EG_BIT_DARK);
 8001236:	4b0d      	ldr	r3, [pc, #52]	@ (800126c <StartTask05+0x11c>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	2108      	movs	r1, #8
 800123c:	4618      	mov	r0, r3
 800123e:	f003 ff51 	bl	80050e4 <xEventGroupClearBits>
                xEventGroupClearBits(gEg, EG_BIT_MUTE_LED | EG_BIT_MUTE_BUZ);
 8001242:	4b0a      	ldr	r3, [pc, #40]	@ (800126c <StartTask05+0x11c>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	2103      	movs	r1, #3
 8001248:	4618      	mov	r0, r3
 800124a:	f003 ff4b 	bl	80050e4 <xEventGroupClearBits>
 800124e:	e004      	b.n	800125a <StartTask05+0x10a>
            }
        } else {
            (void)BH1750_Init(&bh);
 8001250:	f107 0310 	add.w	r3, r7, #16
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff f968 	bl	800052a <BH1750_Init>
        }

        vTaskDelay(period);
 800125a:	69b8      	ldr	r0, [r7, #24]
 800125c:	f005 f842 	bl	80062e4 <vTaskDelay>
    for (;;) {
 8001260:	e793      	b.n	800118a <StartTask05+0x3a>
 8001262:	bf00      	nop
 8001264:	08008210 	.word	0x08008210
 8001268:	20000144 	.word	0x20000144
 800126c:	20000138 	.word	0x20000138
 8001270:	200000cc 	.word	0x200000cc
 8001274:	20000134 	.word	0x20000134
 8001278:	2000013c 	.word	0x2000013c
 800127c:	20000140 	.word	0x20000140

08001280 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001284:	b672      	cpsid	i
}
 8001286:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001288:	bf00      	nop
 800128a:	e7fd      	b.n	8001288 <Error_Handler+0x8>

0800128c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001292:	2300      	movs	r3, #0
 8001294:	607b      	str	r3, [r7, #4]
 8001296:	4b12      	ldr	r3, [pc, #72]	@ (80012e0 <HAL_MspInit+0x54>)
 8001298:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800129a:	4a11      	ldr	r2, [pc, #68]	@ (80012e0 <HAL_MspInit+0x54>)
 800129c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80012a2:	4b0f      	ldr	r3, [pc, #60]	@ (80012e0 <HAL_MspInit+0x54>)
 80012a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012aa:	607b      	str	r3, [r7, #4]
 80012ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	603b      	str	r3, [r7, #0]
 80012b2:	4b0b      	ldr	r3, [pc, #44]	@ (80012e0 <HAL_MspInit+0x54>)
 80012b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012b6:	4a0a      	ldr	r2, [pc, #40]	@ (80012e0 <HAL_MspInit+0x54>)
 80012b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80012be:	4b08      	ldr	r3, [pc, #32]	@ (80012e0 <HAL_MspInit+0x54>)
 80012c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012c6:	603b      	str	r3, [r7, #0]
 80012c8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80012ca:	2200      	movs	r2, #0
 80012cc:	210f      	movs	r1, #15
 80012ce:	f06f 0001 	mvn.w	r0, #1
 80012d2:	f000 faf6 	bl	80018c2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012d6:	bf00      	nop
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	40023800 	.word	0x40023800

080012e4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b08a      	sub	sp, #40	@ 0x28
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ec:	f107 0314 	add.w	r3, r7, #20
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	605a      	str	r2, [r3, #4]
 80012f6:	609a      	str	r2, [r3, #8]
 80012f8:	60da      	str	r2, [r3, #12]
 80012fa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a29      	ldr	r2, [pc, #164]	@ (80013a8 <HAL_I2C_MspInit+0xc4>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d14b      	bne.n	800139e <HAL_I2C_MspInit+0xba>
  {
    /* USER CODE BEGIN I2C3_MspInit 0 */

    /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001306:	2300      	movs	r3, #0
 8001308:	613b      	str	r3, [r7, #16]
 800130a:	4b28      	ldr	r3, [pc, #160]	@ (80013ac <HAL_I2C_MspInit+0xc8>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130e:	4a27      	ldr	r2, [pc, #156]	@ (80013ac <HAL_I2C_MspInit+0xc8>)
 8001310:	f043 0304 	orr.w	r3, r3, #4
 8001314:	6313      	str	r3, [r2, #48]	@ 0x30
 8001316:	4b25      	ldr	r3, [pc, #148]	@ (80013ac <HAL_I2C_MspInit+0xc8>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800131a:	f003 0304 	and.w	r3, r3, #4
 800131e:	613b      	str	r3, [r7, #16]
 8001320:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001322:	2300      	movs	r3, #0
 8001324:	60fb      	str	r3, [r7, #12]
 8001326:	4b21      	ldr	r3, [pc, #132]	@ (80013ac <HAL_I2C_MspInit+0xc8>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800132a:	4a20      	ldr	r2, [pc, #128]	@ (80013ac <HAL_I2C_MspInit+0xc8>)
 800132c:	f043 0301 	orr.w	r3, r3, #1
 8001330:	6313      	str	r3, [r2, #48]	@ 0x30
 8001332:	4b1e      	ldr	r3, [pc, #120]	@ (80013ac <HAL_I2C_MspInit+0xc8>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001336:	f003 0301 	and.w	r3, r3, #1
 800133a:	60fb      	str	r3, [r7, #12]
 800133c:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800133e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001342:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001344:	2312      	movs	r3, #18
 8001346:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001348:	2300      	movs	r3, #0
 800134a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800134c:	2303      	movs	r3, #3
 800134e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001350:	2304      	movs	r3, #4
 8001352:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001354:	f107 0314 	add.w	r3, r7, #20
 8001358:	4619      	mov	r1, r3
 800135a:	4815      	ldr	r0, [pc, #84]	@ (80013b0 <HAL_I2C_MspInit+0xcc>)
 800135c:	f000 fae8 	bl	8001930 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001360:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001364:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001366:	2312      	movs	r3, #18
 8001368:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136a:	2300      	movs	r3, #0
 800136c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800136e:	2303      	movs	r3, #3
 8001370:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001372:	2304      	movs	r3, #4
 8001374:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001376:	f107 0314 	add.w	r3, r7, #20
 800137a:	4619      	mov	r1, r3
 800137c:	480d      	ldr	r0, [pc, #52]	@ (80013b4 <HAL_I2C_MspInit+0xd0>)
 800137e:	f000 fad7 	bl	8001930 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001382:	2300      	movs	r3, #0
 8001384:	60bb      	str	r3, [r7, #8]
 8001386:	4b09      	ldr	r3, [pc, #36]	@ (80013ac <HAL_I2C_MspInit+0xc8>)
 8001388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800138a:	4a08      	ldr	r2, [pc, #32]	@ (80013ac <HAL_I2C_MspInit+0xc8>)
 800138c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001390:	6413      	str	r3, [r2, #64]	@ 0x40
 8001392:	4b06      	ldr	r3, [pc, #24]	@ (80013ac <HAL_I2C_MspInit+0xc8>)
 8001394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001396:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800139a:	60bb      	str	r3, [r7, #8]
 800139c:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C3_MspInit 1 */

  }

}
 800139e:	bf00      	nop
 80013a0:	3728      	adds	r7, #40	@ 0x28
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	40005c00 	.word	0x40005c00
 80013ac:	40023800 	.word	0x40023800
 80013b0:	40020800 	.word	0x40020800
 80013b4:	40020000 	.word	0x40020000

080013b8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b08a      	sub	sp, #40	@ 0x28
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c0:	f107 0314 	add.w	r3, r7, #20
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	605a      	str	r2, [r3, #4]
 80013ca:	609a      	str	r2, [r3, #8]
 80013cc:	60da      	str	r2, [r3, #12]
 80013ce:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80013d8:	d134      	bne.n	8001444 <HAL_TIM_Base_MspInit+0x8c>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013da:	2300      	movs	r3, #0
 80013dc:	613b      	str	r3, [r7, #16]
 80013de:	4b25      	ldr	r3, [pc, #148]	@ (8001474 <HAL_TIM_Base_MspInit+0xbc>)
 80013e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013e2:	4a24      	ldr	r2, [pc, #144]	@ (8001474 <HAL_TIM_Base_MspInit+0xbc>)
 80013e4:	f043 0301 	orr.w	r3, r3, #1
 80013e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80013ea:	4b22      	ldr	r3, [pc, #136]	@ (8001474 <HAL_TIM_Base_MspInit+0xbc>)
 80013ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ee:	f003 0301 	and.w	r3, r3, #1
 80013f2:	613b      	str	r3, [r7, #16]
 80013f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f6:	2300      	movs	r3, #0
 80013f8:	60fb      	str	r3, [r7, #12]
 80013fa:	4b1e      	ldr	r3, [pc, #120]	@ (8001474 <HAL_TIM_Base_MspInit+0xbc>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013fe:	4a1d      	ldr	r2, [pc, #116]	@ (8001474 <HAL_TIM_Base_MspInit+0xbc>)
 8001400:	f043 0301 	orr.w	r3, r3, #1
 8001404:	6313      	str	r3, [r2, #48]	@ 0x30
 8001406:	4b1b      	ldr	r3, [pc, #108]	@ (8001474 <HAL_TIM_Base_MspInit+0xbc>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800140a:	f003 0301 	and.w	r3, r3, #1
 800140e:	60fb      	str	r3, [r7, #12]
 8001410:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001412:	2304      	movs	r3, #4
 8001414:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001416:	2302      	movs	r3, #2
 8001418:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800141a:	2302      	movs	r3, #2
 800141c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141e:	2300      	movs	r3, #0
 8001420:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001422:	2301      	movs	r3, #1
 8001424:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001426:	f107 0314 	add.w	r3, r7, #20
 800142a:	4619      	mov	r1, r3
 800142c:	4812      	ldr	r0, [pc, #72]	@ (8001478 <HAL_TIM_Base_MspInit+0xc0>)
 800142e:	f000 fa7f 	bl	8001930 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001432:	2200      	movs	r2, #0
 8001434:	2105      	movs	r1, #5
 8001436:	201c      	movs	r0, #28
 8001438:	f000 fa43 	bl	80018c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800143c:	201c      	movs	r0, #28
 800143e:	f000 fa5c 	bl	80018fa <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001442:	e012      	b.n	800146a <HAL_TIM_Base_MspInit+0xb2>
  else if(htim_base->Instance==TIM3)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a0c      	ldr	r2, [pc, #48]	@ (800147c <HAL_TIM_Base_MspInit+0xc4>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d10d      	bne.n	800146a <HAL_TIM_Base_MspInit+0xb2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	60bb      	str	r3, [r7, #8]
 8001452:	4b08      	ldr	r3, [pc, #32]	@ (8001474 <HAL_TIM_Base_MspInit+0xbc>)
 8001454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001456:	4a07      	ldr	r2, [pc, #28]	@ (8001474 <HAL_TIM_Base_MspInit+0xbc>)
 8001458:	f043 0302 	orr.w	r3, r3, #2
 800145c:	6413      	str	r3, [r2, #64]	@ 0x40
 800145e:	4b05      	ldr	r3, [pc, #20]	@ (8001474 <HAL_TIM_Base_MspInit+0xbc>)
 8001460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001462:	f003 0302 	and.w	r3, r3, #2
 8001466:	60bb      	str	r3, [r7, #8]
 8001468:	68bb      	ldr	r3, [r7, #8]
}
 800146a:	bf00      	nop
 800146c:	3728      	adds	r7, #40	@ 0x28
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	40023800 	.word	0x40023800
 8001478:	40020000 	.word	0x40020000
 800147c:	40000400 	.word	0x40000400

08001480 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b088      	sub	sp, #32
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001488:	f107 030c 	add.w	r3, r7, #12
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	605a      	str	r2, [r3, #4]
 8001492:	609a      	str	r2, [r3, #8]
 8001494:	60da      	str	r2, [r3, #12]
 8001496:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a12      	ldr	r2, [pc, #72]	@ (80014e8 <HAL_TIM_MspPostInit+0x68>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d11d      	bne.n	80014de <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a2:	2300      	movs	r3, #0
 80014a4:	60bb      	str	r3, [r7, #8]
 80014a6:	4b11      	ldr	r3, [pc, #68]	@ (80014ec <HAL_TIM_MspPostInit+0x6c>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014aa:	4a10      	ldr	r2, [pc, #64]	@ (80014ec <HAL_TIM_MspPostInit+0x6c>)
 80014ac:	f043 0301 	orr.w	r3, r3, #1
 80014b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014b2:	4b0e      	ldr	r3, [pc, #56]	@ (80014ec <HAL_TIM_MspPostInit+0x6c>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b6:	f003 0301 	and.w	r3, r3, #1
 80014ba:	60bb      	str	r3, [r7, #8]
 80014bc:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80014be:	2380      	movs	r3, #128	@ 0x80
 80014c0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c2:	2302      	movs	r3, #2
 80014c4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c6:	2300      	movs	r3, #0
 80014c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ca:	2300      	movs	r3, #0
 80014cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80014ce:	2302      	movs	r3, #2
 80014d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d2:	f107 030c 	add.w	r3, r7, #12
 80014d6:	4619      	mov	r1, r3
 80014d8:	4805      	ldr	r0, [pc, #20]	@ (80014f0 <HAL_TIM_MspPostInit+0x70>)
 80014da:	f000 fa29 	bl	8001930 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80014de:	bf00      	nop
 80014e0:	3720      	adds	r7, #32
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	40000400 	.word	0x40000400
 80014ec:	40023800 	.word	0x40023800
 80014f0:	40020000 	.word	0x40020000

080014f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014f8:	bf00      	nop
 80014fa:	e7fd      	b.n	80014f8 <NMI_Handler+0x4>

080014fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001500:	bf00      	nop
 8001502:	e7fd      	b.n	8001500 <HardFault_Handler+0x4>

08001504 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001508:	bf00      	nop
 800150a:	e7fd      	b.n	8001508 <MemManage_Handler+0x4>

0800150c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001510:	bf00      	nop
 8001512:	e7fd      	b.n	8001510 <BusFault_Handler+0x4>

08001514 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001518:	bf00      	nop
 800151a:	e7fd      	b.n	8001518 <UsageFault_Handler+0x4>

0800151c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001520:	bf00      	nop
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr

0800152a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800152a:	b580      	push	{r7, lr}
 800152c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800152e:	f000 f8a9 	bl	8001684 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001532:	f005 fc0f 	bl	8006d54 <xTaskGetSchedulerState>
 8001536:	4603      	mov	r3, r0
 8001538:	2b01      	cmp	r3, #1
 800153a:	d001      	beq.n	8001540 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800153c:	f006 fb7c 	bl	8007c38 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001540:	bf00      	nop
 8001542:	bd80      	pop	{r7, pc}

08001544 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001548:	2001      	movs	r0, #1
 800154a:	f000 fbc1 	bl	8001cd0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800154e:	bf00      	nop
 8001550:	bd80      	pop	{r7, pc}
	...

08001554 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001558:	4802      	ldr	r0, [pc, #8]	@ (8001564 <TIM2_IRQHandler+0x10>)
 800155a:	f002 fb41 	bl	8003be0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800155e:	bf00      	nop
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	20000084 	.word	0x20000084

08001568 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800156c:	4b06      	ldr	r3, [pc, #24]	@ (8001588 <SystemInit+0x20>)
 800156e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001572:	4a05      	ldr	r2, [pc, #20]	@ (8001588 <SystemInit+0x20>)
 8001574:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001578:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800157c:	bf00      	nop
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	e000ed00 	.word	0xe000ed00

0800158c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800158c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80015c4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001590:	f7ff ffea 	bl	8001568 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001594:	480c      	ldr	r0, [pc, #48]	@ (80015c8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001596:	490d      	ldr	r1, [pc, #52]	@ (80015cc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001598:	4a0d      	ldr	r2, [pc, #52]	@ (80015d0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800159a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800159c:	e002      	b.n	80015a4 <LoopCopyDataInit>

0800159e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800159e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015a2:	3304      	adds	r3, #4

080015a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015a8:	d3f9      	bcc.n	800159e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015aa:	4a0a      	ldr	r2, [pc, #40]	@ (80015d4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015ac:	4c0a      	ldr	r4, [pc, #40]	@ (80015d8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80015ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015b0:	e001      	b.n	80015b6 <LoopFillZerobss>

080015b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015b4:	3204      	adds	r2, #4

080015b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015b8:	d3fb      	bcc.n	80015b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015ba:	f006 fdc5 	bl	8008148 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015be:	f7ff f8af 	bl	8000720 <main>
  bx  lr    
 80015c2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80015c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80015c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015cc:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80015d0:	0800830c 	.word	0x0800830c
  ldr r2, =_sbss
 80015d4:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80015d8:	20004aa0 	.word	0x20004aa0

080015dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015dc:	e7fe      	b.n	80015dc <ADC_IRQHandler>
	...

080015e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015e4:	4b0e      	ldr	r3, [pc, #56]	@ (8001620 <HAL_Init+0x40>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a0d      	ldr	r2, [pc, #52]	@ (8001620 <HAL_Init+0x40>)
 80015ea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80015ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001620 <HAL_Init+0x40>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a0a      	ldr	r2, [pc, #40]	@ (8001620 <HAL_Init+0x40>)
 80015f6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80015fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015fc:	4b08      	ldr	r3, [pc, #32]	@ (8001620 <HAL_Init+0x40>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a07      	ldr	r2, [pc, #28]	@ (8001620 <HAL_Init+0x40>)
 8001602:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001606:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001608:	2003      	movs	r0, #3
 800160a:	f000 f94f 	bl	80018ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800160e:	200f      	movs	r0, #15
 8001610:	f000 f808 	bl	8001624 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001614:	f7ff fe3a 	bl	800128c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001618:	2300      	movs	r3, #0
}
 800161a:	4618      	mov	r0, r3
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	40023c00 	.word	0x40023c00

08001624 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800162c:	4b12      	ldr	r3, [pc, #72]	@ (8001678 <HAL_InitTick+0x54>)
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	4b12      	ldr	r3, [pc, #72]	@ (800167c <HAL_InitTick+0x58>)
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	4619      	mov	r1, r3
 8001636:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800163a:	fbb3 f3f1 	udiv	r3, r3, r1
 800163e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001642:	4618      	mov	r0, r3
 8001644:	f000 f967 	bl	8001916 <HAL_SYSTICK_Config>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e00e      	b.n	8001670 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2b0f      	cmp	r3, #15
 8001656:	d80a      	bhi.n	800166e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001658:	2200      	movs	r2, #0
 800165a:	6879      	ldr	r1, [r7, #4]
 800165c:	f04f 30ff 	mov.w	r0, #4294967295
 8001660:	f000 f92f 	bl	80018c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001664:	4a06      	ldr	r2, [pc, #24]	@ (8001680 <HAL_InitTick+0x5c>)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800166a:	2300      	movs	r3, #0
 800166c:	e000      	b.n	8001670 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
}
 8001670:	4618      	mov	r0, r3
 8001672:	3708      	adds	r7, #8
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	20000004 	.word	0x20000004
 800167c:	2000000c 	.word	0x2000000c
 8001680:	20000008 	.word	0x20000008

08001684 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001688:	4b06      	ldr	r3, [pc, #24]	@ (80016a4 <HAL_IncTick+0x20>)
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	461a      	mov	r2, r3
 800168e:	4b06      	ldr	r3, [pc, #24]	@ (80016a8 <HAL_IncTick+0x24>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4413      	add	r3, r2
 8001694:	4a04      	ldr	r2, [pc, #16]	@ (80016a8 <HAL_IncTick+0x24>)
 8001696:	6013      	str	r3, [r2, #0]
}
 8001698:	bf00      	nop
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	2000000c 	.word	0x2000000c
 80016a8:	2000014c 	.word	0x2000014c

080016ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  return uwTick;
 80016b0:	4b03      	ldr	r3, [pc, #12]	@ (80016c0 <HAL_GetTick+0x14>)
 80016b2:	681b      	ldr	r3, [r3, #0]
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	2000014c 	.word	0x2000014c

080016c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016cc:	f7ff ffee 	bl	80016ac <HAL_GetTick>
 80016d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016dc:	d005      	beq.n	80016ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016de:	4b0a      	ldr	r3, [pc, #40]	@ (8001708 <HAL_Delay+0x44>)
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	461a      	mov	r2, r3
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	4413      	add	r3, r2
 80016e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80016ea:	bf00      	nop
 80016ec:	f7ff ffde 	bl	80016ac <HAL_GetTick>
 80016f0:	4602      	mov	r2, r0
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	68fa      	ldr	r2, [r7, #12]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d8f7      	bhi.n	80016ec <HAL_Delay+0x28>
  {
  }
}
 80016fc:	bf00      	nop
 80016fe:	bf00      	nop
 8001700:	3710      	adds	r7, #16
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	2000000c 	.word	0x2000000c

0800170c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800170c:	b480      	push	{r7}
 800170e:	b085      	sub	sp, #20
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	f003 0307 	and.w	r3, r3, #7
 800171a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800171c:	4b0c      	ldr	r3, [pc, #48]	@ (8001750 <__NVIC_SetPriorityGrouping+0x44>)
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001722:	68ba      	ldr	r2, [r7, #8]
 8001724:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001728:	4013      	ands	r3, r2
 800172a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001734:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001738:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800173c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800173e:	4a04      	ldr	r2, [pc, #16]	@ (8001750 <__NVIC_SetPriorityGrouping+0x44>)
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	60d3      	str	r3, [r2, #12]
}
 8001744:	bf00      	nop
 8001746:	3714      	adds	r7, #20
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr
 8001750:	e000ed00 	.word	0xe000ed00

08001754 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001758:	4b04      	ldr	r3, [pc, #16]	@ (800176c <__NVIC_GetPriorityGrouping+0x18>)
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	0a1b      	lsrs	r3, r3, #8
 800175e:	f003 0307 	and.w	r3, r3, #7
}
 8001762:	4618      	mov	r0, r3
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr
 800176c:	e000ed00 	.word	0xe000ed00

08001770 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	4603      	mov	r3, r0
 8001778:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800177a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800177e:	2b00      	cmp	r3, #0
 8001780:	db0b      	blt.n	800179a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001782:	79fb      	ldrb	r3, [r7, #7]
 8001784:	f003 021f 	and.w	r2, r3, #31
 8001788:	4907      	ldr	r1, [pc, #28]	@ (80017a8 <__NVIC_EnableIRQ+0x38>)
 800178a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178e:	095b      	lsrs	r3, r3, #5
 8001790:	2001      	movs	r0, #1
 8001792:	fa00 f202 	lsl.w	r2, r0, r2
 8001796:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800179a:	bf00      	nop
 800179c:	370c      	adds	r7, #12
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	e000e100 	.word	0xe000e100

080017ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	4603      	mov	r3, r0
 80017b4:	6039      	str	r1, [r7, #0]
 80017b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	db0a      	blt.n	80017d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	b2da      	uxtb	r2, r3
 80017c4:	490c      	ldr	r1, [pc, #48]	@ (80017f8 <__NVIC_SetPriority+0x4c>)
 80017c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ca:	0112      	lsls	r2, r2, #4
 80017cc:	b2d2      	uxtb	r2, r2
 80017ce:	440b      	add	r3, r1
 80017d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017d4:	e00a      	b.n	80017ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	b2da      	uxtb	r2, r3
 80017da:	4908      	ldr	r1, [pc, #32]	@ (80017fc <__NVIC_SetPriority+0x50>)
 80017dc:	79fb      	ldrb	r3, [r7, #7]
 80017de:	f003 030f 	and.w	r3, r3, #15
 80017e2:	3b04      	subs	r3, #4
 80017e4:	0112      	lsls	r2, r2, #4
 80017e6:	b2d2      	uxtb	r2, r2
 80017e8:	440b      	add	r3, r1
 80017ea:	761a      	strb	r2, [r3, #24]
}
 80017ec:	bf00      	nop
 80017ee:	370c      	adds	r7, #12
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr
 80017f8:	e000e100 	.word	0xe000e100
 80017fc:	e000ed00 	.word	0xe000ed00

08001800 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001800:	b480      	push	{r7}
 8001802:	b089      	sub	sp, #36	@ 0x24
 8001804:	af00      	add	r7, sp, #0
 8001806:	60f8      	str	r0, [r7, #12]
 8001808:	60b9      	str	r1, [r7, #8]
 800180a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	f003 0307 	and.w	r3, r3, #7
 8001812:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001814:	69fb      	ldr	r3, [r7, #28]
 8001816:	f1c3 0307 	rsb	r3, r3, #7
 800181a:	2b04      	cmp	r3, #4
 800181c:	bf28      	it	cs
 800181e:	2304      	movcs	r3, #4
 8001820:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	3304      	adds	r3, #4
 8001826:	2b06      	cmp	r3, #6
 8001828:	d902      	bls.n	8001830 <NVIC_EncodePriority+0x30>
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	3b03      	subs	r3, #3
 800182e:	e000      	b.n	8001832 <NVIC_EncodePriority+0x32>
 8001830:	2300      	movs	r3, #0
 8001832:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001834:	f04f 32ff 	mov.w	r2, #4294967295
 8001838:	69bb      	ldr	r3, [r7, #24]
 800183a:	fa02 f303 	lsl.w	r3, r2, r3
 800183e:	43da      	mvns	r2, r3
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	401a      	ands	r2, r3
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001848:	f04f 31ff 	mov.w	r1, #4294967295
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	fa01 f303 	lsl.w	r3, r1, r3
 8001852:	43d9      	mvns	r1, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001858:	4313      	orrs	r3, r2
         );
}
 800185a:	4618      	mov	r0, r3
 800185c:	3724      	adds	r7, #36	@ 0x24
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
	...

08001868 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	3b01      	subs	r3, #1
 8001874:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001878:	d301      	bcc.n	800187e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800187a:	2301      	movs	r3, #1
 800187c:	e00f      	b.n	800189e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800187e:	4a0a      	ldr	r2, [pc, #40]	@ (80018a8 <SysTick_Config+0x40>)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	3b01      	subs	r3, #1
 8001884:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001886:	210f      	movs	r1, #15
 8001888:	f04f 30ff 	mov.w	r0, #4294967295
 800188c:	f7ff ff8e 	bl	80017ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001890:	4b05      	ldr	r3, [pc, #20]	@ (80018a8 <SysTick_Config+0x40>)
 8001892:	2200      	movs	r2, #0
 8001894:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001896:	4b04      	ldr	r3, [pc, #16]	@ (80018a8 <SysTick_Config+0x40>)
 8001898:	2207      	movs	r2, #7
 800189a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800189c:	2300      	movs	r3, #0
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3708      	adds	r7, #8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	e000e010 	.word	0xe000e010

080018ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	f7ff ff29 	bl	800170c <__NVIC_SetPriorityGrouping>
}
 80018ba:	bf00      	nop
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}

080018c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018c2:	b580      	push	{r7, lr}
 80018c4:	b086      	sub	sp, #24
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	4603      	mov	r3, r0
 80018ca:	60b9      	str	r1, [r7, #8]
 80018cc:	607a      	str	r2, [r7, #4]
 80018ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018d0:	2300      	movs	r3, #0
 80018d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018d4:	f7ff ff3e 	bl	8001754 <__NVIC_GetPriorityGrouping>
 80018d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	68b9      	ldr	r1, [r7, #8]
 80018de:	6978      	ldr	r0, [r7, #20]
 80018e0:	f7ff ff8e 	bl	8001800 <NVIC_EncodePriority>
 80018e4:	4602      	mov	r2, r0
 80018e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018ea:	4611      	mov	r1, r2
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7ff ff5d 	bl	80017ac <__NVIC_SetPriority>
}
 80018f2:	bf00      	nop
 80018f4:	3718      	adds	r7, #24
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}

080018fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018fa:	b580      	push	{r7, lr}
 80018fc:	b082      	sub	sp, #8
 80018fe:	af00      	add	r7, sp, #0
 8001900:	4603      	mov	r3, r0
 8001902:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001904:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001908:	4618      	mov	r0, r3
 800190a:	f7ff ff31 	bl	8001770 <__NVIC_EnableIRQ>
}
 800190e:	bf00      	nop
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}

08001916 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001916:	b580      	push	{r7, lr}
 8001918:	b082      	sub	sp, #8
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f7ff ffa2 	bl	8001868 <SysTick_Config>
 8001924:	4603      	mov	r3, r0
}
 8001926:	4618      	mov	r0, r3
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
	...

08001930 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001930:	b480      	push	{r7}
 8001932:	b089      	sub	sp, #36	@ 0x24
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800193a:	2300      	movs	r3, #0
 800193c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800193e:	2300      	movs	r3, #0
 8001940:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001942:	2300      	movs	r3, #0
 8001944:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001946:	2300      	movs	r3, #0
 8001948:	61fb      	str	r3, [r7, #28]
 800194a:	e16b      	b.n	8001c24 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800194c:	2201      	movs	r2, #1
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	fa02 f303 	lsl.w	r3, r2, r3
 8001954:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	697a      	ldr	r2, [r7, #20]
 800195c:	4013      	ands	r3, r2
 800195e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001960:	693a      	ldr	r2, [r7, #16]
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	429a      	cmp	r2, r3
 8001966:	f040 815a 	bne.w	8001c1e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f003 0303 	and.w	r3, r3, #3
 8001972:	2b01      	cmp	r3, #1
 8001974:	d005      	beq.n	8001982 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800197e:	2b02      	cmp	r3, #2
 8001980:	d130      	bne.n	80019e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	2203      	movs	r2, #3
 800198e:	fa02 f303 	lsl.w	r3, r2, r3
 8001992:	43db      	mvns	r3, r3
 8001994:	69ba      	ldr	r2, [r7, #24]
 8001996:	4013      	ands	r3, r2
 8001998:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	68da      	ldr	r2, [r3, #12]
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	005b      	lsls	r3, r3, #1
 80019a2:	fa02 f303 	lsl.w	r3, r2, r3
 80019a6:	69ba      	ldr	r2, [r7, #24]
 80019a8:	4313      	orrs	r3, r2
 80019aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	69ba      	ldr	r2, [r7, #24]
 80019b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019b8:	2201      	movs	r2, #1
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	fa02 f303 	lsl.w	r3, r2, r3
 80019c0:	43db      	mvns	r3, r3
 80019c2:	69ba      	ldr	r2, [r7, #24]
 80019c4:	4013      	ands	r3, r2
 80019c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	091b      	lsrs	r3, r3, #4
 80019ce:	f003 0201 	and.w	r2, r3, #1
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	fa02 f303 	lsl.w	r3, r2, r3
 80019d8:	69ba      	ldr	r2, [r7, #24]
 80019da:	4313      	orrs	r3, r2
 80019dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	69ba      	ldr	r2, [r7, #24]
 80019e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f003 0303 	and.w	r3, r3, #3
 80019ec:	2b03      	cmp	r3, #3
 80019ee:	d017      	beq.n	8001a20 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	005b      	lsls	r3, r3, #1
 80019fa:	2203      	movs	r2, #3
 80019fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001a00:	43db      	mvns	r3, r3
 8001a02:	69ba      	ldr	r2, [r7, #24]
 8001a04:	4013      	ands	r3, r2
 8001a06:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	689a      	ldr	r2, [r3, #8]
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	005b      	lsls	r3, r3, #1
 8001a10:	fa02 f303 	lsl.w	r3, r2, r3
 8001a14:	69ba      	ldr	r2, [r7, #24]
 8001a16:	4313      	orrs	r3, r2
 8001a18:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	69ba      	ldr	r2, [r7, #24]
 8001a1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f003 0303 	and.w	r3, r3, #3
 8001a28:	2b02      	cmp	r3, #2
 8001a2a:	d123      	bne.n	8001a74 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a2c:	69fb      	ldr	r3, [r7, #28]
 8001a2e:	08da      	lsrs	r2, r3, #3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	3208      	adds	r2, #8
 8001a34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	f003 0307 	and.w	r3, r3, #7
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	220f      	movs	r2, #15
 8001a44:	fa02 f303 	lsl.w	r3, r2, r3
 8001a48:	43db      	mvns	r3, r3
 8001a4a:	69ba      	ldr	r2, [r7, #24]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	691a      	ldr	r2, [r3, #16]
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	f003 0307 	and.w	r3, r3, #7
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a60:	69ba      	ldr	r2, [r7, #24]
 8001a62:	4313      	orrs	r3, r2
 8001a64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	08da      	lsrs	r2, r3, #3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	3208      	adds	r2, #8
 8001a6e:	69b9      	ldr	r1, [r7, #24]
 8001a70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	2203      	movs	r2, #3
 8001a80:	fa02 f303 	lsl.w	r3, r2, r3
 8001a84:	43db      	mvns	r3, r3
 8001a86:	69ba      	ldr	r2, [r7, #24]
 8001a88:	4013      	ands	r3, r2
 8001a8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f003 0203 	and.w	r2, r3, #3
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	005b      	lsls	r3, r3, #1
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	f000 80b4 	beq.w	8001c1e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	60fb      	str	r3, [r7, #12]
 8001aba:	4b60      	ldr	r3, [pc, #384]	@ (8001c3c <HAL_GPIO_Init+0x30c>)
 8001abc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001abe:	4a5f      	ldr	r2, [pc, #380]	@ (8001c3c <HAL_GPIO_Init+0x30c>)
 8001ac0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ac4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ac6:	4b5d      	ldr	r3, [pc, #372]	@ (8001c3c <HAL_GPIO_Init+0x30c>)
 8001ac8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ace:	60fb      	str	r3, [r7, #12]
 8001ad0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ad2:	4a5b      	ldr	r2, [pc, #364]	@ (8001c40 <HAL_GPIO_Init+0x310>)
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	089b      	lsrs	r3, r3, #2
 8001ad8:	3302      	adds	r3, #2
 8001ada:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ade:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ae0:	69fb      	ldr	r3, [r7, #28]
 8001ae2:	f003 0303 	and.w	r3, r3, #3
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	220f      	movs	r2, #15
 8001aea:	fa02 f303 	lsl.w	r3, r2, r3
 8001aee:	43db      	mvns	r3, r3
 8001af0:	69ba      	ldr	r2, [r7, #24]
 8001af2:	4013      	ands	r3, r2
 8001af4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4a52      	ldr	r2, [pc, #328]	@ (8001c44 <HAL_GPIO_Init+0x314>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d02b      	beq.n	8001b56 <HAL_GPIO_Init+0x226>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4a51      	ldr	r2, [pc, #324]	@ (8001c48 <HAL_GPIO_Init+0x318>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d025      	beq.n	8001b52 <HAL_GPIO_Init+0x222>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4a50      	ldr	r2, [pc, #320]	@ (8001c4c <HAL_GPIO_Init+0x31c>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d01f      	beq.n	8001b4e <HAL_GPIO_Init+0x21e>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4a4f      	ldr	r2, [pc, #316]	@ (8001c50 <HAL_GPIO_Init+0x320>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d019      	beq.n	8001b4a <HAL_GPIO_Init+0x21a>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4a4e      	ldr	r2, [pc, #312]	@ (8001c54 <HAL_GPIO_Init+0x324>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d013      	beq.n	8001b46 <HAL_GPIO_Init+0x216>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4a4d      	ldr	r2, [pc, #308]	@ (8001c58 <HAL_GPIO_Init+0x328>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d00d      	beq.n	8001b42 <HAL_GPIO_Init+0x212>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4a4c      	ldr	r2, [pc, #304]	@ (8001c5c <HAL_GPIO_Init+0x32c>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d007      	beq.n	8001b3e <HAL_GPIO_Init+0x20e>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4a4b      	ldr	r2, [pc, #300]	@ (8001c60 <HAL_GPIO_Init+0x330>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d101      	bne.n	8001b3a <HAL_GPIO_Init+0x20a>
 8001b36:	2307      	movs	r3, #7
 8001b38:	e00e      	b.n	8001b58 <HAL_GPIO_Init+0x228>
 8001b3a:	2308      	movs	r3, #8
 8001b3c:	e00c      	b.n	8001b58 <HAL_GPIO_Init+0x228>
 8001b3e:	2306      	movs	r3, #6
 8001b40:	e00a      	b.n	8001b58 <HAL_GPIO_Init+0x228>
 8001b42:	2305      	movs	r3, #5
 8001b44:	e008      	b.n	8001b58 <HAL_GPIO_Init+0x228>
 8001b46:	2304      	movs	r3, #4
 8001b48:	e006      	b.n	8001b58 <HAL_GPIO_Init+0x228>
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e004      	b.n	8001b58 <HAL_GPIO_Init+0x228>
 8001b4e:	2302      	movs	r3, #2
 8001b50:	e002      	b.n	8001b58 <HAL_GPIO_Init+0x228>
 8001b52:	2301      	movs	r3, #1
 8001b54:	e000      	b.n	8001b58 <HAL_GPIO_Init+0x228>
 8001b56:	2300      	movs	r3, #0
 8001b58:	69fa      	ldr	r2, [r7, #28]
 8001b5a:	f002 0203 	and.w	r2, r2, #3
 8001b5e:	0092      	lsls	r2, r2, #2
 8001b60:	4093      	lsls	r3, r2
 8001b62:	69ba      	ldr	r2, [r7, #24]
 8001b64:	4313      	orrs	r3, r2
 8001b66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b68:	4935      	ldr	r1, [pc, #212]	@ (8001c40 <HAL_GPIO_Init+0x310>)
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	089b      	lsrs	r3, r3, #2
 8001b6e:	3302      	adds	r3, #2
 8001b70:	69ba      	ldr	r2, [r7, #24]
 8001b72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b76:	4b3b      	ldr	r3, [pc, #236]	@ (8001c64 <HAL_GPIO_Init+0x334>)
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	43db      	mvns	r3, r3
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	4013      	ands	r3, r2
 8001b84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d003      	beq.n	8001b9a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001b92:	69ba      	ldr	r2, [r7, #24]
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b9a:	4a32      	ldr	r2, [pc, #200]	@ (8001c64 <HAL_GPIO_Init+0x334>)
 8001b9c:	69bb      	ldr	r3, [r7, #24]
 8001b9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ba0:	4b30      	ldr	r3, [pc, #192]	@ (8001c64 <HAL_GPIO_Init+0x334>)
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	43db      	mvns	r3, r3
 8001baa:	69ba      	ldr	r2, [r7, #24]
 8001bac:	4013      	ands	r3, r2
 8001bae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d003      	beq.n	8001bc4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001bc4:	4a27      	ldr	r2, [pc, #156]	@ (8001c64 <HAL_GPIO_Init+0x334>)
 8001bc6:	69bb      	ldr	r3, [r7, #24]
 8001bc8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001bca:	4b26      	ldr	r3, [pc, #152]	@ (8001c64 <HAL_GPIO_Init+0x334>)
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	43db      	mvns	r3, r3
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d003      	beq.n	8001bee <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001be6:	69ba      	ldr	r2, [r7, #24]
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	4313      	orrs	r3, r2
 8001bec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bee:	4a1d      	ldr	r2, [pc, #116]	@ (8001c64 <HAL_GPIO_Init+0x334>)
 8001bf0:	69bb      	ldr	r3, [r7, #24]
 8001bf2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bf4:	4b1b      	ldr	r3, [pc, #108]	@ (8001c64 <HAL_GPIO_Init+0x334>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	43db      	mvns	r3, r3
 8001bfe:	69ba      	ldr	r2, [r7, #24]
 8001c00:	4013      	ands	r3, r2
 8001c02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d003      	beq.n	8001c18 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c18:	4a12      	ldr	r2, [pc, #72]	@ (8001c64 <HAL_GPIO_Init+0x334>)
 8001c1a:	69bb      	ldr	r3, [r7, #24]
 8001c1c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	3301      	adds	r3, #1
 8001c22:	61fb      	str	r3, [r7, #28]
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	2b0f      	cmp	r3, #15
 8001c28:	f67f ae90 	bls.w	800194c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c2c:	bf00      	nop
 8001c2e:	bf00      	nop
 8001c30:	3724      	adds	r7, #36	@ 0x24
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	40023800 	.word	0x40023800
 8001c40:	40013800 	.word	0x40013800
 8001c44:	40020000 	.word	0x40020000
 8001c48:	40020400 	.word	0x40020400
 8001c4c:	40020800 	.word	0x40020800
 8001c50:	40020c00 	.word	0x40020c00
 8001c54:	40021000 	.word	0x40021000
 8001c58:	40021400 	.word	0x40021400
 8001c5c:	40021800 	.word	0x40021800
 8001c60:	40021c00 	.word	0x40021c00
 8001c64:	40013c00 	.word	0x40013c00

08001c68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	460b      	mov	r3, r1
 8001c72:	807b      	strh	r3, [r7, #2]
 8001c74:	4613      	mov	r3, r2
 8001c76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c78:	787b      	ldrb	r3, [r7, #1]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d003      	beq.n	8001c86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c7e:	887a      	ldrh	r2, [r7, #2]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c84:	e003      	b.n	8001c8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c86:	887b      	ldrh	r3, [r7, #2]
 8001c88:	041a      	lsls	r2, r3, #16
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	619a      	str	r2, [r3, #24]
}
 8001c8e:	bf00      	nop
 8001c90:	370c      	adds	r7, #12
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr

08001c9a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c9a:	b480      	push	{r7}
 8001c9c:	b085      	sub	sp, #20
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6078      	str	r0, [r7, #4]
 8001ca2:	460b      	mov	r3, r1
 8001ca4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	695b      	ldr	r3, [r3, #20]
 8001caa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001cac:	887a      	ldrh	r2, [r7, #2]
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	041a      	lsls	r2, r3, #16
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	43d9      	mvns	r1, r3
 8001cb8:	887b      	ldrh	r3, [r7, #2]
 8001cba:	400b      	ands	r3, r1
 8001cbc:	431a      	orrs	r2, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	619a      	str	r2, [r3, #24]
}
 8001cc2:	bf00      	nop
 8001cc4:	3714      	adds	r7, #20
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
	...

08001cd0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001cda:	4b08      	ldr	r3, [pc, #32]	@ (8001cfc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001cdc:	695a      	ldr	r2, [r3, #20]
 8001cde:	88fb      	ldrh	r3, [r7, #6]
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d006      	beq.n	8001cf4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001ce6:	4a05      	ldr	r2, [pc, #20]	@ (8001cfc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ce8:	88fb      	ldrh	r3, [r7, #6]
 8001cea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001cec:	88fb      	ldrh	r3, [r7, #6]
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7ff f878 	bl	8000de4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001cf4:	bf00      	nop
 8001cf6:	3708      	adds	r7, #8
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	40013c00 	.word	0x40013c00

08001d00 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d101      	bne.n	8001d12 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e12b      	b.n	8001f6a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d106      	bne.n	8001d2c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2200      	movs	r2, #0
 8001d22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f7ff fadc 	bl	80012e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2224      	movs	r2, #36	@ 0x24
 8001d30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f022 0201 	bic.w	r2, r2, #1
 8001d42:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001d52:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001d62:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001d64:	f001 fc36 	bl	80035d4 <HAL_RCC_GetPCLK1Freq>
 8001d68:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	4a81      	ldr	r2, [pc, #516]	@ (8001f74 <HAL_I2C_Init+0x274>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d807      	bhi.n	8001d84 <HAL_I2C_Init+0x84>
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	4a80      	ldr	r2, [pc, #512]	@ (8001f78 <HAL_I2C_Init+0x278>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	bf94      	ite	ls
 8001d7c:	2301      	movls	r3, #1
 8001d7e:	2300      	movhi	r3, #0
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	e006      	b.n	8001d92 <HAL_I2C_Init+0x92>
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	4a7d      	ldr	r2, [pc, #500]	@ (8001f7c <HAL_I2C_Init+0x27c>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	bf94      	ite	ls
 8001d8c:	2301      	movls	r3, #1
 8001d8e:	2300      	movhi	r3, #0
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d001      	beq.n	8001d9a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e0e7      	b.n	8001f6a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	4a78      	ldr	r2, [pc, #480]	@ (8001f80 <HAL_I2C_Init+0x280>)
 8001d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001da2:	0c9b      	lsrs	r3, r3, #18
 8001da4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	68ba      	ldr	r2, [r7, #8]
 8001db6:	430a      	orrs	r2, r1
 8001db8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	6a1b      	ldr	r3, [r3, #32]
 8001dc0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	4a6a      	ldr	r2, [pc, #424]	@ (8001f74 <HAL_I2C_Init+0x274>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d802      	bhi.n	8001dd4 <HAL_I2C_Init+0xd4>
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	e009      	b.n	8001de8 <HAL_I2C_Init+0xe8>
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001dda:	fb02 f303 	mul.w	r3, r2, r3
 8001dde:	4a69      	ldr	r2, [pc, #420]	@ (8001f84 <HAL_I2C_Init+0x284>)
 8001de0:	fba2 2303 	umull	r2, r3, r2, r3
 8001de4:	099b      	lsrs	r3, r3, #6
 8001de6:	3301      	adds	r3, #1
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	6812      	ldr	r2, [r2, #0]
 8001dec:	430b      	orrs	r3, r1
 8001dee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	69db      	ldr	r3, [r3, #28]
 8001df6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001dfa:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	495c      	ldr	r1, [pc, #368]	@ (8001f74 <HAL_I2C_Init+0x274>)
 8001e04:	428b      	cmp	r3, r1
 8001e06:	d819      	bhi.n	8001e3c <HAL_I2C_Init+0x13c>
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	1e59      	subs	r1, r3, #1
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	005b      	lsls	r3, r3, #1
 8001e12:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e16:	1c59      	adds	r1, r3, #1
 8001e18:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001e1c:	400b      	ands	r3, r1
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d00a      	beq.n	8001e38 <HAL_I2C_Init+0x138>
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	1e59      	subs	r1, r3, #1
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	005b      	lsls	r3, r3, #1
 8001e2c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e30:	3301      	adds	r3, #1
 8001e32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e36:	e051      	b.n	8001edc <HAL_I2C_Init+0x1dc>
 8001e38:	2304      	movs	r3, #4
 8001e3a:	e04f      	b.n	8001edc <HAL_I2C_Init+0x1dc>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d111      	bne.n	8001e68 <HAL_I2C_Init+0x168>
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	1e58      	subs	r0, r3, #1
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6859      	ldr	r1, [r3, #4]
 8001e4c:	460b      	mov	r3, r1
 8001e4e:	005b      	lsls	r3, r3, #1
 8001e50:	440b      	add	r3, r1
 8001e52:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e56:	3301      	adds	r3, #1
 8001e58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	bf0c      	ite	eq
 8001e60:	2301      	moveq	r3, #1
 8001e62:	2300      	movne	r3, #0
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	e012      	b.n	8001e8e <HAL_I2C_Init+0x18e>
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	1e58      	subs	r0, r3, #1
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6859      	ldr	r1, [r3, #4]
 8001e70:	460b      	mov	r3, r1
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	440b      	add	r3, r1
 8001e76:	0099      	lsls	r1, r3, #2
 8001e78:	440b      	add	r3, r1
 8001e7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e7e:	3301      	adds	r3, #1
 8001e80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	bf0c      	ite	eq
 8001e88:	2301      	moveq	r3, #1
 8001e8a:	2300      	movne	r3, #0
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d001      	beq.n	8001e96 <HAL_I2C_Init+0x196>
 8001e92:	2301      	movs	r3, #1
 8001e94:	e022      	b.n	8001edc <HAL_I2C_Init+0x1dc>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d10e      	bne.n	8001ebc <HAL_I2C_Init+0x1bc>
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	1e58      	subs	r0, r3, #1
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6859      	ldr	r1, [r3, #4]
 8001ea6:	460b      	mov	r3, r1
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	440b      	add	r3, r1
 8001eac:	fbb0 f3f3 	udiv	r3, r0, r3
 8001eb0:	3301      	adds	r3, #1
 8001eb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001eb6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001eba:	e00f      	b.n	8001edc <HAL_I2C_Init+0x1dc>
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	1e58      	subs	r0, r3, #1
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6859      	ldr	r1, [r3, #4]
 8001ec4:	460b      	mov	r3, r1
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	440b      	add	r3, r1
 8001eca:	0099      	lsls	r1, r3, #2
 8001ecc:	440b      	add	r3, r1
 8001ece:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ed8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001edc:	6879      	ldr	r1, [r7, #4]
 8001ede:	6809      	ldr	r1, [r1, #0]
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	69da      	ldr	r2, [r3, #28]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6a1b      	ldr	r3, [r3, #32]
 8001ef6:	431a      	orrs	r2, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	430a      	orrs	r2, r1
 8001efe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001f0a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	6911      	ldr	r1, [r2, #16]
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	68d2      	ldr	r2, [r2, #12]
 8001f16:	4311      	orrs	r1, r2
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	6812      	ldr	r2, [r2, #0]
 8001f1c:	430b      	orrs	r3, r1
 8001f1e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	695a      	ldr	r2, [r3, #20]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	699b      	ldr	r3, [r3, #24]
 8001f32:	431a      	orrs	r2, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	430a      	orrs	r2, r1
 8001f3a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f042 0201 	orr.w	r2, r2, #1
 8001f4a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2220      	movs	r2, #32
 8001f56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2200      	movs	r2, #0
 8001f64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001f68:	2300      	movs	r3, #0
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3710      	adds	r7, #16
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	000186a0 	.word	0x000186a0
 8001f78:	001e847f 	.word	0x001e847f
 8001f7c:	003d08ff 	.word	0x003d08ff
 8001f80:	431bde83 	.word	0x431bde83
 8001f84:	10624dd3 	.word	0x10624dd3

08001f88 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b088      	sub	sp, #32
 8001f8c:	af02      	add	r7, sp, #8
 8001f8e:	60f8      	str	r0, [r7, #12]
 8001f90:	607a      	str	r2, [r7, #4]
 8001f92:	461a      	mov	r2, r3
 8001f94:	460b      	mov	r3, r1
 8001f96:	817b      	strh	r3, [r7, #10]
 8001f98:	4613      	mov	r3, r2
 8001f9a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001f9c:	f7ff fb86 	bl	80016ac <HAL_GetTick>
 8001fa0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	2b20      	cmp	r3, #32
 8001fac:	f040 80e0 	bne.w	8002170 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	9300      	str	r3, [sp, #0]
 8001fb4:	2319      	movs	r3, #25
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	4970      	ldr	r1, [pc, #448]	@ (800217c <HAL_I2C_Master_Transmit+0x1f4>)
 8001fba:	68f8      	ldr	r0, [r7, #12]
 8001fbc:	f000 fc64 	bl	8002888 <I2C_WaitOnFlagUntilTimeout>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d001      	beq.n	8001fca <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001fc6:	2302      	movs	r3, #2
 8001fc8:	e0d3      	b.n	8002172 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d101      	bne.n	8001fd8 <HAL_I2C_Master_Transmit+0x50>
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	e0cc      	b.n	8002172 <HAL_I2C_Master_Transmit+0x1ea>
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	2201      	movs	r2, #1
 8001fdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0301 	and.w	r3, r3, #1
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d007      	beq.n	8001ffe <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f042 0201 	orr.w	r2, r2, #1
 8001ffc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800200c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2221      	movs	r2, #33	@ 0x21
 8002012:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2210      	movs	r2, #16
 800201a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2200      	movs	r2, #0
 8002022:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	893a      	ldrh	r2, [r7, #8]
 800202e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002034:	b29a      	uxth	r2, r3
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	4a50      	ldr	r2, [pc, #320]	@ (8002180 <HAL_I2C_Master_Transmit+0x1f8>)
 800203e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002040:	8979      	ldrh	r1, [r7, #10]
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	6a3a      	ldr	r2, [r7, #32]
 8002046:	68f8      	ldr	r0, [r7, #12]
 8002048:	f000 face 	bl	80025e8 <I2C_MasterRequestWrite>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d001      	beq.n	8002056 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e08d      	b.n	8002172 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002056:	2300      	movs	r3, #0
 8002058:	613b      	str	r3, [r7, #16]
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	695b      	ldr	r3, [r3, #20]
 8002060:	613b      	str	r3, [r7, #16]
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	699b      	ldr	r3, [r3, #24]
 8002068:	613b      	str	r3, [r7, #16]
 800206a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800206c:	e066      	b.n	800213c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800206e:	697a      	ldr	r2, [r7, #20]
 8002070:	6a39      	ldr	r1, [r7, #32]
 8002072:	68f8      	ldr	r0, [r7, #12]
 8002074:	f000 fd22 	bl	8002abc <I2C_WaitOnTXEFlagUntilTimeout>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d00d      	beq.n	800209a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002082:	2b04      	cmp	r3, #4
 8002084:	d107      	bne.n	8002096 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002094:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e06b      	b.n	8002172 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800209e:	781a      	ldrb	r2, [r3, #0]
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020aa:	1c5a      	adds	r2, r3, #1
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020b4:	b29b      	uxth	r3, r3
 80020b6:	3b01      	subs	r3, #1
 80020b8:	b29a      	uxth	r2, r3
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020c2:	3b01      	subs	r3, #1
 80020c4:	b29a      	uxth	r2, r3
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	695b      	ldr	r3, [r3, #20]
 80020d0:	f003 0304 	and.w	r3, r3, #4
 80020d4:	2b04      	cmp	r3, #4
 80020d6:	d11b      	bne.n	8002110 <HAL_I2C_Master_Transmit+0x188>
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d017      	beq.n	8002110 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020e4:	781a      	ldrb	r2, [r3, #0]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020f0:	1c5a      	adds	r2, r3, #1
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	3b01      	subs	r3, #1
 80020fe:	b29a      	uxth	r2, r3
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002108:	3b01      	subs	r3, #1
 800210a:	b29a      	uxth	r2, r3
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002110:	697a      	ldr	r2, [r7, #20]
 8002112:	6a39      	ldr	r1, [r7, #32]
 8002114:	68f8      	ldr	r0, [r7, #12]
 8002116:	f000 fd19 	bl	8002b4c <I2C_WaitOnBTFFlagUntilTimeout>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d00d      	beq.n	800213c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002124:	2b04      	cmp	r3, #4
 8002126:	d107      	bne.n	8002138 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002136:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e01a      	b.n	8002172 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002140:	2b00      	cmp	r3, #0
 8002142:	d194      	bne.n	800206e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002152:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2220      	movs	r2, #32
 8002158:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2200      	movs	r2, #0
 8002160:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2200      	movs	r2, #0
 8002168:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800216c:	2300      	movs	r3, #0
 800216e:	e000      	b.n	8002172 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002170:	2302      	movs	r3, #2
  }
}
 8002172:	4618      	mov	r0, r3
 8002174:	3718      	adds	r7, #24
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	00100002 	.word	0x00100002
 8002180:	ffff0000 	.word	0xffff0000

08002184 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b08c      	sub	sp, #48	@ 0x30
 8002188:	af02      	add	r7, sp, #8
 800218a:	60f8      	str	r0, [r7, #12]
 800218c:	607a      	str	r2, [r7, #4]
 800218e:	461a      	mov	r2, r3
 8002190:	460b      	mov	r3, r1
 8002192:	817b      	strh	r3, [r7, #10]
 8002194:	4613      	mov	r3, r2
 8002196:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002198:	f7ff fa88 	bl	80016ac <HAL_GetTick>
 800219c:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	2b20      	cmp	r3, #32
 80021a8:	f040 8217 	bne.w	80025da <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80021ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ae:	9300      	str	r3, [sp, #0]
 80021b0:	2319      	movs	r3, #25
 80021b2:	2201      	movs	r2, #1
 80021b4:	497c      	ldr	r1, [pc, #496]	@ (80023a8 <HAL_I2C_Master_Receive+0x224>)
 80021b6:	68f8      	ldr	r0, [r7, #12]
 80021b8:	f000 fb66 	bl	8002888 <I2C_WaitOnFlagUntilTimeout>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80021c2:	2302      	movs	r3, #2
 80021c4:	e20a      	b.n	80025dc <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d101      	bne.n	80021d4 <HAL_I2C_Master_Receive+0x50>
 80021d0:	2302      	movs	r3, #2
 80021d2:	e203      	b.n	80025dc <HAL_I2C_Master_Receive+0x458>
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2201      	movs	r2, #1
 80021d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0301 	and.w	r3, r3, #1
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d007      	beq.n	80021fa <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f042 0201 	orr.w	r2, r2, #1
 80021f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002208:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2222      	movs	r2, #34	@ 0x22
 800220e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2210      	movs	r2, #16
 8002216:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2200      	movs	r2, #0
 800221e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	893a      	ldrh	r2, [r7, #8]
 800222a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002230:	b29a      	uxth	r2, r3
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	4a5c      	ldr	r2, [pc, #368]	@ (80023ac <HAL_I2C_Master_Receive+0x228>)
 800223a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800223c:	8979      	ldrh	r1, [r7, #10]
 800223e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002240:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002242:	68f8      	ldr	r0, [r7, #12]
 8002244:	f000 fa52 	bl	80026ec <I2C_MasterRequestRead>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d001      	beq.n	8002252 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e1c4      	b.n	80025dc <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002256:	2b00      	cmp	r3, #0
 8002258:	d113      	bne.n	8002282 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800225a:	2300      	movs	r3, #0
 800225c:	623b      	str	r3, [r7, #32]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	695b      	ldr	r3, [r3, #20]
 8002264:	623b      	str	r3, [r7, #32]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	699b      	ldr	r3, [r3, #24]
 800226c:	623b      	str	r3, [r7, #32]
 800226e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800227e:	601a      	str	r2, [r3, #0]
 8002280:	e198      	b.n	80025b4 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002286:	2b01      	cmp	r3, #1
 8002288:	d11b      	bne.n	80022c2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002298:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800229a:	2300      	movs	r3, #0
 800229c:	61fb      	str	r3, [r7, #28]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	695b      	ldr	r3, [r3, #20]
 80022a4:	61fb      	str	r3, [r7, #28]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	699b      	ldr	r3, [r3, #24]
 80022ac:	61fb      	str	r3, [r7, #28]
 80022ae:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022be:	601a      	str	r2, [r3, #0]
 80022c0:	e178      	b.n	80025b4 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	d11b      	bne.n	8002302 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80022d8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80022e8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022ea:	2300      	movs	r3, #0
 80022ec:	61bb      	str	r3, [r7, #24]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	695b      	ldr	r3, [r3, #20]
 80022f4:	61bb      	str	r3, [r7, #24]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	699b      	ldr	r3, [r3, #24]
 80022fc:	61bb      	str	r3, [r7, #24]
 80022fe:	69bb      	ldr	r3, [r7, #24]
 8002300:	e158      	b.n	80025b4 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002310:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002312:	2300      	movs	r3, #0
 8002314:	617b      	str	r3, [r7, #20]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	695b      	ldr	r3, [r3, #20]
 800231c:	617b      	str	r3, [r7, #20]
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	699b      	ldr	r3, [r3, #24]
 8002324:	617b      	str	r3, [r7, #20]
 8002326:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002328:	e144      	b.n	80025b4 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800232e:	2b03      	cmp	r3, #3
 8002330:	f200 80f1 	bhi.w	8002516 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002338:	2b01      	cmp	r3, #1
 800233a:	d123      	bne.n	8002384 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800233c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800233e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002340:	68f8      	ldr	r0, [r7, #12]
 8002342:	f000 fc4b 	bl	8002bdc <I2C_WaitOnRXNEFlagUntilTimeout>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d001      	beq.n	8002350 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e145      	b.n	80025dc <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	691a      	ldr	r2, [r3, #16]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800235a:	b2d2      	uxtb	r2, r2
 800235c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002362:	1c5a      	adds	r2, r3, #1
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800236c:	3b01      	subs	r3, #1
 800236e:	b29a      	uxth	r2, r3
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002378:	b29b      	uxth	r3, r3
 800237a:	3b01      	subs	r3, #1
 800237c:	b29a      	uxth	r2, r3
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002382:	e117      	b.n	80025b4 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002388:	2b02      	cmp	r3, #2
 800238a:	d14e      	bne.n	800242a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800238c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800238e:	9300      	str	r3, [sp, #0]
 8002390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002392:	2200      	movs	r2, #0
 8002394:	4906      	ldr	r1, [pc, #24]	@ (80023b0 <HAL_I2C_Master_Receive+0x22c>)
 8002396:	68f8      	ldr	r0, [r7, #12]
 8002398:	f000 fa76 	bl	8002888 <I2C_WaitOnFlagUntilTimeout>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d008      	beq.n	80023b4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e11a      	b.n	80025dc <HAL_I2C_Master_Receive+0x458>
 80023a6:	bf00      	nop
 80023a8:	00100002 	.word	0x00100002
 80023ac:	ffff0000 	.word	0xffff0000
 80023b0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	691a      	ldr	r2, [r3, #16]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ce:	b2d2      	uxtb	r2, r2
 80023d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023d6:	1c5a      	adds	r2, r3, #1
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023e0:	3b01      	subs	r3, #1
 80023e2:	b29a      	uxth	r2, r3
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	3b01      	subs	r3, #1
 80023f0:	b29a      	uxth	r2, r3
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	691a      	ldr	r2, [r3, #16]
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002400:	b2d2      	uxtb	r2, r2
 8002402:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002408:	1c5a      	adds	r2, r3, #1
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002412:	3b01      	subs	r3, #1
 8002414:	b29a      	uxth	r2, r3
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800241e:	b29b      	uxth	r3, r3
 8002420:	3b01      	subs	r3, #1
 8002422:	b29a      	uxth	r2, r3
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002428:	e0c4      	b.n	80025b4 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800242a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800242c:	9300      	str	r3, [sp, #0]
 800242e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002430:	2200      	movs	r2, #0
 8002432:	496c      	ldr	r1, [pc, #432]	@ (80025e4 <HAL_I2C_Master_Receive+0x460>)
 8002434:	68f8      	ldr	r0, [r7, #12]
 8002436:	f000 fa27 	bl	8002888 <I2C_WaitOnFlagUntilTimeout>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d001      	beq.n	8002444 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e0cb      	b.n	80025dc <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002452:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	691a      	ldr	r2, [r3, #16]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800245e:	b2d2      	uxtb	r2, r2
 8002460:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002466:	1c5a      	adds	r2, r3, #1
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002470:	3b01      	subs	r3, #1
 8002472:	b29a      	uxth	r2, r3
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800247c:	b29b      	uxth	r3, r3
 800247e:	3b01      	subs	r3, #1
 8002480:	b29a      	uxth	r2, r3
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002488:	9300      	str	r3, [sp, #0]
 800248a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800248c:	2200      	movs	r2, #0
 800248e:	4955      	ldr	r1, [pc, #340]	@ (80025e4 <HAL_I2C_Master_Receive+0x460>)
 8002490:	68f8      	ldr	r0, [r7, #12]
 8002492:	f000 f9f9 	bl	8002888 <I2C_WaitOnFlagUntilTimeout>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d001      	beq.n	80024a0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e09d      	b.n	80025dc <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	691a      	ldr	r2, [r3, #16]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ba:	b2d2      	uxtb	r2, r2
 80024bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024c2:	1c5a      	adds	r2, r3, #1
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024cc:	3b01      	subs	r3, #1
 80024ce:	b29a      	uxth	r2, r3
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024d8:	b29b      	uxth	r3, r3
 80024da:	3b01      	subs	r3, #1
 80024dc:	b29a      	uxth	r2, r3
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	691a      	ldr	r2, [r3, #16]
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ec:	b2d2      	uxtb	r2, r2
 80024ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024f4:	1c5a      	adds	r2, r3, #1
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024fe:	3b01      	subs	r3, #1
 8002500:	b29a      	uxth	r2, r3
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800250a:	b29b      	uxth	r3, r3
 800250c:	3b01      	subs	r3, #1
 800250e:	b29a      	uxth	r2, r3
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002514:	e04e      	b.n	80025b4 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002516:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002518:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800251a:	68f8      	ldr	r0, [r7, #12]
 800251c:	f000 fb5e 	bl	8002bdc <I2C_WaitOnRXNEFlagUntilTimeout>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d001      	beq.n	800252a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e058      	b.n	80025dc <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	691a      	ldr	r2, [r3, #16]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002534:	b2d2      	uxtb	r2, r2
 8002536:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800253c:	1c5a      	adds	r2, r3, #1
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002546:	3b01      	subs	r3, #1
 8002548:	b29a      	uxth	r2, r3
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002552:	b29b      	uxth	r3, r3
 8002554:	3b01      	subs	r3, #1
 8002556:	b29a      	uxth	r2, r3
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	695b      	ldr	r3, [r3, #20]
 8002562:	f003 0304 	and.w	r3, r3, #4
 8002566:	2b04      	cmp	r3, #4
 8002568:	d124      	bne.n	80025b4 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800256e:	2b03      	cmp	r3, #3
 8002570:	d107      	bne.n	8002582 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002580:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	691a      	ldr	r2, [r3, #16]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800258c:	b2d2      	uxtb	r2, r2
 800258e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002594:	1c5a      	adds	r2, r3, #1
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800259e:	3b01      	subs	r3, #1
 80025a0:	b29a      	uxth	r2, r3
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025aa:	b29b      	uxth	r3, r3
 80025ac:	3b01      	subs	r3, #1
 80025ae:	b29a      	uxth	r2, r3
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	f47f aeb6 	bne.w	800232a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2220      	movs	r2, #32
 80025c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2200      	movs	r2, #0
 80025ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2200      	movs	r2, #0
 80025d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80025d6:	2300      	movs	r3, #0
 80025d8:	e000      	b.n	80025dc <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 80025da:	2302      	movs	r3, #2
  }
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3728      	adds	r7, #40	@ 0x28
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	00010004 	.word	0x00010004

080025e8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b088      	sub	sp, #32
 80025ec:	af02      	add	r7, sp, #8
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	607a      	str	r2, [r7, #4]
 80025f2:	603b      	str	r3, [r7, #0]
 80025f4:	460b      	mov	r3, r1
 80025f6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025fc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	2b08      	cmp	r3, #8
 8002602:	d006      	beq.n	8002612 <I2C_MasterRequestWrite+0x2a>
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	2b01      	cmp	r3, #1
 8002608:	d003      	beq.n	8002612 <I2C_MasterRequestWrite+0x2a>
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002610:	d108      	bne.n	8002624 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002620:	601a      	str	r2, [r3, #0]
 8002622:	e00b      	b.n	800263c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002628:	2b12      	cmp	r3, #18
 800262a:	d107      	bne.n	800263c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800263a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	9300      	str	r3, [sp, #0]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2200      	movs	r2, #0
 8002644:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002648:	68f8      	ldr	r0, [r7, #12]
 800264a:	f000 f91d 	bl	8002888 <I2C_WaitOnFlagUntilTimeout>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d00d      	beq.n	8002670 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800265e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002662:	d103      	bne.n	800266c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800266a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800266c:	2303      	movs	r3, #3
 800266e:	e035      	b.n	80026dc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	691b      	ldr	r3, [r3, #16]
 8002674:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002678:	d108      	bne.n	800268c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800267a:	897b      	ldrh	r3, [r7, #10]
 800267c:	b2db      	uxtb	r3, r3
 800267e:	461a      	mov	r2, r3
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002688:	611a      	str	r2, [r3, #16]
 800268a:	e01b      	b.n	80026c4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800268c:	897b      	ldrh	r3, [r7, #10]
 800268e:	11db      	asrs	r3, r3, #7
 8002690:	b2db      	uxtb	r3, r3
 8002692:	f003 0306 	and.w	r3, r3, #6
 8002696:	b2db      	uxtb	r3, r3
 8002698:	f063 030f 	orn	r3, r3, #15
 800269c:	b2da      	uxtb	r2, r3
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	490e      	ldr	r1, [pc, #56]	@ (80026e4 <I2C_MasterRequestWrite+0xfc>)
 80026aa:	68f8      	ldr	r0, [r7, #12]
 80026ac:	f000 f966 	bl	800297c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d001      	beq.n	80026ba <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e010      	b.n	80026dc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80026ba:	897b      	ldrh	r3, [r7, #10]
 80026bc:	b2da      	uxtb	r2, r3
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	4907      	ldr	r1, [pc, #28]	@ (80026e8 <I2C_MasterRequestWrite+0x100>)
 80026ca:	68f8      	ldr	r0, [r7, #12]
 80026cc:	f000 f956 	bl	800297c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d001      	beq.n	80026da <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e000      	b.n	80026dc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80026da:	2300      	movs	r3, #0
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3718      	adds	r7, #24
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	00010008 	.word	0x00010008
 80026e8:	00010002 	.word	0x00010002

080026ec <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b088      	sub	sp, #32
 80026f0:	af02      	add	r7, sp, #8
 80026f2:	60f8      	str	r0, [r7, #12]
 80026f4:	607a      	str	r2, [r7, #4]
 80026f6:	603b      	str	r3, [r7, #0]
 80026f8:	460b      	mov	r3, r1
 80026fa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002700:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002710:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	2b08      	cmp	r3, #8
 8002716:	d006      	beq.n	8002726 <I2C_MasterRequestRead+0x3a>
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	2b01      	cmp	r3, #1
 800271c:	d003      	beq.n	8002726 <I2C_MasterRequestRead+0x3a>
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002724:	d108      	bne.n	8002738 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002734:	601a      	str	r2, [r3, #0]
 8002736:	e00b      	b.n	8002750 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800273c:	2b11      	cmp	r3, #17
 800273e:	d107      	bne.n	8002750 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800274e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	9300      	str	r3, [sp, #0]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2200      	movs	r2, #0
 8002758:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800275c:	68f8      	ldr	r0, [r7, #12]
 800275e:	f000 f893 	bl	8002888 <I2C_WaitOnFlagUntilTimeout>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d00d      	beq.n	8002784 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002772:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002776:	d103      	bne.n	8002780 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800277e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002780:	2303      	movs	r3, #3
 8002782:	e079      	b.n	8002878 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	691b      	ldr	r3, [r3, #16]
 8002788:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800278c:	d108      	bne.n	80027a0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800278e:	897b      	ldrh	r3, [r7, #10]
 8002790:	b2db      	uxtb	r3, r3
 8002792:	f043 0301 	orr.w	r3, r3, #1
 8002796:	b2da      	uxtb	r2, r3
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	611a      	str	r2, [r3, #16]
 800279e:	e05f      	b.n	8002860 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80027a0:	897b      	ldrh	r3, [r7, #10]
 80027a2:	11db      	asrs	r3, r3, #7
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	f003 0306 	and.w	r3, r3, #6
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	f063 030f 	orn	r3, r3, #15
 80027b0:	b2da      	uxtb	r2, r3
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	4930      	ldr	r1, [pc, #192]	@ (8002880 <I2C_MasterRequestRead+0x194>)
 80027be:	68f8      	ldr	r0, [r7, #12]
 80027c0:	f000 f8dc 	bl	800297c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d001      	beq.n	80027ce <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e054      	b.n	8002878 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80027ce:	897b      	ldrh	r3, [r7, #10]
 80027d0:	b2da      	uxtb	r2, r3
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	4929      	ldr	r1, [pc, #164]	@ (8002884 <I2C_MasterRequestRead+0x198>)
 80027de:	68f8      	ldr	r0, [r7, #12]
 80027e0:	f000 f8cc 	bl	800297c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d001      	beq.n	80027ee <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e044      	b.n	8002878 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027ee:	2300      	movs	r3, #0
 80027f0:	613b      	str	r3, [r7, #16]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	695b      	ldr	r3, [r3, #20]
 80027f8:	613b      	str	r3, [r7, #16]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	699b      	ldr	r3, [r3, #24]
 8002800:	613b      	str	r3, [r7, #16]
 8002802:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002812:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	9300      	str	r3, [sp, #0]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2200      	movs	r2, #0
 800281c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002820:	68f8      	ldr	r0, [r7, #12]
 8002822:	f000 f831 	bl	8002888 <I2C_WaitOnFlagUntilTimeout>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d00d      	beq.n	8002848 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002836:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800283a:	d103      	bne.n	8002844 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002842:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8002844:	2303      	movs	r3, #3
 8002846:	e017      	b.n	8002878 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002848:	897b      	ldrh	r3, [r7, #10]
 800284a:	11db      	asrs	r3, r3, #7
 800284c:	b2db      	uxtb	r3, r3
 800284e:	f003 0306 	and.w	r3, r3, #6
 8002852:	b2db      	uxtb	r3, r3
 8002854:	f063 030e 	orn	r3, r3, #14
 8002858:	b2da      	uxtb	r2, r3
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	4907      	ldr	r1, [pc, #28]	@ (8002884 <I2C_MasterRequestRead+0x198>)
 8002866:	68f8      	ldr	r0, [r7, #12]
 8002868:	f000 f888 	bl	800297c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d001      	beq.n	8002876 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e000      	b.n	8002878 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002876:	2300      	movs	r3, #0
}
 8002878:	4618      	mov	r0, r3
 800287a:	3718      	adds	r7, #24
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}
 8002880:	00010008 	.word	0x00010008
 8002884:	00010002 	.word	0x00010002

08002888 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	60b9      	str	r1, [r7, #8]
 8002892:	603b      	str	r3, [r7, #0]
 8002894:	4613      	mov	r3, r2
 8002896:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002898:	e048      	b.n	800292c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028a0:	d044      	beq.n	800292c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028a2:	f7fe ff03 	bl	80016ac <HAL_GetTick>
 80028a6:	4602      	mov	r2, r0
 80028a8:	69bb      	ldr	r3, [r7, #24]
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	683a      	ldr	r2, [r7, #0]
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d302      	bcc.n	80028b8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d139      	bne.n	800292c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	0c1b      	lsrs	r3, r3, #16
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d10d      	bne.n	80028de <I2C_WaitOnFlagUntilTimeout+0x56>
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	695b      	ldr	r3, [r3, #20]
 80028c8:	43da      	mvns	r2, r3
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	4013      	ands	r3, r2
 80028ce:	b29b      	uxth	r3, r3
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	bf0c      	ite	eq
 80028d4:	2301      	moveq	r3, #1
 80028d6:	2300      	movne	r3, #0
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	461a      	mov	r2, r3
 80028dc:	e00c      	b.n	80028f8 <I2C_WaitOnFlagUntilTimeout+0x70>
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	699b      	ldr	r3, [r3, #24]
 80028e4:	43da      	mvns	r2, r3
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	4013      	ands	r3, r2
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	bf0c      	ite	eq
 80028f0:	2301      	moveq	r3, #1
 80028f2:	2300      	movne	r3, #0
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	461a      	mov	r2, r3
 80028f8:	79fb      	ldrb	r3, [r7, #7]
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d116      	bne.n	800292c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2200      	movs	r2, #0
 8002902:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2220      	movs	r2, #32
 8002908:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2200      	movs	r2, #0
 8002910:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002918:	f043 0220 	orr.w	r2, r3, #32
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2200      	movs	r2, #0
 8002924:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e023      	b.n	8002974 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	0c1b      	lsrs	r3, r3, #16
 8002930:	b2db      	uxtb	r3, r3
 8002932:	2b01      	cmp	r3, #1
 8002934:	d10d      	bne.n	8002952 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	695b      	ldr	r3, [r3, #20]
 800293c:	43da      	mvns	r2, r3
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	4013      	ands	r3, r2
 8002942:	b29b      	uxth	r3, r3
 8002944:	2b00      	cmp	r3, #0
 8002946:	bf0c      	ite	eq
 8002948:	2301      	moveq	r3, #1
 800294a:	2300      	movne	r3, #0
 800294c:	b2db      	uxtb	r3, r3
 800294e:	461a      	mov	r2, r3
 8002950:	e00c      	b.n	800296c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	699b      	ldr	r3, [r3, #24]
 8002958:	43da      	mvns	r2, r3
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	4013      	ands	r3, r2
 800295e:	b29b      	uxth	r3, r3
 8002960:	2b00      	cmp	r3, #0
 8002962:	bf0c      	ite	eq
 8002964:	2301      	moveq	r3, #1
 8002966:	2300      	movne	r3, #0
 8002968:	b2db      	uxtb	r3, r3
 800296a:	461a      	mov	r2, r3
 800296c:	79fb      	ldrb	r3, [r7, #7]
 800296e:	429a      	cmp	r2, r3
 8002970:	d093      	beq.n	800289a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002972:	2300      	movs	r3, #0
}
 8002974:	4618      	mov	r0, r3
 8002976:	3710      	adds	r7, #16
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}

0800297c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b084      	sub	sp, #16
 8002980:	af00      	add	r7, sp, #0
 8002982:	60f8      	str	r0, [r7, #12]
 8002984:	60b9      	str	r1, [r7, #8]
 8002986:	607a      	str	r2, [r7, #4]
 8002988:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800298a:	e071      	b.n	8002a70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	695b      	ldr	r3, [r3, #20]
 8002992:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002996:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800299a:	d123      	bne.n	80029e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029aa:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80029b4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2200      	movs	r2, #0
 80029ba:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2220      	movs	r2, #32
 80029c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2200      	movs	r2, #0
 80029c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029d0:	f043 0204 	orr.w	r2, r3, #4
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2200      	movs	r2, #0
 80029dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e067      	b.n	8002ab4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029ea:	d041      	beq.n	8002a70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029ec:	f7fe fe5e 	bl	80016ac <HAL_GetTick>
 80029f0:	4602      	mov	r2, r0
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d302      	bcc.n	8002a02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d136      	bne.n	8002a70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	0c1b      	lsrs	r3, r3, #16
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d10c      	bne.n	8002a26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	695b      	ldr	r3, [r3, #20]
 8002a12:	43da      	mvns	r2, r3
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	4013      	ands	r3, r2
 8002a18:	b29b      	uxth	r3, r3
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	bf14      	ite	ne
 8002a1e:	2301      	movne	r3, #1
 8002a20:	2300      	moveq	r3, #0
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	e00b      	b.n	8002a3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	699b      	ldr	r3, [r3, #24]
 8002a2c:	43da      	mvns	r2, r3
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	4013      	ands	r3, r2
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	bf14      	ite	ne
 8002a38:	2301      	movne	r3, #1
 8002a3a:	2300      	moveq	r3, #0
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d016      	beq.n	8002a70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2200      	movs	r2, #0
 8002a46:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2220      	movs	r2, #32
 8002a4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2200      	movs	r2, #0
 8002a54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a5c:	f043 0220 	orr.w	r2, r3, #32
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2200      	movs	r2, #0
 8002a68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e021      	b.n	8002ab4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	0c1b      	lsrs	r3, r3, #16
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d10c      	bne.n	8002a94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	695b      	ldr	r3, [r3, #20]
 8002a80:	43da      	mvns	r2, r3
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	4013      	ands	r3, r2
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	bf14      	ite	ne
 8002a8c:	2301      	movne	r3, #1
 8002a8e:	2300      	moveq	r3, #0
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	e00b      	b.n	8002aac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	699b      	ldr	r3, [r3, #24]
 8002a9a:	43da      	mvns	r2, r3
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	b29b      	uxth	r3, r3
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	bf14      	ite	ne
 8002aa6:	2301      	movne	r3, #1
 8002aa8:	2300      	moveq	r3, #0
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	f47f af6d 	bne.w	800298c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002ab2:	2300      	movs	r3, #0
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3710      	adds	r7, #16
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}

08002abc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	60f8      	str	r0, [r7, #12]
 8002ac4:	60b9      	str	r1, [r7, #8]
 8002ac6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ac8:	e034      	b.n	8002b34 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002aca:	68f8      	ldr	r0, [r7, #12]
 8002acc:	f000 f8e3 	bl	8002c96 <I2C_IsAcknowledgeFailed>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d001      	beq.n	8002ada <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e034      	b.n	8002b44 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ae0:	d028      	beq.n	8002b34 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ae2:	f7fe fde3 	bl	80016ac <HAL_GetTick>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	1ad3      	subs	r3, r2, r3
 8002aec:	68ba      	ldr	r2, [r7, #8]
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d302      	bcc.n	8002af8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d11d      	bne.n	8002b34 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	695b      	ldr	r3, [r3, #20]
 8002afe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b02:	2b80      	cmp	r3, #128	@ 0x80
 8002b04:	d016      	beq.n	8002b34 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2220      	movs	r2, #32
 8002b10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2200      	movs	r2, #0
 8002b18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b20:	f043 0220 	orr.w	r2, r3, #32
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e007      	b.n	8002b44 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	695b      	ldr	r3, [r3, #20]
 8002b3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b3e:	2b80      	cmp	r3, #128	@ 0x80
 8002b40:	d1c3      	bne.n	8002aca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002b42:	2300      	movs	r3, #0
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3710      	adds	r7, #16
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b084      	sub	sp, #16
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	60f8      	str	r0, [r7, #12]
 8002b54:	60b9      	str	r1, [r7, #8]
 8002b56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b58:	e034      	b.n	8002bc4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b5a:	68f8      	ldr	r0, [r7, #12]
 8002b5c:	f000 f89b 	bl	8002c96 <I2C_IsAcknowledgeFailed>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d001      	beq.n	8002b6a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e034      	b.n	8002bd4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b70:	d028      	beq.n	8002bc4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b72:	f7fe fd9b 	bl	80016ac <HAL_GetTick>
 8002b76:	4602      	mov	r2, r0
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	68ba      	ldr	r2, [r7, #8]
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d302      	bcc.n	8002b88 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d11d      	bne.n	8002bc4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	695b      	ldr	r3, [r3, #20]
 8002b8e:	f003 0304 	and.w	r3, r3, #4
 8002b92:	2b04      	cmp	r3, #4
 8002b94:	d016      	beq.n	8002bc4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2220      	movs	r2, #32
 8002ba0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bb0:	f043 0220 	orr.w	r2, r3, #32
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e007      	b.n	8002bd4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	695b      	ldr	r3, [r3, #20]
 8002bca:	f003 0304 	and.w	r3, r3, #4
 8002bce:	2b04      	cmp	r3, #4
 8002bd0:	d1c3      	bne.n	8002b5a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002bd2:	2300      	movs	r3, #0
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3710      	adds	r7, #16
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}

08002bdc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b084      	sub	sp, #16
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	60f8      	str	r0, [r7, #12]
 8002be4:	60b9      	str	r1, [r7, #8]
 8002be6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002be8:	e049      	b.n	8002c7e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	695b      	ldr	r3, [r3, #20]
 8002bf0:	f003 0310 	and.w	r3, r3, #16
 8002bf4:	2b10      	cmp	r3, #16
 8002bf6:	d119      	bne.n	8002c2c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f06f 0210 	mvn.w	r2, #16
 8002c00:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2200      	movs	r2, #0
 8002c06:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2220      	movs	r2, #32
 8002c0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2200      	movs	r2, #0
 8002c14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2200      	movs	r2, #0
 8002c24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e030      	b.n	8002c8e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c2c:	f7fe fd3e 	bl	80016ac <HAL_GetTick>
 8002c30:	4602      	mov	r2, r0
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	68ba      	ldr	r2, [r7, #8]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d302      	bcc.n	8002c42 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d11d      	bne.n	8002c7e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	695b      	ldr	r3, [r3, #20]
 8002c48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c4c:	2b40      	cmp	r3, #64	@ 0x40
 8002c4e:	d016      	beq.n	8002c7e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2200      	movs	r2, #0
 8002c54:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2220      	movs	r2, #32
 8002c5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2200      	movs	r2, #0
 8002c62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c6a:	f043 0220 	orr.w	r2, r3, #32
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2200      	movs	r2, #0
 8002c76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e007      	b.n	8002c8e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	695b      	ldr	r3, [r3, #20]
 8002c84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c88:	2b40      	cmp	r3, #64	@ 0x40
 8002c8a:	d1ae      	bne.n	8002bea <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c8c:	2300      	movs	r3, #0
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3710      	adds	r7, #16
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}

08002c96 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002c96:	b480      	push	{r7}
 8002c98:	b083      	sub	sp, #12
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	695b      	ldr	r3, [r3, #20]
 8002ca4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ca8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002cac:	d11b      	bne.n	8002ce6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002cb6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2220      	movs	r2, #32
 8002cc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cd2:	f043 0204 	orr.w	r2, r3, #4
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e000      	b.n	8002ce8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002ce6:	2300      	movs	r3, #0
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	370c      	adds	r7, #12
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr

08002cf4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b086      	sub	sp, #24
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d101      	bne.n	8002d06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e267      	b.n	80031d6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0301 	and.w	r3, r3, #1
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d075      	beq.n	8002dfe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002d12:	4b88      	ldr	r3, [pc, #544]	@ (8002f34 <HAL_RCC_OscConfig+0x240>)
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	f003 030c 	and.w	r3, r3, #12
 8002d1a:	2b04      	cmp	r3, #4
 8002d1c:	d00c      	beq.n	8002d38 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d1e:	4b85      	ldr	r3, [pc, #532]	@ (8002f34 <HAL_RCC_OscConfig+0x240>)
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002d26:	2b08      	cmp	r3, #8
 8002d28:	d112      	bne.n	8002d50 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d2a:	4b82      	ldr	r3, [pc, #520]	@ (8002f34 <HAL_RCC_OscConfig+0x240>)
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d32:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d36:	d10b      	bne.n	8002d50 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d38:	4b7e      	ldr	r3, [pc, #504]	@ (8002f34 <HAL_RCC_OscConfig+0x240>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d05b      	beq.n	8002dfc <HAL_RCC_OscConfig+0x108>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d157      	bne.n	8002dfc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e242      	b.n	80031d6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d58:	d106      	bne.n	8002d68 <HAL_RCC_OscConfig+0x74>
 8002d5a:	4b76      	ldr	r3, [pc, #472]	@ (8002f34 <HAL_RCC_OscConfig+0x240>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a75      	ldr	r2, [pc, #468]	@ (8002f34 <HAL_RCC_OscConfig+0x240>)
 8002d60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d64:	6013      	str	r3, [r2, #0]
 8002d66:	e01d      	b.n	8002da4 <HAL_RCC_OscConfig+0xb0>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d70:	d10c      	bne.n	8002d8c <HAL_RCC_OscConfig+0x98>
 8002d72:	4b70      	ldr	r3, [pc, #448]	@ (8002f34 <HAL_RCC_OscConfig+0x240>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a6f      	ldr	r2, [pc, #444]	@ (8002f34 <HAL_RCC_OscConfig+0x240>)
 8002d78:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d7c:	6013      	str	r3, [r2, #0]
 8002d7e:	4b6d      	ldr	r3, [pc, #436]	@ (8002f34 <HAL_RCC_OscConfig+0x240>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a6c      	ldr	r2, [pc, #432]	@ (8002f34 <HAL_RCC_OscConfig+0x240>)
 8002d84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d88:	6013      	str	r3, [r2, #0]
 8002d8a:	e00b      	b.n	8002da4 <HAL_RCC_OscConfig+0xb0>
 8002d8c:	4b69      	ldr	r3, [pc, #420]	@ (8002f34 <HAL_RCC_OscConfig+0x240>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a68      	ldr	r2, [pc, #416]	@ (8002f34 <HAL_RCC_OscConfig+0x240>)
 8002d92:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d96:	6013      	str	r3, [r2, #0]
 8002d98:	4b66      	ldr	r3, [pc, #408]	@ (8002f34 <HAL_RCC_OscConfig+0x240>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a65      	ldr	r2, [pc, #404]	@ (8002f34 <HAL_RCC_OscConfig+0x240>)
 8002d9e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002da2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d013      	beq.n	8002dd4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dac:	f7fe fc7e 	bl	80016ac <HAL_GetTick>
 8002db0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002db2:	e008      	b.n	8002dc6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002db4:	f7fe fc7a 	bl	80016ac <HAL_GetTick>
 8002db8:	4602      	mov	r2, r0
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	2b64      	cmp	r3, #100	@ 0x64
 8002dc0:	d901      	bls.n	8002dc6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e207      	b.n	80031d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dc6:	4b5b      	ldr	r3, [pc, #364]	@ (8002f34 <HAL_RCC_OscConfig+0x240>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d0f0      	beq.n	8002db4 <HAL_RCC_OscConfig+0xc0>
 8002dd2:	e014      	b.n	8002dfe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dd4:	f7fe fc6a 	bl	80016ac <HAL_GetTick>
 8002dd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dda:	e008      	b.n	8002dee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ddc:	f7fe fc66 	bl	80016ac <HAL_GetTick>
 8002de0:	4602      	mov	r2, r0
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	2b64      	cmp	r3, #100	@ 0x64
 8002de8:	d901      	bls.n	8002dee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e1f3      	b.n	80031d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dee:	4b51      	ldr	r3, [pc, #324]	@ (8002f34 <HAL_RCC_OscConfig+0x240>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d1f0      	bne.n	8002ddc <HAL_RCC_OscConfig+0xe8>
 8002dfa:	e000      	b.n	8002dfe <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0302 	and.w	r3, r3, #2
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d063      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002e0a:	4b4a      	ldr	r3, [pc, #296]	@ (8002f34 <HAL_RCC_OscConfig+0x240>)
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	f003 030c 	and.w	r3, r3, #12
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d00b      	beq.n	8002e2e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e16:	4b47      	ldr	r3, [pc, #284]	@ (8002f34 <HAL_RCC_OscConfig+0x240>)
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002e1e:	2b08      	cmp	r3, #8
 8002e20:	d11c      	bne.n	8002e5c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e22:	4b44      	ldr	r3, [pc, #272]	@ (8002f34 <HAL_RCC_OscConfig+0x240>)
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d116      	bne.n	8002e5c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e2e:	4b41      	ldr	r3, [pc, #260]	@ (8002f34 <HAL_RCC_OscConfig+0x240>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0302 	and.w	r3, r3, #2
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d005      	beq.n	8002e46 <HAL_RCC_OscConfig+0x152>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	68db      	ldr	r3, [r3, #12]
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d001      	beq.n	8002e46 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e1c7      	b.n	80031d6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e46:	4b3b      	ldr	r3, [pc, #236]	@ (8002f34 <HAL_RCC_OscConfig+0x240>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	691b      	ldr	r3, [r3, #16]
 8002e52:	00db      	lsls	r3, r3, #3
 8002e54:	4937      	ldr	r1, [pc, #220]	@ (8002f34 <HAL_RCC_OscConfig+0x240>)
 8002e56:	4313      	orrs	r3, r2
 8002e58:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e5a:	e03a      	b.n	8002ed2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d020      	beq.n	8002ea6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e64:	4b34      	ldr	r3, [pc, #208]	@ (8002f38 <HAL_RCC_OscConfig+0x244>)
 8002e66:	2201      	movs	r2, #1
 8002e68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e6a:	f7fe fc1f 	bl	80016ac <HAL_GetTick>
 8002e6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e70:	e008      	b.n	8002e84 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e72:	f7fe fc1b 	bl	80016ac <HAL_GetTick>
 8002e76:	4602      	mov	r2, r0
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	2b02      	cmp	r3, #2
 8002e7e:	d901      	bls.n	8002e84 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e80:	2303      	movs	r3, #3
 8002e82:	e1a8      	b.n	80031d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e84:	4b2b      	ldr	r3, [pc, #172]	@ (8002f34 <HAL_RCC_OscConfig+0x240>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0302 	and.w	r3, r3, #2
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d0f0      	beq.n	8002e72 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e90:	4b28      	ldr	r3, [pc, #160]	@ (8002f34 <HAL_RCC_OscConfig+0x240>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	691b      	ldr	r3, [r3, #16]
 8002e9c:	00db      	lsls	r3, r3, #3
 8002e9e:	4925      	ldr	r1, [pc, #148]	@ (8002f34 <HAL_RCC_OscConfig+0x240>)
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	600b      	str	r3, [r1, #0]
 8002ea4:	e015      	b.n	8002ed2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ea6:	4b24      	ldr	r3, [pc, #144]	@ (8002f38 <HAL_RCC_OscConfig+0x244>)
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eac:	f7fe fbfe 	bl	80016ac <HAL_GetTick>
 8002eb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eb2:	e008      	b.n	8002ec6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002eb4:	f7fe fbfa 	bl	80016ac <HAL_GetTick>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	2b02      	cmp	r3, #2
 8002ec0:	d901      	bls.n	8002ec6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e187      	b.n	80031d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ec6:	4b1b      	ldr	r3, [pc, #108]	@ (8002f34 <HAL_RCC_OscConfig+0x240>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0302 	and.w	r3, r3, #2
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d1f0      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0308 	and.w	r3, r3, #8
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d036      	beq.n	8002f4c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	695b      	ldr	r3, [r3, #20]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d016      	beq.n	8002f14 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ee6:	4b15      	ldr	r3, [pc, #84]	@ (8002f3c <HAL_RCC_OscConfig+0x248>)
 8002ee8:	2201      	movs	r2, #1
 8002eea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eec:	f7fe fbde 	bl	80016ac <HAL_GetTick>
 8002ef0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ef2:	e008      	b.n	8002f06 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ef4:	f7fe fbda 	bl	80016ac <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	d901      	bls.n	8002f06 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e167      	b.n	80031d6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f06:	4b0b      	ldr	r3, [pc, #44]	@ (8002f34 <HAL_RCC_OscConfig+0x240>)
 8002f08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f0a:	f003 0302 	and.w	r3, r3, #2
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d0f0      	beq.n	8002ef4 <HAL_RCC_OscConfig+0x200>
 8002f12:	e01b      	b.n	8002f4c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f14:	4b09      	ldr	r3, [pc, #36]	@ (8002f3c <HAL_RCC_OscConfig+0x248>)
 8002f16:	2200      	movs	r2, #0
 8002f18:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f1a:	f7fe fbc7 	bl	80016ac <HAL_GetTick>
 8002f1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f20:	e00e      	b.n	8002f40 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f22:	f7fe fbc3 	bl	80016ac <HAL_GetTick>
 8002f26:	4602      	mov	r2, r0
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	2b02      	cmp	r3, #2
 8002f2e:	d907      	bls.n	8002f40 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f30:	2303      	movs	r3, #3
 8002f32:	e150      	b.n	80031d6 <HAL_RCC_OscConfig+0x4e2>
 8002f34:	40023800 	.word	0x40023800
 8002f38:	42470000 	.word	0x42470000
 8002f3c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f40:	4b88      	ldr	r3, [pc, #544]	@ (8003164 <HAL_RCC_OscConfig+0x470>)
 8002f42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f44:	f003 0302 	and.w	r3, r3, #2
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d1ea      	bne.n	8002f22 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0304 	and.w	r3, r3, #4
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	f000 8097 	beq.w	8003088 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f5e:	4b81      	ldr	r3, [pc, #516]	@ (8003164 <HAL_RCC_OscConfig+0x470>)
 8002f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d10f      	bne.n	8002f8a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	60bb      	str	r3, [r7, #8]
 8002f6e:	4b7d      	ldr	r3, [pc, #500]	@ (8003164 <HAL_RCC_OscConfig+0x470>)
 8002f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f72:	4a7c      	ldr	r2, [pc, #496]	@ (8003164 <HAL_RCC_OscConfig+0x470>)
 8002f74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f78:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f7a:	4b7a      	ldr	r3, [pc, #488]	@ (8003164 <HAL_RCC_OscConfig+0x470>)
 8002f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f82:	60bb      	str	r3, [r7, #8]
 8002f84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f86:	2301      	movs	r3, #1
 8002f88:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f8a:	4b77      	ldr	r3, [pc, #476]	@ (8003168 <HAL_RCC_OscConfig+0x474>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d118      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f96:	4b74      	ldr	r3, [pc, #464]	@ (8003168 <HAL_RCC_OscConfig+0x474>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a73      	ldr	r2, [pc, #460]	@ (8003168 <HAL_RCC_OscConfig+0x474>)
 8002f9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fa0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fa2:	f7fe fb83 	bl	80016ac <HAL_GetTick>
 8002fa6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fa8:	e008      	b.n	8002fbc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002faa:	f7fe fb7f 	bl	80016ac <HAL_GetTick>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	2b02      	cmp	r3, #2
 8002fb6:	d901      	bls.n	8002fbc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002fb8:	2303      	movs	r3, #3
 8002fba:	e10c      	b.n	80031d6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fbc:	4b6a      	ldr	r3, [pc, #424]	@ (8003168 <HAL_RCC_OscConfig+0x474>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d0f0      	beq.n	8002faa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d106      	bne.n	8002fde <HAL_RCC_OscConfig+0x2ea>
 8002fd0:	4b64      	ldr	r3, [pc, #400]	@ (8003164 <HAL_RCC_OscConfig+0x470>)
 8002fd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fd4:	4a63      	ldr	r2, [pc, #396]	@ (8003164 <HAL_RCC_OscConfig+0x470>)
 8002fd6:	f043 0301 	orr.w	r3, r3, #1
 8002fda:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fdc:	e01c      	b.n	8003018 <HAL_RCC_OscConfig+0x324>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	2b05      	cmp	r3, #5
 8002fe4:	d10c      	bne.n	8003000 <HAL_RCC_OscConfig+0x30c>
 8002fe6:	4b5f      	ldr	r3, [pc, #380]	@ (8003164 <HAL_RCC_OscConfig+0x470>)
 8002fe8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fea:	4a5e      	ldr	r2, [pc, #376]	@ (8003164 <HAL_RCC_OscConfig+0x470>)
 8002fec:	f043 0304 	orr.w	r3, r3, #4
 8002ff0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ff2:	4b5c      	ldr	r3, [pc, #368]	@ (8003164 <HAL_RCC_OscConfig+0x470>)
 8002ff4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ff6:	4a5b      	ldr	r2, [pc, #364]	@ (8003164 <HAL_RCC_OscConfig+0x470>)
 8002ff8:	f043 0301 	orr.w	r3, r3, #1
 8002ffc:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ffe:	e00b      	b.n	8003018 <HAL_RCC_OscConfig+0x324>
 8003000:	4b58      	ldr	r3, [pc, #352]	@ (8003164 <HAL_RCC_OscConfig+0x470>)
 8003002:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003004:	4a57      	ldr	r2, [pc, #348]	@ (8003164 <HAL_RCC_OscConfig+0x470>)
 8003006:	f023 0301 	bic.w	r3, r3, #1
 800300a:	6713      	str	r3, [r2, #112]	@ 0x70
 800300c:	4b55      	ldr	r3, [pc, #340]	@ (8003164 <HAL_RCC_OscConfig+0x470>)
 800300e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003010:	4a54      	ldr	r2, [pc, #336]	@ (8003164 <HAL_RCC_OscConfig+0x470>)
 8003012:	f023 0304 	bic.w	r3, r3, #4
 8003016:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d015      	beq.n	800304c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003020:	f7fe fb44 	bl	80016ac <HAL_GetTick>
 8003024:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003026:	e00a      	b.n	800303e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003028:	f7fe fb40 	bl	80016ac <HAL_GetTick>
 800302c:	4602      	mov	r2, r0
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003036:	4293      	cmp	r3, r2
 8003038:	d901      	bls.n	800303e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e0cb      	b.n	80031d6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800303e:	4b49      	ldr	r3, [pc, #292]	@ (8003164 <HAL_RCC_OscConfig+0x470>)
 8003040:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003042:	f003 0302 	and.w	r3, r3, #2
 8003046:	2b00      	cmp	r3, #0
 8003048:	d0ee      	beq.n	8003028 <HAL_RCC_OscConfig+0x334>
 800304a:	e014      	b.n	8003076 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800304c:	f7fe fb2e 	bl	80016ac <HAL_GetTick>
 8003050:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003052:	e00a      	b.n	800306a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003054:	f7fe fb2a 	bl	80016ac <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003062:	4293      	cmp	r3, r2
 8003064:	d901      	bls.n	800306a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	e0b5      	b.n	80031d6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800306a:	4b3e      	ldr	r3, [pc, #248]	@ (8003164 <HAL_RCC_OscConfig+0x470>)
 800306c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800306e:	f003 0302 	and.w	r3, r3, #2
 8003072:	2b00      	cmp	r3, #0
 8003074:	d1ee      	bne.n	8003054 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003076:	7dfb      	ldrb	r3, [r7, #23]
 8003078:	2b01      	cmp	r3, #1
 800307a:	d105      	bne.n	8003088 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800307c:	4b39      	ldr	r3, [pc, #228]	@ (8003164 <HAL_RCC_OscConfig+0x470>)
 800307e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003080:	4a38      	ldr	r2, [pc, #224]	@ (8003164 <HAL_RCC_OscConfig+0x470>)
 8003082:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003086:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	699b      	ldr	r3, [r3, #24]
 800308c:	2b00      	cmp	r3, #0
 800308e:	f000 80a1 	beq.w	80031d4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003092:	4b34      	ldr	r3, [pc, #208]	@ (8003164 <HAL_RCC_OscConfig+0x470>)
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	f003 030c 	and.w	r3, r3, #12
 800309a:	2b08      	cmp	r3, #8
 800309c:	d05c      	beq.n	8003158 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	699b      	ldr	r3, [r3, #24]
 80030a2:	2b02      	cmp	r3, #2
 80030a4:	d141      	bne.n	800312a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030a6:	4b31      	ldr	r3, [pc, #196]	@ (800316c <HAL_RCC_OscConfig+0x478>)
 80030a8:	2200      	movs	r2, #0
 80030aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ac:	f7fe fafe 	bl	80016ac <HAL_GetTick>
 80030b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030b2:	e008      	b.n	80030c6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030b4:	f7fe fafa 	bl	80016ac <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	2b02      	cmp	r3, #2
 80030c0:	d901      	bls.n	80030c6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e087      	b.n	80031d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030c6:	4b27      	ldr	r3, [pc, #156]	@ (8003164 <HAL_RCC_OscConfig+0x470>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d1f0      	bne.n	80030b4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	69da      	ldr	r2, [r3, #28]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6a1b      	ldr	r3, [r3, #32]
 80030da:	431a      	orrs	r2, r3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030e0:	019b      	lsls	r3, r3, #6
 80030e2:	431a      	orrs	r2, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030e8:	085b      	lsrs	r3, r3, #1
 80030ea:	3b01      	subs	r3, #1
 80030ec:	041b      	lsls	r3, r3, #16
 80030ee:	431a      	orrs	r2, r3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030f4:	061b      	lsls	r3, r3, #24
 80030f6:	491b      	ldr	r1, [pc, #108]	@ (8003164 <HAL_RCC_OscConfig+0x470>)
 80030f8:	4313      	orrs	r3, r2
 80030fa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030fc:	4b1b      	ldr	r3, [pc, #108]	@ (800316c <HAL_RCC_OscConfig+0x478>)
 80030fe:	2201      	movs	r2, #1
 8003100:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003102:	f7fe fad3 	bl	80016ac <HAL_GetTick>
 8003106:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003108:	e008      	b.n	800311c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800310a:	f7fe facf 	bl	80016ac <HAL_GetTick>
 800310e:	4602      	mov	r2, r0
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	2b02      	cmp	r3, #2
 8003116:	d901      	bls.n	800311c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003118:	2303      	movs	r3, #3
 800311a:	e05c      	b.n	80031d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800311c:	4b11      	ldr	r3, [pc, #68]	@ (8003164 <HAL_RCC_OscConfig+0x470>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003124:	2b00      	cmp	r3, #0
 8003126:	d0f0      	beq.n	800310a <HAL_RCC_OscConfig+0x416>
 8003128:	e054      	b.n	80031d4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800312a:	4b10      	ldr	r3, [pc, #64]	@ (800316c <HAL_RCC_OscConfig+0x478>)
 800312c:	2200      	movs	r2, #0
 800312e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003130:	f7fe fabc 	bl	80016ac <HAL_GetTick>
 8003134:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003136:	e008      	b.n	800314a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003138:	f7fe fab8 	bl	80016ac <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	2b02      	cmp	r3, #2
 8003144:	d901      	bls.n	800314a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e045      	b.n	80031d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800314a:	4b06      	ldr	r3, [pc, #24]	@ (8003164 <HAL_RCC_OscConfig+0x470>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d1f0      	bne.n	8003138 <HAL_RCC_OscConfig+0x444>
 8003156:	e03d      	b.n	80031d4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	699b      	ldr	r3, [r3, #24]
 800315c:	2b01      	cmp	r3, #1
 800315e:	d107      	bne.n	8003170 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	e038      	b.n	80031d6 <HAL_RCC_OscConfig+0x4e2>
 8003164:	40023800 	.word	0x40023800
 8003168:	40007000 	.word	0x40007000
 800316c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003170:	4b1b      	ldr	r3, [pc, #108]	@ (80031e0 <HAL_RCC_OscConfig+0x4ec>)
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	699b      	ldr	r3, [r3, #24]
 800317a:	2b01      	cmp	r3, #1
 800317c:	d028      	beq.n	80031d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003188:	429a      	cmp	r2, r3
 800318a:	d121      	bne.n	80031d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003196:	429a      	cmp	r2, r3
 8003198:	d11a      	bne.n	80031d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800319a:	68fa      	ldr	r2, [r7, #12]
 800319c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80031a0:	4013      	ands	r3, r2
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80031a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d111      	bne.n	80031d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031b6:	085b      	lsrs	r3, r3, #1
 80031b8:	3b01      	subs	r3, #1
 80031ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031bc:	429a      	cmp	r2, r3
 80031be:	d107      	bne.n	80031d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d001      	beq.n	80031d4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e000      	b.n	80031d6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80031d4:	2300      	movs	r3, #0
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3718      	adds	r7, #24
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	40023800 	.word	0x40023800

080031e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b084      	sub	sp, #16
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d101      	bne.n	80031f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e0cc      	b.n	8003392 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031f8:	4b68      	ldr	r3, [pc, #416]	@ (800339c <HAL_RCC_ClockConfig+0x1b8>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0307 	and.w	r3, r3, #7
 8003200:	683a      	ldr	r2, [r7, #0]
 8003202:	429a      	cmp	r2, r3
 8003204:	d90c      	bls.n	8003220 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003206:	4b65      	ldr	r3, [pc, #404]	@ (800339c <HAL_RCC_ClockConfig+0x1b8>)
 8003208:	683a      	ldr	r2, [r7, #0]
 800320a:	b2d2      	uxtb	r2, r2
 800320c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800320e:	4b63      	ldr	r3, [pc, #396]	@ (800339c <HAL_RCC_ClockConfig+0x1b8>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 0307 	and.w	r3, r3, #7
 8003216:	683a      	ldr	r2, [r7, #0]
 8003218:	429a      	cmp	r2, r3
 800321a:	d001      	beq.n	8003220 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e0b8      	b.n	8003392 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0302 	and.w	r3, r3, #2
 8003228:	2b00      	cmp	r3, #0
 800322a:	d020      	beq.n	800326e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0304 	and.w	r3, r3, #4
 8003234:	2b00      	cmp	r3, #0
 8003236:	d005      	beq.n	8003244 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003238:	4b59      	ldr	r3, [pc, #356]	@ (80033a0 <HAL_RCC_ClockConfig+0x1bc>)
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	4a58      	ldr	r2, [pc, #352]	@ (80033a0 <HAL_RCC_ClockConfig+0x1bc>)
 800323e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003242:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0308 	and.w	r3, r3, #8
 800324c:	2b00      	cmp	r3, #0
 800324e:	d005      	beq.n	800325c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003250:	4b53      	ldr	r3, [pc, #332]	@ (80033a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	4a52      	ldr	r2, [pc, #328]	@ (80033a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003256:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800325a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800325c:	4b50      	ldr	r3, [pc, #320]	@ (80033a0 <HAL_RCC_ClockConfig+0x1bc>)
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	494d      	ldr	r1, [pc, #308]	@ (80033a0 <HAL_RCC_ClockConfig+0x1bc>)
 800326a:	4313      	orrs	r3, r2
 800326c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0301 	and.w	r3, r3, #1
 8003276:	2b00      	cmp	r3, #0
 8003278:	d044      	beq.n	8003304 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	2b01      	cmp	r3, #1
 8003280:	d107      	bne.n	8003292 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003282:	4b47      	ldr	r3, [pc, #284]	@ (80033a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800328a:	2b00      	cmp	r3, #0
 800328c:	d119      	bne.n	80032c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e07f      	b.n	8003392 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	2b02      	cmp	r3, #2
 8003298:	d003      	beq.n	80032a2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800329e:	2b03      	cmp	r3, #3
 80032a0:	d107      	bne.n	80032b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032a2:	4b3f      	ldr	r3, [pc, #252]	@ (80033a0 <HAL_RCC_ClockConfig+0x1bc>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d109      	bne.n	80032c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e06f      	b.n	8003392 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032b2:	4b3b      	ldr	r3, [pc, #236]	@ (80033a0 <HAL_RCC_ClockConfig+0x1bc>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0302 	and.w	r3, r3, #2
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d101      	bne.n	80032c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e067      	b.n	8003392 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032c2:	4b37      	ldr	r3, [pc, #220]	@ (80033a0 <HAL_RCC_ClockConfig+0x1bc>)
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	f023 0203 	bic.w	r2, r3, #3
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	4934      	ldr	r1, [pc, #208]	@ (80033a0 <HAL_RCC_ClockConfig+0x1bc>)
 80032d0:	4313      	orrs	r3, r2
 80032d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032d4:	f7fe f9ea 	bl	80016ac <HAL_GetTick>
 80032d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032da:	e00a      	b.n	80032f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032dc:	f7fe f9e6 	bl	80016ac <HAL_GetTick>
 80032e0:	4602      	mov	r2, r0
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d901      	bls.n	80032f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	e04f      	b.n	8003392 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032f2:	4b2b      	ldr	r3, [pc, #172]	@ (80033a0 <HAL_RCC_ClockConfig+0x1bc>)
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	f003 020c 	and.w	r2, r3, #12
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	429a      	cmp	r2, r3
 8003302:	d1eb      	bne.n	80032dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003304:	4b25      	ldr	r3, [pc, #148]	@ (800339c <HAL_RCC_ClockConfig+0x1b8>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0307 	and.w	r3, r3, #7
 800330c:	683a      	ldr	r2, [r7, #0]
 800330e:	429a      	cmp	r2, r3
 8003310:	d20c      	bcs.n	800332c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003312:	4b22      	ldr	r3, [pc, #136]	@ (800339c <HAL_RCC_ClockConfig+0x1b8>)
 8003314:	683a      	ldr	r2, [r7, #0]
 8003316:	b2d2      	uxtb	r2, r2
 8003318:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800331a:	4b20      	ldr	r3, [pc, #128]	@ (800339c <HAL_RCC_ClockConfig+0x1b8>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0307 	and.w	r3, r3, #7
 8003322:	683a      	ldr	r2, [r7, #0]
 8003324:	429a      	cmp	r2, r3
 8003326:	d001      	beq.n	800332c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	e032      	b.n	8003392 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0304 	and.w	r3, r3, #4
 8003334:	2b00      	cmp	r3, #0
 8003336:	d008      	beq.n	800334a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003338:	4b19      	ldr	r3, [pc, #100]	@ (80033a0 <HAL_RCC_ClockConfig+0x1bc>)
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	4916      	ldr	r1, [pc, #88]	@ (80033a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003346:	4313      	orrs	r3, r2
 8003348:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0308 	and.w	r3, r3, #8
 8003352:	2b00      	cmp	r3, #0
 8003354:	d009      	beq.n	800336a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003356:	4b12      	ldr	r3, [pc, #72]	@ (80033a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	691b      	ldr	r3, [r3, #16]
 8003362:	00db      	lsls	r3, r3, #3
 8003364:	490e      	ldr	r1, [pc, #56]	@ (80033a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003366:	4313      	orrs	r3, r2
 8003368:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800336a:	f000 f821 	bl	80033b0 <HAL_RCC_GetSysClockFreq>
 800336e:	4602      	mov	r2, r0
 8003370:	4b0b      	ldr	r3, [pc, #44]	@ (80033a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	091b      	lsrs	r3, r3, #4
 8003376:	f003 030f 	and.w	r3, r3, #15
 800337a:	490a      	ldr	r1, [pc, #40]	@ (80033a4 <HAL_RCC_ClockConfig+0x1c0>)
 800337c:	5ccb      	ldrb	r3, [r1, r3]
 800337e:	fa22 f303 	lsr.w	r3, r2, r3
 8003382:	4a09      	ldr	r2, [pc, #36]	@ (80033a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003384:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003386:	4b09      	ldr	r3, [pc, #36]	@ (80033ac <HAL_RCC_ClockConfig+0x1c8>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4618      	mov	r0, r3
 800338c:	f7fe f94a 	bl	8001624 <HAL_InitTick>

  return HAL_OK;
 8003390:	2300      	movs	r3, #0
}
 8003392:	4618      	mov	r0, r3
 8003394:	3710      	adds	r7, #16
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	40023c00 	.word	0x40023c00
 80033a0:	40023800 	.word	0x40023800
 80033a4:	080082e4 	.word	0x080082e4
 80033a8:	20000004 	.word	0x20000004
 80033ac:	20000008 	.word	0x20000008

080033b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033b4:	b094      	sub	sp, #80	@ 0x50
 80033b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80033b8:	2300      	movs	r3, #0
 80033ba:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80033bc:	2300      	movs	r3, #0
 80033be:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80033c0:	2300      	movs	r3, #0
 80033c2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80033c4:	2300      	movs	r3, #0
 80033c6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033c8:	4b79      	ldr	r3, [pc, #484]	@ (80035b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	f003 030c 	and.w	r3, r3, #12
 80033d0:	2b08      	cmp	r3, #8
 80033d2:	d00d      	beq.n	80033f0 <HAL_RCC_GetSysClockFreq+0x40>
 80033d4:	2b08      	cmp	r3, #8
 80033d6:	f200 80e1 	bhi.w	800359c <HAL_RCC_GetSysClockFreq+0x1ec>
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d002      	beq.n	80033e4 <HAL_RCC_GetSysClockFreq+0x34>
 80033de:	2b04      	cmp	r3, #4
 80033e0:	d003      	beq.n	80033ea <HAL_RCC_GetSysClockFreq+0x3a>
 80033e2:	e0db      	b.n	800359c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033e4:	4b73      	ldr	r3, [pc, #460]	@ (80035b4 <HAL_RCC_GetSysClockFreq+0x204>)
 80033e6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80033e8:	e0db      	b.n	80035a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033ea:	4b73      	ldr	r3, [pc, #460]	@ (80035b8 <HAL_RCC_GetSysClockFreq+0x208>)
 80033ec:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80033ee:	e0d8      	b.n	80035a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033f0:	4b6f      	ldr	r3, [pc, #444]	@ (80035b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80033f8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033fa:	4b6d      	ldr	r3, [pc, #436]	@ (80035b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d063      	beq.n	80034ce <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003406:	4b6a      	ldr	r3, [pc, #424]	@ (80035b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	099b      	lsrs	r3, r3, #6
 800340c:	2200      	movs	r2, #0
 800340e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003410:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003412:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003414:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003418:	633b      	str	r3, [r7, #48]	@ 0x30
 800341a:	2300      	movs	r3, #0
 800341c:	637b      	str	r3, [r7, #52]	@ 0x34
 800341e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003422:	4622      	mov	r2, r4
 8003424:	462b      	mov	r3, r5
 8003426:	f04f 0000 	mov.w	r0, #0
 800342a:	f04f 0100 	mov.w	r1, #0
 800342e:	0159      	lsls	r1, r3, #5
 8003430:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003434:	0150      	lsls	r0, r2, #5
 8003436:	4602      	mov	r2, r0
 8003438:	460b      	mov	r3, r1
 800343a:	4621      	mov	r1, r4
 800343c:	1a51      	subs	r1, r2, r1
 800343e:	6139      	str	r1, [r7, #16]
 8003440:	4629      	mov	r1, r5
 8003442:	eb63 0301 	sbc.w	r3, r3, r1
 8003446:	617b      	str	r3, [r7, #20]
 8003448:	f04f 0200 	mov.w	r2, #0
 800344c:	f04f 0300 	mov.w	r3, #0
 8003450:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003454:	4659      	mov	r1, fp
 8003456:	018b      	lsls	r3, r1, #6
 8003458:	4651      	mov	r1, sl
 800345a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800345e:	4651      	mov	r1, sl
 8003460:	018a      	lsls	r2, r1, #6
 8003462:	4651      	mov	r1, sl
 8003464:	ebb2 0801 	subs.w	r8, r2, r1
 8003468:	4659      	mov	r1, fp
 800346a:	eb63 0901 	sbc.w	r9, r3, r1
 800346e:	f04f 0200 	mov.w	r2, #0
 8003472:	f04f 0300 	mov.w	r3, #0
 8003476:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800347a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800347e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003482:	4690      	mov	r8, r2
 8003484:	4699      	mov	r9, r3
 8003486:	4623      	mov	r3, r4
 8003488:	eb18 0303 	adds.w	r3, r8, r3
 800348c:	60bb      	str	r3, [r7, #8]
 800348e:	462b      	mov	r3, r5
 8003490:	eb49 0303 	adc.w	r3, r9, r3
 8003494:	60fb      	str	r3, [r7, #12]
 8003496:	f04f 0200 	mov.w	r2, #0
 800349a:	f04f 0300 	mov.w	r3, #0
 800349e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80034a2:	4629      	mov	r1, r5
 80034a4:	024b      	lsls	r3, r1, #9
 80034a6:	4621      	mov	r1, r4
 80034a8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80034ac:	4621      	mov	r1, r4
 80034ae:	024a      	lsls	r2, r1, #9
 80034b0:	4610      	mov	r0, r2
 80034b2:	4619      	mov	r1, r3
 80034b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80034b6:	2200      	movs	r2, #0
 80034b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80034ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80034bc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80034c0:	f7fc fe86 	bl	80001d0 <__aeabi_uldivmod>
 80034c4:	4602      	mov	r2, r0
 80034c6:	460b      	mov	r3, r1
 80034c8:	4613      	mov	r3, r2
 80034ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80034cc:	e058      	b.n	8003580 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034ce:	4b38      	ldr	r3, [pc, #224]	@ (80035b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	099b      	lsrs	r3, r3, #6
 80034d4:	2200      	movs	r2, #0
 80034d6:	4618      	mov	r0, r3
 80034d8:	4611      	mov	r1, r2
 80034da:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80034de:	623b      	str	r3, [r7, #32]
 80034e0:	2300      	movs	r3, #0
 80034e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80034e4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80034e8:	4642      	mov	r2, r8
 80034ea:	464b      	mov	r3, r9
 80034ec:	f04f 0000 	mov.w	r0, #0
 80034f0:	f04f 0100 	mov.w	r1, #0
 80034f4:	0159      	lsls	r1, r3, #5
 80034f6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034fa:	0150      	lsls	r0, r2, #5
 80034fc:	4602      	mov	r2, r0
 80034fe:	460b      	mov	r3, r1
 8003500:	4641      	mov	r1, r8
 8003502:	ebb2 0a01 	subs.w	sl, r2, r1
 8003506:	4649      	mov	r1, r9
 8003508:	eb63 0b01 	sbc.w	fp, r3, r1
 800350c:	f04f 0200 	mov.w	r2, #0
 8003510:	f04f 0300 	mov.w	r3, #0
 8003514:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003518:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800351c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003520:	ebb2 040a 	subs.w	r4, r2, sl
 8003524:	eb63 050b 	sbc.w	r5, r3, fp
 8003528:	f04f 0200 	mov.w	r2, #0
 800352c:	f04f 0300 	mov.w	r3, #0
 8003530:	00eb      	lsls	r3, r5, #3
 8003532:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003536:	00e2      	lsls	r2, r4, #3
 8003538:	4614      	mov	r4, r2
 800353a:	461d      	mov	r5, r3
 800353c:	4643      	mov	r3, r8
 800353e:	18e3      	adds	r3, r4, r3
 8003540:	603b      	str	r3, [r7, #0]
 8003542:	464b      	mov	r3, r9
 8003544:	eb45 0303 	adc.w	r3, r5, r3
 8003548:	607b      	str	r3, [r7, #4]
 800354a:	f04f 0200 	mov.w	r2, #0
 800354e:	f04f 0300 	mov.w	r3, #0
 8003552:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003556:	4629      	mov	r1, r5
 8003558:	028b      	lsls	r3, r1, #10
 800355a:	4621      	mov	r1, r4
 800355c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003560:	4621      	mov	r1, r4
 8003562:	028a      	lsls	r2, r1, #10
 8003564:	4610      	mov	r0, r2
 8003566:	4619      	mov	r1, r3
 8003568:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800356a:	2200      	movs	r2, #0
 800356c:	61bb      	str	r3, [r7, #24]
 800356e:	61fa      	str	r2, [r7, #28]
 8003570:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003574:	f7fc fe2c 	bl	80001d0 <__aeabi_uldivmod>
 8003578:	4602      	mov	r2, r0
 800357a:	460b      	mov	r3, r1
 800357c:	4613      	mov	r3, r2
 800357e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003580:	4b0b      	ldr	r3, [pc, #44]	@ (80035b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	0c1b      	lsrs	r3, r3, #16
 8003586:	f003 0303 	and.w	r3, r3, #3
 800358a:	3301      	adds	r3, #1
 800358c:	005b      	lsls	r3, r3, #1
 800358e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003590:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003592:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003594:	fbb2 f3f3 	udiv	r3, r2, r3
 8003598:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800359a:	e002      	b.n	80035a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800359c:	4b05      	ldr	r3, [pc, #20]	@ (80035b4 <HAL_RCC_GetSysClockFreq+0x204>)
 800359e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80035a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3750      	adds	r7, #80	@ 0x50
 80035a8:	46bd      	mov	sp, r7
 80035aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035ae:	bf00      	nop
 80035b0:	40023800 	.word	0x40023800
 80035b4:	00f42400 	.word	0x00f42400
 80035b8:	007a1200 	.word	0x007a1200

080035bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035bc:	b480      	push	{r7}
 80035be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035c0:	4b03      	ldr	r3, [pc, #12]	@ (80035d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80035c2:	681b      	ldr	r3, [r3, #0]
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr
 80035ce:	bf00      	nop
 80035d0:	20000004 	.word	0x20000004

080035d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80035d8:	f7ff fff0 	bl	80035bc <HAL_RCC_GetHCLKFreq>
 80035dc:	4602      	mov	r2, r0
 80035de:	4b05      	ldr	r3, [pc, #20]	@ (80035f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	0a9b      	lsrs	r3, r3, #10
 80035e4:	f003 0307 	and.w	r3, r3, #7
 80035e8:	4903      	ldr	r1, [pc, #12]	@ (80035f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035ea:	5ccb      	ldrb	r3, [r1, r3]
 80035ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	bd80      	pop	{r7, pc}
 80035f4:	40023800 	.word	0x40023800
 80035f8:	080082f4 	.word	0x080082f4

080035fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b082      	sub	sp, #8
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d101      	bne.n	800360e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e041      	b.n	8003692 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003614:	b2db      	uxtb	r3, r3
 8003616:	2b00      	cmp	r3, #0
 8003618:	d106      	bne.n	8003628 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f7fd fec8 	bl	80013b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2202      	movs	r2, #2
 800362c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	3304      	adds	r3, #4
 8003638:	4619      	mov	r1, r3
 800363a:	4610      	mov	r0, r2
 800363c:	f000 fe52 	bl	80042e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2201      	movs	r2, #1
 8003644:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2201      	movs	r2, #1
 800364c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2201      	movs	r2, #1
 8003654:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2201      	movs	r2, #1
 800365c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2201      	movs	r2, #1
 8003664:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2201      	movs	r2, #1
 800366c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2201      	movs	r2, #1
 8003674:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2201      	movs	r2, #1
 800367c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2201      	movs	r2, #1
 8003684:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2201      	movs	r2, #1
 800368c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003690:	2300      	movs	r3, #0
}
 8003692:	4618      	mov	r0, r3
 8003694:	3708      	adds	r7, #8
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}

0800369a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800369a:	b580      	push	{r7, lr}
 800369c:	b082      	sub	sp, #8
 800369e:	af00      	add	r7, sp, #0
 80036a0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d101      	bne.n	80036ac <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	e041      	b.n	8003730 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d106      	bne.n	80036c6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2200      	movs	r2, #0
 80036bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	f000 f839 	bl	8003738 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2202      	movs	r2, #2
 80036ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	3304      	adds	r3, #4
 80036d6:	4619      	mov	r1, r3
 80036d8:	4610      	mov	r0, r2
 80036da:	f000 fe03 	bl	80042e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2201      	movs	r2, #1
 80036e2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2201      	movs	r2, #1
 80036ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2201      	movs	r2, #1
 80036f2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2201      	movs	r2, #1
 80036fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2201      	movs	r2, #1
 8003702:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2201      	movs	r2, #1
 800370a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2201      	movs	r2, #1
 8003712:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2201      	movs	r2, #1
 800371a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2201      	movs	r2, #1
 8003722:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2201      	movs	r2, #1
 800372a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800372e:	2300      	movs	r3, #0
}
 8003730:	4618      	mov	r0, r3
 8003732:	3708      	adds	r7, #8
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}

08003738 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003740:	bf00      	nop
 8003742:	370c      	adds	r7, #12
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr

0800374c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b084      	sub	sp, #16
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d109      	bne.n	8003770 <HAL_TIM_PWM_Start+0x24>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003762:	b2db      	uxtb	r3, r3
 8003764:	2b01      	cmp	r3, #1
 8003766:	bf14      	ite	ne
 8003768:	2301      	movne	r3, #1
 800376a:	2300      	moveq	r3, #0
 800376c:	b2db      	uxtb	r3, r3
 800376e:	e022      	b.n	80037b6 <HAL_TIM_PWM_Start+0x6a>
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	2b04      	cmp	r3, #4
 8003774:	d109      	bne.n	800378a <HAL_TIM_PWM_Start+0x3e>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800377c:	b2db      	uxtb	r3, r3
 800377e:	2b01      	cmp	r3, #1
 8003780:	bf14      	ite	ne
 8003782:	2301      	movne	r3, #1
 8003784:	2300      	moveq	r3, #0
 8003786:	b2db      	uxtb	r3, r3
 8003788:	e015      	b.n	80037b6 <HAL_TIM_PWM_Start+0x6a>
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	2b08      	cmp	r3, #8
 800378e:	d109      	bne.n	80037a4 <HAL_TIM_PWM_Start+0x58>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003796:	b2db      	uxtb	r3, r3
 8003798:	2b01      	cmp	r3, #1
 800379a:	bf14      	ite	ne
 800379c:	2301      	movne	r3, #1
 800379e:	2300      	moveq	r3, #0
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	e008      	b.n	80037b6 <HAL_TIM_PWM_Start+0x6a>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	bf14      	ite	ne
 80037b0:	2301      	movne	r3, #1
 80037b2:	2300      	moveq	r3, #0
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d001      	beq.n	80037be <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e07c      	b.n	80038b8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d104      	bne.n	80037ce <HAL_TIM_PWM_Start+0x82>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2202      	movs	r2, #2
 80037c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80037cc:	e013      	b.n	80037f6 <HAL_TIM_PWM_Start+0xaa>
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	2b04      	cmp	r3, #4
 80037d2:	d104      	bne.n	80037de <HAL_TIM_PWM_Start+0x92>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2202      	movs	r2, #2
 80037d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80037dc:	e00b      	b.n	80037f6 <HAL_TIM_PWM_Start+0xaa>
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	2b08      	cmp	r3, #8
 80037e2:	d104      	bne.n	80037ee <HAL_TIM_PWM_Start+0xa2>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2202      	movs	r2, #2
 80037e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80037ec:	e003      	b.n	80037f6 <HAL_TIM_PWM_Start+0xaa>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2202      	movs	r2, #2
 80037f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	2201      	movs	r2, #1
 80037fc:	6839      	ldr	r1, [r7, #0]
 80037fe:	4618      	mov	r0, r3
 8003800:	f001 f98a 	bl	8004b18 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a2d      	ldr	r2, [pc, #180]	@ (80038c0 <HAL_TIM_PWM_Start+0x174>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d004      	beq.n	8003818 <HAL_TIM_PWM_Start+0xcc>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a2c      	ldr	r2, [pc, #176]	@ (80038c4 <HAL_TIM_PWM_Start+0x178>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d101      	bne.n	800381c <HAL_TIM_PWM_Start+0xd0>
 8003818:	2301      	movs	r3, #1
 800381a:	e000      	b.n	800381e <HAL_TIM_PWM_Start+0xd2>
 800381c:	2300      	movs	r3, #0
 800381e:	2b00      	cmp	r3, #0
 8003820:	d007      	beq.n	8003832 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003830:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a22      	ldr	r2, [pc, #136]	@ (80038c0 <HAL_TIM_PWM_Start+0x174>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d022      	beq.n	8003882 <HAL_TIM_PWM_Start+0x136>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003844:	d01d      	beq.n	8003882 <HAL_TIM_PWM_Start+0x136>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a1f      	ldr	r2, [pc, #124]	@ (80038c8 <HAL_TIM_PWM_Start+0x17c>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d018      	beq.n	8003882 <HAL_TIM_PWM_Start+0x136>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a1d      	ldr	r2, [pc, #116]	@ (80038cc <HAL_TIM_PWM_Start+0x180>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d013      	beq.n	8003882 <HAL_TIM_PWM_Start+0x136>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a1c      	ldr	r2, [pc, #112]	@ (80038d0 <HAL_TIM_PWM_Start+0x184>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d00e      	beq.n	8003882 <HAL_TIM_PWM_Start+0x136>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a16      	ldr	r2, [pc, #88]	@ (80038c4 <HAL_TIM_PWM_Start+0x178>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d009      	beq.n	8003882 <HAL_TIM_PWM_Start+0x136>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a18      	ldr	r2, [pc, #96]	@ (80038d4 <HAL_TIM_PWM_Start+0x188>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d004      	beq.n	8003882 <HAL_TIM_PWM_Start+0x136>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a16      	ldr	r2, [pc, #88]	@ (80038d8 <HAL_TIM_PWM_Start+0x18c>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d111      	bne.n	80038a6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	f003 0307 	and.w	r3, r3, #7
 800388c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2b06      	cmp	r3, #6
 8003892:	d010      	beq.n	80038b6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f042 0201 	orr.w	r2, r2, #1
 80038a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038a4:	e007      	b.n	80038b6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f042 0201 	orr.w	r2, r2, #1
 80038b4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80038b6:	2300      	movs	r3, #0
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3710      	adds	r7, #16
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}
 80038c0:	40010000 	.word	0x40010000
 80038c4:	40010400 	.word	0x40010400
 80038c8:	40000400 	.word	0x40000400
 80038cc:	40000800 	.word	0x40000800
 80038d0:	40000c00 	.word	0x40000c00
 80038d4:	40014000 	.word	0x40014000
 80038d8:	40001800 	.word	0x40001800

080038dc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b082      	sub	sp, #8
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d101      	bne.n	80038ee <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e041      	b.n	8003972 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d106      	bne.n	8003908 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f000 f839 	bl	800397a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2202      	movs	r2, #2
 800390c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	3304      	adds	r3, #4
 8003918:	4619      	mov	r1, r3
 800391a:	4610      	mov	r0, r2
 800391c:	f000 fce2 	bl	80042e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2201      	movs	r2, #1
 8003924:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2201      	movs	r2, #1
 800392c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2201      	movs	r2, #1
 8003934:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2201      	movs	r2, #1
 800393c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2201      	movs	r2, #1
 8003944:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2201      	movs	r2, #1
 800394c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2201      	movs	r2, #1
 8003954:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2201      	movs	r2, #1
 800395c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2201      	movs	r2, #1
 8003964:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2201      	movs	r2, #1
 800396c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003970:	2300      	movs	r3, #0
}
 8003972:	4618      	mov	r0, r3
 8003974:	3708      	adds	r7, #8
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}

0800397a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800397a:	b480      	push	{r7}
 800397c:	b083      	sub	sp, #12
 800397e:	af00      	add	r7, sp, #0
 8003980:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003982:	bf00      	nop
 8003984:	370c      	adds	r7, #12
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr
	...

08003990 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b084      	sub	sp, #16
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800399a:	2300      	movs	r3, #0
 800399c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d104      	bne.n	80039ae <HAL_TIM_IC_Start_IT+0x1e>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	e013      	b.n	80039d6 <HAL_TIM_IC_Start_IT+0x46>
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	2b04      	cmp	r3, #4
 80039b2:	d104      	bne.n	80039be <HAL_TIM_IC_Start_IT+0x2e>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	e00b      	b.n	80039d6 <HAL_TIM_IC_Start_IT+0x46>
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	2b08      	cmp	r3, #8
 80039c2:	d104      	bne.n	80039ce <HAL_TIM_IC_Start_IT+0x3e>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	e003      	b.n	80039d6 <HAL_TIM_IC_Start_IT+0x46>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d104      	bne.n	80039e8 <HAL_TIM_IC_Start_IT+0x58>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	e013      	b.n	8003a10 <HAL_TIM_IC_Start_IT+0x80>
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	2b04      	cmp	r3, #4
 80039ec:	d104      	bne.n	80039f8 <HAL_TIM_IC_Start_IT+0x68>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	e00b      	b.n	8003a10 <HAL_TIM_IC_Start_IT+0x80>
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	2b08      	cmp	r3, #8
 80039fc:	d104      	bne.n	8003a08 <HAL_TIM_IC_Start_IT+0x78>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	e003      	b.n	8003a10 <HAL_TIM_IC_Start_IT+0x80>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003a0e:	b2db      	uxtb	r3, r3
 8003a10:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003a12:	7bbb      	ldrb	r3, [r7, #14]
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d102      	bne.n	8003a1e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003a18:	7b7b      	ldrb	r3, [r7, #13]
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d001      	beq.n	8003a22 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e0cc      	b.n	8003bbc <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d104      	bne.n	8003a32 <HAL_TIM_IC_Start_IT+0xa2>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2202      	movs	r2, #2
 8003a2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003a30:	e013      	b.n	8003a5a <HAL_TIM_IC_Start_IT+0xca>
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	2b04      	cmp	r3, #4
 8003a36:	d104      	bne.n	8003a42 <HAL_TIM_IC_Start_IT+0xb2>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2202      	movs	r2, #2
 8003a3c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003a40:	e00b      	b.n	8003a5a <HAL_TIM_IC_Start_IT+0xca>
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	2b08      	cmp	r3, #8
 8003a46:	d104      	bne.n	8003a52 <HAL_TIM_IC_Start_IT+0xc2>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2202      	movs	r2, #2
 8003a4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003a50:	e003      	b.n	8003a5a <HAL_TIM_IC_Start_IT+0xca>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2202      	movs	r2, #2
 8003a56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d104      	bne.n	8003a6a <HAL_TIM_IC_Start_IT+0xda>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2202      	movs	r2, #2
 8003a64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003a68:	e013      	b.n	8003a92 <HAL_TIM_IC_Start_IT+0x102>
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	2b04      	cmp	r3, #4
 8003a6e:	d104      	bne.n	8003a7a <HAL_TIM_IC_Start_IT+0xea>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2202      	movs	r2, #2
 8003a74:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003a78:	e00b      	b.n	8003a92 <HAL_TIM_IC_Start_IT+0x102>
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	2b08      	cmp	r3, #8
 8003a7e:	d104      	bne.n	8003a8a <HAL_TIM_IC_Start_IT+0xfa>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2202      	movs	r2, #2
 8003a84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a88:	e003      	b.n	8003a92 <HAL_TIM_IC_Start_IT+0x102>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2202      	movs	r2, #2
 8003a8e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	2b0c      	cmp	r3, #12
 8003a96:	d841      	bhi.n	8003b1c <HAL_TIM_IC_Start_IT+0x18c>
 8003a98:	a201      	add	r2, pc, #4	@ (adr r2, 8003aa0 <HAL_TIM_IC_Start_IT+0x110>)
 8003a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a9e:	bf00      	nop
 8003aa0:	08003ad5 	.word	0x08003ad5
 8003aa4:	08003b1d 	.word	0x08003b1d
 8003aa8:	08003b1d 	.word	0x08003b1d
 8003aac:	08003b1d 	.word	0x08003b1d
 8003ab0:	08003ae7 	.word	0x08003ae7
 8003ab4:	08003b1d 	.word	0x08003b1d
 8003ab8:	08003b1d 	.word	0x08003b1d
 8003abc:	08003b1d 	.word	0x08003b1d
 8003ac0:	08003af9 	.word	0x08003af9
 8003ac4:	08003b1d 	.word	0x08003b1d
 8003ac8:	08003b1d 	.word	0x08003b1d
 8003acc:	08003b1d 	.word	0x08003b1d
 8003ad0:	08003b0b 	.word	0x08003b0b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	68da      	ldr	r2, [r3, #12]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f042 0202 	orr.w	r2, r2, #2
 8003ae2:	60da      	str	r2, [r3, #12]
      break;
 8003ae4:	e01d      	b.n	8003b22 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	68da      	ldr	r2, [r3, #12]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f042 0204 	orr.w	r2, r2, #4
 8003af4:	60da      	str	r2, [r3, #12]
      break;
 8003af6:	e014      	b.n	8003b22 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	68da      	ldr	r2, [r3, #12]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f042 0208 	orr.w	r2, r2, #8
 8003b06:	60da      	str	r2, [r3, #12]
      break;
 8003b08:	e00b      	b.n	8003b22 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	68da      	ldr	r2, [r3, #12]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f042 0210 	orr.w	r2, r2, #16
 8003b18:	60da      	str	r2, [r3, #12]
      break;
 8003b1a:	e002      	b.n	8003b22 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	73fb      	strb	r3, [r7, #15]
      break;
 8003b20:	bf00      	nop
  }

  if (status == HAL_OK)
 8003b22:	7bfb      	ldrb	r3, [r7, #15]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d148      	bne.n	8003bba <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	6839      	ldr	r1, [r7, #0]
 8003b30:	4618      	mov	r0, r3
 8003b32:	f000 fff1 	bl	8004b18 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a22      	ldr	r2, [pc, #136]	@ (8003bc4 <HAL_TIM_IC_Start_IT+0x234>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d022      	beq.n	8003b86 <HAL_TIM_IC_Start_IT+0x1f6>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b48:	d01d      	beq.n	8003b86 <HAL_TIM_IC_Start_IT+0x1f6>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a1e      	ldr	r2, [pc, #120]	@ (8003bc8 <HAL_TIM_IC_Start_IT+0x238>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d018      	beq.n	8003b86 <HAL_TIM_IC_Start_IT+0x1f6>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a1c      	ldr	r2, [pc, #112]	@ (8003bcc <HAL_TIM_IC_Start_IT+0x23c>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d013      	beq.n	8003b86 <HAL_TIM_IC_Start_IT+0x1f6>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a1b      	ldr	r2, [pc, #108]	@ (8003bd0 <HAL_TIM_IC_Start_IT+0x240>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d00e      	beq.n	8003b86 <HAL_TIM_IC_Start_IT+0x1f6>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a19      	ldr	r2, [pc, #100]	@ (8003bd4 <HAL_TIM_IC_Start_IT+0x244>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d009      	beq.n	8003b86 <HAL_TIM_IC_Start_IT+0x1f6>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a18      	ldr	r2, [pc, #96]	@ (8003bd8 <HAL_TIM_IC_Start_IT+0x248>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d004      	beq.n	8003b86 <HAL_TIM_IC_Start_IT+0x1f6>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a16      	ldr	r2, [pc, #88]	@ (8003bdc <HAL_TIM_IC_Start_IT+0x24c>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d111      	bne.n	8003baa <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	f003 0307 	and.w	r3, r3, #7
 8003b90:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	2b06      	cmp	r3, #6
 8003b96:	d010      	beq.n	8003bba <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f042 0201 	orr.w	r2, r2, #1
 8003ba6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ba8:	e007      	b.n	8003bba <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f042 0201 	orr.w	r2, r2, #1
 8003bb8:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003bba:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	3710      	adds	r7, #16
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}
 8003bc4:	40010000 	.word	0x40010000
 8003bc8:	40000400 	.word	0x40000400
 8003bcc:	40000800 	.word	0x40000800
 8003bd0:	40000c00 	.word	0x40000c00
 8003bd4:	40010400 	.word	0x40010400
 8003bd8:	40014000 	.word	0x40014000
 8003bdc:	40001800 	.word	0x40001800

08003be0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b084      	sub	sp, #16
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	691b      	ldr	r3, [r3, #16]
 8003bf6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	f003 0302 	and.w	r3, r3, #2
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d020      	beq.n	8003c44 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	f003 0302 	and.w	r3, r3, #2
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d01b      	beq.n	8003c44 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f06f 0202 	mvn.w	r2, #2
 8003c14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2201      	movs	r2, #1
 8003c1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	699b      	ldr	r3, [r3, #24]
 8003c22:	f003 0303 	and.w	r3, r3, #3
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d003      	beq.n	8003c32 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f7fd f86a 	bl	8000d04 <HAL_TIM_IC_CaptureCallback>
 8003c30:	e005      	b.n	8003c3e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f000 fb38 	bl	80042a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f000 fb3f 	bl	80042bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	f003 0304 	and.w	r3, r3, #4
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d020      	beq.n	8003c90 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	f003 0304 	and.w	r3, r3, #4
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d01b      	beq.n	8003c90 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f06f 0204 	mvn.w	r2, #4
 8003c60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2202      	movs	r2, #2
 8003c66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	699b      	ldr	r3, [r3, #24]
 8003c6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d003      	beq.n	8003c7e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f7fd f844 	bl	8000d04 <HAL_TIM_IC_CaptureCallback>
 8003c7c:	e005      	b.n	8003c8a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f000 fb12 	bl	80042a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	f000 fb19 	bl	80042bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	f003 0308 	and.w	r3, r3, #8
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d020      	beq.n	8003cdc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	f003 0308 	and.w	r3, r3, #8
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d01b      	beq.n	8003cdc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f06f 0208 	mvn.w	r2, #8
 8003cac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2204      	movs	r2, #4
 8003cb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	69db      	ldr	r3, [r3, #28]
 8003cba:	f003 0303 	and.w	r3, r3, #3
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d003      	beq.n	8003cca <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f7fd f81e 	bl	8000d04 <HAL_TIM_IC_CaptureCallback>
 8003cc8:	e005      	b.n	8003cd6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f000 faec 	bl	80042a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f000 faf3 	bl	80042bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	f003 0310 	and.w	r3, r3, #16
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d020      	beq.n	8003d28 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	f003 0310 	and.w	r3, r3, #16
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d01b      	beq.n	8003d28 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f06f 0210 	mvn.w	r2, #16
 8003cf8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2208      	movs	r2, #8
 8003cfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	69db      	ldr	r3, [r3, #28]
 8003d06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d003      	beq.n	8003d16 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f7fc fff8 	bl	8000d04 <HAL_TIM_IC_CaptureCallback>
 8003d14:	e005      	b.n	8003d22 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f000 fac6 	bl	80042a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f000 facd 	bl	80042bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	f003 0301 	and.w	r3, r3, #1
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d00c      	beq.n	8003d4c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	f003 0301 	and.w	r3, r3, #1
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d007      	beq.n	8003d4c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f06f 0201 	mvn.w	r2, #1
 8003d44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f000 faa4 	bl	8004294 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d00c      	beq.n	8003d70 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d007      	beq.n	8003d70 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003d68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f000 ff80 	bl	8004c70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d00c      	beq.n	8003d94 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d007      	beq.n	8003d94 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003d8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f000 fa9e 	bl	80042d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	f003 0320 	and.w	r3, r3, #32
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d00c      	beq.n	8003db8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	f003 0320 	and.w	r3, r3, #32
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d007      	beq.n	8003db8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f06f 0220 	mvn.w	r2, #32
 8003db0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f000 ff52 	bl	8004c5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003db8:	bf00      	nop
 8003dba:	3710      	adds	r7, #16
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}

08003dc0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b086      	sub	sp, #24
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	60f8      	str	r0, [r7, #12]
 8003dc8:	60b9      	str	r1, [r7, #8]
 8003dca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d101      	bne.n	8003dde <HAL_TIM_IC_ConfigChannel+0x1e>
 8003dda:	2302      	movs	r3, #2
 8003ddc:	e088      	b.n	8003ef0 <HAL_TIM_IC_ConfigChannel+0x130>
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2201      	movs	r2, #1
 8003de2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d11b      	bne.n	8003e24 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003dfc:	f000 fcc8 	bl	8004790 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	699a      	ldr	r2, [r3, #24]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f022 020c 	bic.w	r2, r2, #12
 8003e0e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	6999      	ldr	r1, [r3, #24]
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	689a      	ldr	r2, [r3, #8]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	430a      	orrs	r2, r1
 8003e20:	619a      	str	r2, [r3, #24]
 8003e22:	e060      	b.n	8003ee6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2b04      	cmp	r3, #4
 8003e28:	d11c      	bne.n	8003e64 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8003e3a:	f000 fd4c 	bl	80048d6 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	699a      	ldr	r2, [r3, #24]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003e4c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	6999      	ldr	r1, [r3, #24]
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	021a      	lsls	r2, r3, #8
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	430a      	orrs	r2, r1
 8003e60:	619a      	str	r2, [r3, #24]
 8003e62:	e040      	b.n	8003ee6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2b08      	cmp	r3, #8
 8003e68:	d11b      	bne.n	8003ea2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8003e7a:	f000 fd99 	bl	80049b0 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	69da      	ldr	r2, [r3, #28]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f022 020c 	bic.w	r2, r2, #12
 8003e8c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	69d9      	ldr	r1, [r3, #28]
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	689a      	ldr	r2, [r3, #8]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	430a      	orrs	r2, r1
 8003e9e:	61da      	str	r2, [r3, #28]
 8003ea0:	e021      	b.n	8003ee6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2b0c      	cmp	r3, #12
 8003ea6:	d11c      	bne.n	8003ee2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003eb8:	f000 fdb6 	bl	8004a28 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	69da      	ldr	r2, [r3, #28]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003eca:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	69d9      	ldr	r1, [r3, #28]
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	021a      	lsls	r2, r3, #8
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	430a      	orrs	r2, r1
 8003ede:	61da      	str	r2, [r3, #28]
 8003ee0:	e001      	b.n	8003ee6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003eee:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3718      	adds	r7, #24
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}

08003ef8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b086      	sub	sp, #24
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	60f8      	str	r0, [r7, #12]
 8003f00:	60b9      	str	r1, [r7, #8]
 8003f02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f04:	2300      	movs	r3, #0
 8003f06:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d101      	bne.n	8003f16 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003f12:	2302      	movs	r3, #2
 8003f14:	e0ae      	b.n	8004074 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2201      	movs	r2, #1
 8003f1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2b0c      	cmp	r3, #12
 8003f22:	f200 809f 	bhi.w	8004064 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003f26:	a201      	add	r2, pc, #4	@ (adr r2, 8003f2c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f2c:	08003f61 	.word	0x08003f61
 8003f30:	08004065 	.word	0x08004065
 8003f34:	08004065 	.word	0x08004065
 8003f38:	08004065 	.word	0x08004065
 8003f3c:	08003fa1 	.word	0x08003fa1
 8003f40:	08004065 	.word	0x08004065
 8003f44:	08004065 	.word	0x08004065
 8003f48:	08004065 	.word	0x08004065
 8003f4c:	08003fe3 	.word	0x08003fe3
 8003f50:	08004065 	.word	0x08004065
 8003f54:	08004065 	.word	0x08004065
 8003f58:	08004065 	.word	0x08004065
 8003f5c:	08004023 	.word	0x08004023
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	68b9      	ldr	r1, [r7, #8]
 8003f66:	4618      	mov	r0, r3
 8003f68:	f000 fa62 	bl	8004430 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	699a      	ldr	r2, [r3, #24]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f042 0208 	orr.w	r2, r2, #8
 8003f7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	699a      	ldr	r2, [r3, #24]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f022 0204 	bic.w	r2, r2, #4
 8003f8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	6999      	ldr	r1, [r3, #24]
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	691a      	ldr	r2, [r3, #16]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	430a      	orrs	r2, r1
 8003f9c:	619a      	str	r2, [r3, #24]
      break;
 8003f9e:	e064      	b.n	800406a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	68b9      	ldr	r1, [r7, #8]
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f000 fab2 	bl	8004510 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	699a      	ldr	r2, [r3, #24]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003fba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	699a      	ldr	r2, [r3, #24]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003fca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	6999      	ldr	r1, [r3, #24]
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	691b      	ldr	r3, [r3, #16]
 8003fd6:	021a      	lsls	r2, r3, #8
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	430a      	orrs	r2, r1
 8003fde:	619a      	str	r2, [r3, #24]
      break;
 8003fe0:	e043      	b.n	800406a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	68b9      	ldr	r1, [r7, #8]
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f000 fb07 	bl	80045fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	69da      	ldr	r2, [r3, #28]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f042 0208 	orr.w	r2, r2, #8
 8003ffc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	69da      	ldr	r2, [r3, #28]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f022 0204 	bic.w	r2, r2, #4
 800400c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	69d9      	ldr	r1, [r3, #28]
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	691a      	ldr	r2, [r3, #16]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	430a      	orrs	r2, r1
 800401e:	61da      	str	r2, [r3, #28]
      break;
 8004020:	e023      	b.n	800406a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	68b9      	ldr	r1, [r7, #8]
 8004028:	4618      	mov	r0, r3
 800402a:	f000 fb5b 	bl	80046e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	69da      	ldr	r2, [r3, #28]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800403c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	69da      	ldr	r2, [r3, #28]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800404c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	69d9      	ldr	r1, [r3, #28]
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	691b      	ldr	r3, [r3, #16]
 8004058:	021a      	lsls	r2, r3, #8
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	430a      	orrs	r2, r1
 8004060:	61da      	str	r2, [r3, #28]
      break;
 8004062:	e002      	b.n	800406a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	75fb      	strb	r3, [r7, #23]
      break;
 8004068:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2200      	movs	r2, #0
 800406e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004072:	7dfb      	ldrb	r3, [r7, #23]
}
 8004074:	4618      	mov	r0, r3
 8004076:	3718      	adds	r7, #24
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}

0800407c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b084      	sub	sp, #16
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
 8004084:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004086:	2300      	movs	r3, #0
 8004088:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004090:	2b01      	cmp	r3, #1
 8004092:	d101      	bne.n	8004098 <HAL_TIM_ConfigClockSource+0x1c>
 8004094:	2302      	movs	r3, #2
 8004096:	e0b4      	b.n	8004202 <HAL_TIM_ConfigClockSource+0x186>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2201      	movs	r2, #1
 800409c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2202      	movs	r2, #2
 80040a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80040b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80040be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	68ba      	ldr	r2, [r7, #8]
 80040c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80040d0:	d03e      	beq.n	8004150 <HAL_TIM_ConfigClockSource+0xd4>
 80040d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80040d6:	f200 8087 	bhi.w	80041e8 <HAL_TIM_ConfigClockSource+0x16c>
 80040da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040de:	f000 8086 	beq.w	80041ee <HAL_TIM_ConfigClockSource+0x172>
 80040e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040e6:	d87f      	bhi.n	80041e8 <HAL_TIM_ConfigClockSource+0x16c>
 80040e8:	2b70      	cmp	r3, #112	@ 0x70
 80040ea:	d01a      	beq.n	8004122 <HAL_TIM_ConfigClockSource+0xa6>
 80040ec:	2b70      	cmp	r3, #112	@ 0x70
 80040ee:	d87b      	bhi.n	80041e8 <HAL_TIM_ConfigClockSource+0x16c>
 80040f0:	2b60      	cmp	r3, #96	@ 0x60
 80040f2:	d050      	beq.n	8004196 <HAL_TIM_ConfigClockSource+0x11a>
 80040f4:	2b60      	cmp	r3, #96	@ 0x60
 80040f6:	d877      	bhi.n	80041e8 <HAL_TIM_ConfigClockSource+0x16c>
 80040f8:	2b50      	cmp	r3, #80	@ 0x50
 80040fa:	d03c      	beq.n	8004176 <HAL_TIM_ConfigClockSource+0xfa>
 80040fc:	2b50      	cmp	r3, #80	@ 0x50
 80040fe:	d873      	bhi.n	80041e8 <HAL_TIM_ConfigClockSource+0x16c>
 8004100:	2b40      	cmp	r3, #64	@ 0x40
 8004102:	d058      	beq.n	80041b6 <HAL_TIM_ConfigClockSource+0x13a>
 8004104:	2b40      	cmp	r3, #64	@ 0x40
 8004106:	d86f      	bhi.n	80041e8 <HAL_TIM_ConfigClockSource+0x16c>
 8004108:	2b30      	cmp	r3, #48	@ 0x30
 800410a:	d064      	beq.n	80041d6 <HAL_TIM_ConfigClockSource+0x15a>
 800410c:	2b30      	cmp	r3, #48	@ 0x30
 800410e:	d86b      	bhi.n	80041e8 <HAL_TIM_ConfigClockSource+0x16c>
 8004110:	2b20      	cmp	r3, #32
 8004112:	d060      	beq.n	80041d6 <HAL_TIM_ConfigClockSource+0x15a>
 8004114:	2b20      	cmp	r3, #32
 8004116:	d867      	bhi.n	80041e8 <HAL_TIM_ConfigClockSource+0x16c>
 8004118:	2b00      	cmp	r3, #0
 800411a:	d05c      	beq.n	80041d6 <HAL_TIM_ConfigClockSource+0x15a>
 800411c:	2b10      	cmp	r3, #16
 800411e:	d05a      	beq.n	80041d6 <HAL_TIM_ConfigClockSource+0x15a>
 8004120:	e062      	b.n	80041e8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004132:	f000 fcd1 	bl	8004ad8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004144:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	68ba      	ldr	r2, [r7, #8]
 800414c:	609a      	str	r2, [r3, #8]
      break;
 800414e:	e04f      	b.n	80041f0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004160:	f000 fcba 	bl	8004ad8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	689a      	ldr	r2, [r3, #8]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004172:	609a      	str	r2, [r3, #8]
      break;
 8004174:	e03c      	b.n	80041f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004182:	461a      	mov	r2, r3
 8004184:	f000 fb78 	bl	8004878 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	2150      	movs	r1, #80	@ 0x50
 800418e:	4618      	mov	r0, r3
 8004190:	f000 fc87 	bl	8004aa2 <TIM_ITRx_SetConfig>
      break;
 8004194:	e02c      	b.n	80041f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80041a2:	461a      	mov	r2, r3
 80041a4:	f000 fbd4 	bl	8004950 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	2160      	movs	r1, #96	@ 0x60
 80041ae:	4618      	mov	r0, r3
 80041b0:	f000 fc77 	bl	8004aa2 <TIM_ITRx_SetConfig>
      break;
 80041b4:	e01c      	b.n	80041f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80041c2:	461a      	mov	r2, r3
 80041c4:	f000 fb58 	bl	8004878 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	2140      	movs	r1, #64	@ 0x40
 80041ce:	4618      	mov	r0, r3
 80041d0:	f000 fc67 	bl	8004aa2 <TIM_ITRx_SetConfig>
      break;
 80041d4:	e00c      	b.n	80041f0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4619      	mov	r1, r3
 80041e0:	4610      	mov	r0, r2
 80041e2:	f000 fc5e 	bl	8004aa2 <TIM_ITRx_SetConfig>
      break;
 80041e6:	e003      	b.n	80041f0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	73fb      	strb	r3, [r7, #15]
      break;
 80041ec:	e000      	b.n	80041f0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80041ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2201      	movs	r2, #1
 80041f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2200      	movs	r2, #0
 80041fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004200:	7bfb      	ldrb	r3, [r7, #15]
}
 8004202:	4618      	mov	r0, r3
 8004204:	3710      	adds	r7, #16
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}
	...

0800420c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800420c:	b480      	push	{r7}
 800420e:	b085      	sub	sp, #20
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004216:	2300      	movs	r3, #0
 8004218:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	2b0c      	cmp	r3, #12
 800421e:	d831      	bhi.n	8004284 <HAL_TIM_ReadCapturedValue+0x78>
 8004220:	a201      	add	r2, pc, #4	@ (adr r2, 8004228 <HAL_TIM_ReadCapturedValue+0x1c>)
 8004222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004226:	bf00      	nop
 8004228:	0800425d 	.word	0x0800425d
 800422c:	08004285 	.word	0x08004285
 8004230:	08004285 	.word	0x08004285
 8004234:	08004285 	.word	0x08004285
 8004238:	08004267 	.word	0x08004267
 800423c:	08004285 	.word	0x08004285
 8004240:	08004285 	.word	0x08004285
 8004244:	08004285 	.word	0x08004285
 8004248:	08004271 	.word	0x08004271
 800424c:	08004285 	.word	0x08004285
 8004250:	08004285 	.word	0x08004285
 8004254:	08004285 	.word	0x08004285
 8004258:	0800427b 	.word	0x0800427b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004262:	60fb      	str	r3, [r7, #12]

      break;
 8004264:	e00f      	b.n	8004286 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800426c:	60fb      	str	r3, [r7, #12]

      break;
 800426e:	e00a      	b.n	8004286 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004276:	60fb      	str	r3, [r7, #12]

      break;
 8004278:	e005      	b.n	8004286 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004280:	60fb      	str	r3, [r7, #12]

      break;
 8004282:	e000      	b.n	8004286 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004284:	bf00      	nop
  }

  return tmpreg;
 8004286:	68fb      	ldr	r3, [r7, #12]
}
 8004288:	4618      	mov	r0, r3
 800428a:	3714      	adds	r7, #20
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr

08004294 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004294:	b480      	push	{r7}
 8004296:	b083      	sub	sp, #12
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800429c:	bf00      	nop
 800429e:	370c      	adds	r7, #12
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr

080042a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b083      	sub	sp, #12
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80042b0:	bf00      	nop
 80042b2:	370c      	adds	r7, #12
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr

080042bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80042bc:	b480      	push	{r7}
 80042be:	b083      	sub	sp, #12
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80042c4:	bf00      	nop
 80042c6:	370c      	adds	r7, #12
 80042c8:	46bd      	mov	sp, r7
 80042ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ce:	4770      	bx	lr

080042d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b083      	sub	sp, #12
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80042d8:	bf00      	nop
 80042da:	370c      	adds	r7, #12
 80042dc:	46bd      	mov	sp, r7
 80042de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e2:	4770      	bx	lr

080042e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b085      	sub	sp, #20
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
 80042ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	4a43      	ldr	r2, [pc, #268]	@ (8004404 <TIM_Base_SetConfig+0x120>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d013      	beq.n	8004324 <TIM_Base_SetConfig+0x40>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004302:	d00f      	beq.n	8004324 <TIM_Base_SetConfig+0x40>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	4a40      	ldr	r2, [pc, #256]	@ (8004408 <TIM_Base_SetConfig+0x124>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d00b      	beq.n	8004324 <TIM_Base_SetConfig+0x40>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	4a3f      	ldr	r2, [pc, #252]	@ (800440c <TIM_Base_SetConfig+0x128>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d007      	beq.n	8004324 <TIM_Base_SetConfig+0x40>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	4a3e      	ldr	r2, [pc, #248]	@ (8004410 <TIM_Base_SetConfig+0x12c>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d003      	beq.n	8004324 <TIM_Base_SetConfig+0x40>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	4a3d      	ldr	r2, [pc, #244]	@ (8004414 <TIM_Base_SetConfig+0x130>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d108      	bne.n	8004336 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800432a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	68fa      	ldr	r2, [r7, #12]
 8004332:	4313      	orrs	r3, r2
 8004334:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	4a32      	ldr	r2, [pc, #200]	@ (8004404 <TIM_Base_SetConfig+0x120>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d02b      	beq.n	8004396 <TIM_Base_SetConfig+0xb2>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004344:	d027      	beq.n	8004396 <TIM_Base_SetConfig+0xb2>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	4a2f      	ldr	r2, [pc, #188]	@ (8004408 <TIM_Base_SetConfig+0x124>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d023      	beq.n	8004396 <TIM_Base_SetConfig+0xb2>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	4a2e      	ldr	r2, [pc, #184]	@ (800440c <TIM_Base_SetConfig+0x128>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d01f      	beq.n	8004396 <TIM_Base_SetConfig+0xb2>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	4a2d      	ldr	r2, [pc, #180]	@ (8004410 <TIM_Base_SetConfig+0x12c>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d01b      	beq.n	8004396 <TIM_Base_SetConfig+0xb2>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	4a2c      	ldr	r2, [pc, #176]	@ (8004414 <TIM_Base_SetConfig+0x130>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d017      	beq.n	8004396 <TIM_Base_SetConfig+0xb2>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	4a2b      	ldr	r2, [pc, #172]	@ (8004418 <TIM_Base_SetConfig+0x134>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d013      	beq.n	8004396 <TIM_Base_SetConfig+0xb2>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	4a2a      	ldr	r2, [pc, #168]	@ (800441c <TIM_Base_SetConfig+0x138>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d00f      	beq.n	8004396 <TIM_Base_SetConfig+0xb2>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	4a29      	ldr	r2, [pc, #164]	@ (8004420 <TIM_Base_SetConfig+0x13c>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d00b      	beq.n	8004396 <TIM_Base_SetConfig+0xb2>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	4a28      	ldr	r2, [pc, #160]	@ (8004424 <TIM_Base_SetConfig+0x140>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d007      	beq.n	8004396 <TIM_Base_SetConfig+0xb2>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	4a27      	ldr	r2, [pc, #156]	@ (8004428 <TIM_Base_SetConfig+0x144>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d003      	beq.n	8004396 <TIM_Base_SetConfig+0xb2>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	4a26      	ldr	r2, [pc, #152]	@ (800442c <TIM_Base_SetConfig+0x148>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d108      	bne.n	80043a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800439c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	68db      	ldr	r3, [r3, #12]
 80043a2:	68fa      	ldr	r2, [r7, #12]
 80043a4:	4313      	orrs	r3, r2
 80043a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	695b      	ldr	r3, [r3, #20]
 80043b2:	4313      	orrs	r3, r2
 80043b4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	689a      	ldr	r2, [r3, #8]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	4a0e      	ldr	r2, [pc, #56]	@ (8004404 <TIM_Base_SetConfig+0x120>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d003      	beq.n	80043d6 <TIM_Base_SetConfig+0xf2>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4a10      	ldr	r2, [pc, #64]	@ (8004414 <TIM_Base_SetConfig+0x130>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d103      	bne.n	80043de <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	691a      	ldr	r2, [r3, #16]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f043 0204 	orr.w	r2, r3, #4
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2201      	movs	r2, #1
 80043ee:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	68fa      	ldr	r2, [r7, #12]
 80043f4:	601a      	str	r2, [r3, #0]
}
 80043f6:	bf00      	nop
 80043f8:	3714      	adds	r7, #20
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr
 8004402:	bf00      	nop
 8004404:	40010000 	.word	0x40010000
 8004408:	40000400 	.word	0x40000400
 800440c:	40000800 	.word	0x40000800
 8004410:	40000c00 	.word	0x40000c00
 8004414:	40010400 	.word	0x40010400
 8004418:	40014000 	.word	0x40014000
 800441c:	40014400 	.word	0x40014400
 8004420:	40014800 	.word	0x40014800
 8004424:	40001800 	.word	0x40001800
 8004428:	40001c00 	.word	0x40001c00
 800442c:	40002000 	.word	0x40002000

08004430 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004430:	b480      	push	{r7}
 8004432:	b087      	sub	sp, #28
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
 8004438:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6a1b      	ldr	r3, [r3, #32]
 800443e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6a1b      	ldr	r3, [r3, #32]
 8004444:	f023 0201 	bic.w	r2, r3, #1
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	699b      	ldr	r3, [r3, #24]
 8004456:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800445e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f023 0303 	bic.w	r3, r3, #3
 8004466:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	68fa      	ldr	r2, [r7, #12]
 800446e:	4313      	orrs	r3, r2
 8004470:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	f023 0302 	bic.w	r3, r3, #2
 8004478:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	697a      	ldr	r2, [r7, #20]
 8004480:	4313      	orrs	r3, r2
 8004482:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	4a20      	ldr	r2, [pc, #128]	@ (8004508 <TIM_OC1_SetConfig+0xd8>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d003      	beq.n	8004494 <TIM_OC1_SetConfig+0x64>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	4a1f      	ldr	r2, [pc, #124]	@ (800450c <TIM_OC1_SetConfig+0xdc>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d10c      	bne.n	80044ae <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	f023 0308 	bic.w	r3, r3, #8
 800449a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	697a      	ldr	r2, [r7, #20]
 80044a2:	4313      	orrs	r3, r2
 80044a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	f023 0304 	bic.w	r3, r3, #4
 80044ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4a15      	ldr	r2, [pc, #84]	@ (8004508 <TIM_OC1_SetConfig+0xd8>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d003      	beq.n	80044be <TIM_OC1_SetConfig+0x8e>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	4a14      	ldr	r2, [pc, #80]	@ (800450c <TIM_OC1_SetConfig+0xdc>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d111      	bne.n	80044e2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80044c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80044cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	695b      	ldr	r3, [r3, #20]
 80044d2:	693a      	ldr	r2, [r7, #16]
 80044d4:	4313      	orrs	r3, r2
 80044d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	699b      	ldr	r3, [r3, #24]
 80044dc:	693a      	ldr	r2, [r7, #16]
 80044de:	4313      	orrs	r3, r2
 80044e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	693a      	ldr	r2, [r7, #16]
 80044e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	68fa      	ldr	r2, [r7, #12]
 80044ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	685a      	ldr	r2, [r3, #4]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	697a      	ldr	r2, [r7, #20]
 80044fa:	621a      	str	r2, [r3, #32]
}
 80044fc:	bf00      	nop
 80044fe:	371c      	adds	r7, #28
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr
 8004508:	40010000 	.word	0x40010000
 800450c:	40010400 	.word	0x40010400

08004510 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004510:	b480      	push	{r7}
 8004512:	b087      	sub	sp, #28
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
 8004518:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6a1b      	ldr	r3, [r3, #32]
 800451e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6a1b      	ldr	r3, [r3, #32]
 8004524:	f023 0210 	bic.w	r2, r3, #16
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	699b      	ldr	r3, [r3, #24]
 8004536:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800453e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004546:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	021b      	lsls	r3, r3, #8
 800454e:	68fa      	ldr	r2, [r7, #12]
 8004550:	4313      	orrs	r3, r2
 8004552:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	f023 0320 	bic.w	r3, r3, #32
 800455a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	011b      	lsls	r3, r3, #4
 8004562:	697a      	ldr	r2, [r7, #20]
 8004564:	4313      	orrs	r3, r2
 8004566:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	4a22      	ldr	r2, [pc, #136]	@ (80045f4 <TIM_OC2_SetConfig+0xe4>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d003      	beq.n	8004578 <TIM_OC2_SetConfig+0x68>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	4a21      	ldr	r2, [pc, #132]	@ (80045f8 <TIM_OC2_SetConfig+0xe8>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d10d      	bne.n	8004594 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800457e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	011b      	lsls	r3, r3, #4
 8004586:	697a      	ldr	r2, [r7, #20]
 8004588:	4313      	orrs	r3, r2
 800458a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004592:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	4a17      	ldr	r2, [pc, #92]	@ (80045f4 <TIM_OC2_SetConfig+0xe4>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d003      	beq.n	80045a4 <TIM_OC2_SetConfig+0x94>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	4a16      	ldr	r2, [pc, #88]	@ (80045f8 <TIM_OC2_SetConfig+0xe8>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d113      	bne.n	80045cc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80045aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80045b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	695b      	ldr	r3, [r3, #20]
 80045b8:	009b      	lsls	r3, r3, #2
 80045ba:	693a      	ldr	r2, [r7, #16]
 80045bc:	4313      	orrs	r3, r2
 80045be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	699b      	ldr	r3, [r3, #24]
 80045c4:	009b      	lsls	r3, r3, #2
 80045c6:	693a      	ldr	r2, [r7, #16]
 80045c8:	4313      	orrs	r3, r2
 80045ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	693a      	ldr	r2, [r7, #16]
 80045d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	68fa      	ldr	r2, [r7, #12]
 80045d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	685a      	ldr	r2, [r3, #4]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	697a      	ldr	r2, [r7, #20]
 80045e4:	621a      	str	r2, [r3, #32]
}
 80045e6:	bf00      	nop
 80045e8:	371c      	adds	r7, #28
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr
 80045f2:	bf00      	nop
 80045f4:	40010000 	.word	0x40010000
 80045f8:	40010400 	.word	0x40010400

080045fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b087      	sub	sp, #28
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6a1b      	ldr	r3, [r3, #32]
 800460a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6a1b      	ldr	r3, [r3, #32]
 8004610:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	69db      	ldr	r3, [r3, #28]
 8004622:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800462a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f023 0303 	bic.w	r3, r3, #3
 8004632:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	68fa      	ldr	r2, [r7, #12]
 800463a:	4313      	orrs	r3, r2
 800463c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004644:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	021b      	lsls	r3, r3, #8
 800464c:	697a      	ldr	r2, [r7, #20]
 800464e:	4313      	orrs	r3, r2
 8004650:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	4a21      	ldr	r2, [pc, #132]	@ (80046dc <TIM_OC3_SetConfig+0xe0>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d003      	beq.n	8004662 <TIM_OC3_SetConfig+0x66>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	4a20      	ldr	r2, [pc, #128]	@ (80046e0 <TIM_OC3_SetConfig+0xe4>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d10d      	bne.n	800467e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004668:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	68db      	ldr	r3, [r3, #12]
 800466e:	021b      	lsls	r3, r3, #8
 8004670:	697a      	ldr	r2, [r7, #20]
 8004672:	4313      	orrs	r3, r2
 8004674:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800467c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	4a16      	ldr	r2, [pc, #88]	@ (80046dc <TIM_OC3_SetConfig+0xe0>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d003      	beq.n	800468e <TIM_OC3_SetConfig+0x92>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	4a15      	ldr	r2, [pc, #84]	@ (80046e0 <TIM_OC3_SetConfig+0xe4>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d113      	bne.n	80046b6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004694:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800469c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	695b      	ldr	r3, [r3, #20]
 80046a2:	011b      	lsls	r3, r3, #4
 80046a4:	693a      	ldr	r2, [r7, #16]
 80046a6:	4313      	orrs	r3, r2
 80046a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	699b      	ldr	r3, [r3, #24]
 80046ae:	011b      	lsls	r3, r3, #4
 80046b0:	693a      	ldr	r2, [r7, #16]
 80046b2:	4313      	orrs	r3, r2
 80046b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	693a      	ldr	r2, [r7, #16]
 80046ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	68fa      	ldr	r2, [r7, #12]
 80046c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	685a      	ldr	r2, [r3, #4]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	697a      	ldr	r2, [r7, #20]
 80046ce:	621a      	str	r2, [r3, #32]
}
 80046d0:	bf00      	nop
 80046d2:	371c      	adds	r7, #28
 80046d4:	46bd      	mov	sp, r7
 80046d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046da:	4770      	bx	lr
 80046dc:	40010000 	.word	0x40010000
 80046e0:	40010400 	.word	0x40010400

080046e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b087      	sub	sp, #28
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
 80046ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6a1b      	ldr	r3, [r3, #32]
 80046f2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6a1b      	ldr	r3, [r3, #32]
 80046f8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	69db      	ldr	r3, [r3, #28]
 800470a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004712:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800471a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	021b      	lsls	r3, r3, #8
 8004722:	68fa      	ldr	r2, [r7, #12]
 8004724:	4313      	orrs	r3, r2
 8004726:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800472e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	031b      	lsls	r3, r3, #12
 8004736:	693a      	ldr	r2, [r7, #16]
 8004738:	4313      	orrs	r3, r2
 800473a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	4a12      	ldr	r2, [pc, #72]	@ (8004788 <TIM_OC4_SetConfig+0xa4>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d003      	beq.n	800474c <TIM_OC4_SetConfig+0x68>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	4a11      	ldr	r2, [pc, #68]	@ (800478c <TIM_OC4_SetConfig+0xa8>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d109      	bne.n	8004760 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004752:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	695b      	ldr	r3, [r3, #20]
 8004758:	019b      	lsls	r3, r3, #6
 800475a:	697a      	ldr	r2, [r7, #20]
 800475c:	4313      	orrs	r3, r2
 800475e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	697a      	ldr	r2, [r7, #20]
 8004764:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	68fa      	ldr	r2, [r7, #12]
 800476a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	685a      	ldr	r2, [r3, #4]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	693a      	ldr	r2, [r7, #16]
 8004778:	621a      	str	r2, [r3, #32]
}
 800477a:	bf00      	nop
 800477c:	371c      	adds	r7, #28
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr
 8004786:	bf00      	nop
 8004788:	40010000 	.word	0x40010000
 800478c:	40010400 	.word	0x40010400

08004790 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004790:	b480      	push	{r7}
 8004792:	b087      	sub	sp, #28
 8004794:	af00      	add	r7, sp, #0
 8004796:	60f8      	str	r0, [r7, #12]
 8004798:	60b9      	str	r1, [r7, #8]
 800479a:	607a      	str	r2, [r7, #4]
 800479c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	6a1b      	ldr	r3, [r3, #32]
 80047a2:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	6a1b      	ldr	r3, [r3, #32]
 80047a8:	f023 0201 	bic.w	r2, r3, #1
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	699b      	ldr	r3, [r3, #24]
 80047b4:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	4a28      	ldr	r2, [pc, #160]	@ (800485c <TIM_TI1_SetConfig+0xcc>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d01b      	beq.n	80047f6 <TIM_TI1_SetConfig+0x66>
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047c4:	d017      	beq.n	80047f6 <TIM_TI1_SetConfig+0x66>
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	4a25      	ldr	r2, [pc, #148]	@ (8004860 <TIM_TI1_SetConfig+0xd0>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d013      	beq.n	80047f6 <TIM_TI1_SetConfig+0x66>
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	4a24      	ldr	r2, [pc, #144]	@ (8004864 <TIM_TI1_SetConfig+0xd4>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d00f      	beq.n	80047f6 <TIM_TI1_SetConfig+0x66>
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	4a23      	ldr	r2, [pc, #140]	@ (8004868 <TIM_TI1_SetConfig+0xd8>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d00b      	beq.n	80047f6 <TIM_TI1_SetConfig+0x66>
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	4a22      	ldr	r2, [pc, #136]	@ (800486c <TIM_TI1_SetConfig+0xdc>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d007      	beq.n	80047f6 <TIM_TI1_SetConfig+0x66>
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	4a21      	ldr	r2, [pc, #132]	@ (8004870 <TIM_TI1_SetConfig+0xe0>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d003      	beq.n	80047f6 <TIM_TI1_SetConfig+0x66>
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	4a20      	ldr	r2, [pc, #128]	@ (8004874 <TIM_TI1_SetConfig+0xe4>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d101      	bne.n	80047fa <TIM_TI1_SetConfig+0x6a>
 80047f6:	2301      	movs	r3, #1
 80047f8:	e000      	b.n	80047fc <TIM_TI1_SetConfig+0x6c>
 80047fa:	2300      	movs	r3, #0
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d008      	beq.n	8004812 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	f023 0303 	bic.w	r3, r3, #3
 8004806:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004808:	697a      	ldr	r2, [r7, #20]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	4313      	orrs	r3, r2
 800480e:	617b      	str	r3, [r7, #20]
 8004810:	e003      	b.n	800481a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	f043 0301 	orr.w	r3, r3, #1
 8004818:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004820:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	011b      	lsls	r3, r3, #4
 8004826:	b2db      	uxtb	r3, r3
 8004828:	697a      	ldr	r2, [r7, #20]
 800482a:	4313      	orrs	r3, r2
 800482c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	f023 030a 	bic.w	r3, r3, #10
 8004834:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	f003 030a 	and.w	r3, r3, #10
 800483c:	693a      	ldr	r2, [r7, #16]
 800483e:	4313      	orrs	r3, r2
 8004840:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	697a      	ldr	r2, [r7, #20]
 8004846:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	693a      	ldr	r2, [r7, #16]
 800484c:	621a      	str	r2, [r3, #32]
}
 800484e:	bf00      	nop
 8004850:	371c      	adds	r7, #28
 8004852:	46bd      	mov	sp, r7
 8004854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004858:	4770      	bx	lr
 800485a:	bf00      	nop
 800485c:	40010000 	.word	0x40010000
 8004860:	40000400 	.word	0x40000400
 8004864:	40000800 	.word	0x40000800
 8004868:	40000c00 	.word	0x40000c00
 800486c:	40010400 	.word	0x40010400
 8004870:	40014000 	.word	0x40014000
 8004874:	40001800 	.word	0x40001800

08004878 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004878:	b480      	push	{r7}
 800487a:	b087      	sub	sp, #28
 800487c:	af00      	add	r7, sp, #0
 800487e:	60f8      	str	r0, [r7, #12]
 8004880:	60b9      	str	r1, [r7, #8]
 8004882:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	6a1b      	ldr	r3, [r3, #32]
 8004888:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	6a1b      	ldr	r3, [r3, #32]
 800488e:	f023 0201 	bic.w	r2, r3, #1
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	699b      	ldr	r3, [r3, #24]
 800489a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80048a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	011b      	lsls	r3, r3, #4
 80048a8:	693a      	ldr	r2, [r7, #16]
 80048aa:	4313      	orrs	r3, r2
 80048ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	f023 030a 	bic.w	r3, r3, #10
 80048b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80048b6:	697a      	ldr	r2, [r7, #20]
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	4313      	orrs	r3, r2
 80048bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	693a      	ldr	r2, [r7, #16]
 80048c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	697a      	ldr	r2, [r7, #20]
 80048c8:	621a      	str	r2, [r3, #32]
}
 80048ca:	bf00      	nop
 80048cc:	371c      	adds	r7, #28
 80048ce:	46bd      	mov	sp, r7
 80048d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d4:	4770      	bx	lr

080048d6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80048d6:	b480      	push	{r7}
 80048d8:	b087      	sub	sp, #28
 80048da:	af00      	add	r7, sp, #0
 80048dc:	60f8      	str	r0, [r7, #12]
 80048de:	60b9      	str	r1, [r7, #8]
 80048e0:	607a      	str	r2, [r7, #4]
 80048e2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	6a1b      	ldr	r3, [r3, #32]
 80048e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	6a1b      	ldr	r3, [r3, #32]
 80048ee:	f023 0210 	bic.w	r2, r3, #16
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	699b      	ldr	r3, [r3, #24]
 80048fa:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004902:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	021b      	lsls	r3, r3, #8
 8004908:	693a      	ldr	r2, [r7, #16]
 800490a:	4313      	orrs	r3, r2
 800490c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004914:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	031b      	lsls	r3, r3, #12
 800491a:	b29b      	uxth	r3, r3
 800491c:	693a      	ldr	r2, [r7, #16]
 800491e:	4313      	orrs	r3, r2
 8004920:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004928:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	011b      	lsls	r3, r3, #4
 800492e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8004932:	697a      	ldr	r2, [r7, #20]
 8004934:	4313      	orrs	r3, r2
 8004936:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	693a      	ldr	r2, [r7, #16]
 800493c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	697a      	ldr	r2, [r7, #20]
 8004942:	621a      	str	r2, [r3, #32]
}
 8004944:	bf00      	nop
 8004946:	371c      	adds	r7, #28
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr

08004950 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004950:	b480      	push	{r7}
 8004952:	b087      	sub	sp, #28
 8004954:	af00      	add	r7, sp, #0
 8004956:	60f8      	str	r0, [r7, #12]
 8004958:	60b9      	str	r1, [r7, #8]
 800495a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	6a1b      	ldr	r3, [r3, #32]
 8004960:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	6a1b      	ldr	r3, [r3, #32]
 8004966:	f023 0210 	bic.w	r2, r3, #16
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	699b      	ldr	r3, [r3, #24]
 8004972:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800497a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	031b      	lsls	r3, r3, #12
 8004980:	693a      	ldr	r2, [r7, #16]
 8004982:	4313      	orrs	r3, r2
 8004984:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800498c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	011b      	lsls	r3, r3, #4
 8004992:	697a      	ldr	r2, [r7, #20]
 8004994:	4313      	orrs	r3, r2
 8004996:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	693a      	ldr	r2, [r7, #16]
 800499c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	697a      	ldr	r2, [r7, #20]
 80049a2:	621a      	str	r2, [r3, #32]
}
 80049a4:	bf00      	nop
 80049a6:	371c      	adds	r7, #28
 80049a8:	46bd      	mov	sp, r7
 80049aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ae:	4770      	bx	lr

080049b0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b087      	sub	sp, #28
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	60f8      	str	r0, [r7, #12]
 80049b8:	60b9      	str	r1, [r7, #8]
 80049ba:	607a      	str	r2, [r7, #4]
 80049bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	6a1b      	ldr	r3, [r3, #32]
 80049c2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	6a1b      	ldr	r3, [r3, #32]
 80049c8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	69db      	ldr	r3, [r3, #28]
 80049d4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	f023 0303 	bic.w	r3, r3, #3
 80049dc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80049de:	693a      	ldr	r2, [r7, #16]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80049ec:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	011b      	lsls	r3, r3, #4
 80049f2:	b2db      	uxtb	r3, r3
 80049f4:	693a      	ldr	r2, [r7, #16]
 80049f6:	4313      	orrs	r3, r2
 80049f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8004a00:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	021b      	lsls	r3, r3, #8
 8004a06:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8004a0a:	697a      	ldr	r2, [r7, #20]
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	693a      	ldr	r2, [r7, #16]
 8004a14:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	697a      	ldr	r2, [r7, #20]
 8004a1a:	621a      	str	r2, [r3, #32]
}
 8004a1c:	bf00      	nop
 8004a1e:	371c      	adds	r7, #28
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr

08004a28 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b087      	sub	sp, #28
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	60f8      	str	r0, [r7, #12]
 8004a30:	60b9      	str	r1, [r7, #8]
 8004a32:	607a      	str	r2, [r7, #4]
 8004a34:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	6a1b      	ldr	r3, [r3, #32]
 8004a3a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	6a1b      	ldr	r3, [r3, #32]
 8004a40:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	69db      	ldr	r3, [r3, #28]
 8004a4c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a54:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	021b      	lsls	r3, r3, #8
 8004a5a:	693a      	ldr	r2, [r7, #16]
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004a66:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	031b      	lsls	r3, r3, #12
 8004a6c:	b29b      	uxth	r3, r3
 8004a6e:	693a      	ldr	r2, [r7, #16]
 8004a70:	4313      	orrs	r3, r2
 8004a72:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8004a7a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	031b      	lsls	r3, r3, #12
 8004a80:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8004a84:	697a      	ldr	r2, [r7, #20]
 8004a86:	4313      	orrs	r3, r2
 8004a88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	693a      	ldr	r2, [r7, #16]
 8004a8e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	697a      	ldr	r2, [r7, #20]
 8004a94:	621a      	str	r2, [r3, #32]
}
 8004a96:	bf00      	nop
 8004a98:	371c      	adds	r7, #28
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr

08004aa2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004aa2:	b480      	push	{r7}
 8004aa4:	b085      	sub	sp, #20
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	6078      	str	r0, [r7, #4]
 8004aaa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ab8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004aba:	683a      	ldr	r2, [r7, #0]
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	f043 0307 	orr.w	r3, r3, #7
 8004ac4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	68fa      	ldr	r2, [r7, #12]
 8004aca:	609a      	str	r2, [r3, #8]
}
 8004acc:	bf00      	nop
 8004ace:	3714      	adds	r7, #20
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr

08004ad8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b087      	sub	sp, #28
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	60f8      	str	r0, [r7, #12]
 8004ae0:	60b9      	str	r1, [r7, #8]
 8004ae2:	607a      	str	r2, [r7, #4]
 8004ae4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004af2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	021a      	lsls	r2, r3, #8
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	431a      	orrs	r2, r3
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	4313      	orrs	r3, r2
 8004b00:	697a      	ldr	r2, [r7, #20]
 8004b02:	4313      	orrs	r3, r2
 8004b04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	697a      	ldr	r2, [r7, #20]
 8004b0a:	609a      	str	r2, [r3, #8]
}
 8004b0c:	bf00      	nop
 8004b0e:	371c      	adds	r7, #28
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr

08004b18 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b087      	sub	sp, #28
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	60f8      	str	r0, [r7, #12]
 8004b20:	60b9      	str	r1, [r7, #8]
 8004b22:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	f003 031f 	and.w	r3, r3, #31
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b30:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	6a1a      	ldr	r2, [r3, #32]
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	43db      	mvns	r3, r3
 8004b3a:	401a      	ands	r2, r3
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	6a1a      	ldr	r2, [r3, #32]
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	f003 031f 	and.w	r3, r3, #31
 8004b4a:	6879      	ldr	r1, [r7, #4]
 8004b4c:	fa01 f303 	lsl.w	r3, r1, r3
 8004b50:	431a      	orrs	r2, r3
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	621a      	str	r2, [r3, #32]
}
 8004b56:	bf00      	nop
 8004b58:	371c      	adds	r7, #28
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr
	...

08004b64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b085      	sub	sp, #20
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d101      	bne.n	8004b7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b78:	2302      	movs	r3, #2
 8004b7a:	e05a      	b.n	8004c32 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2202      	movs	r2, #2
 8004b88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ba2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	68fa      	ldr	r2, [r7, #12]
 8004baa:	4313      	orrs	r3, r2
 8004bac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	68fa      	ldr	r2, [r7, #12]
 8004bb4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a21      	ldr	r2, [pc, #132]	@ (8004c40 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d022      	beq.n	8004c06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bc8:	d01d      	beq.n	8004c06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a1d      	ldr	r2, [pc, #116]	@ (8004c44 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d018      	beq.n	8004c06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a1b      	ldr	r2, [pc, #108]	@ (8004c48 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d013      	beq.n	8004c06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a1a      	ldr	r2, [pc, #104]	@ (8004c4c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d00e      	beq.n	8004c06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a18      	ldr	r2, [pc, #96]	@ (8004c50 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d009      	beq.n	8004c06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a17      	ldr	r2, [pc, #92]	@ (8004c54 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d004      	beq.n	8004c06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a15      	ldr	r2, [pc, #84]	@ (8004c58 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d10c      	bne.n	8004c20 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	68ba      	ldr	r2, [r7, #8]
 8004c14:	4313      	orrs	r3, r2
 8004c16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	68ba      	ldr	r2, [r7, #8]
 8004c1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2201      	movs	r2, #1
 8004c24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004c30:	2300      	movs	r3, #0
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	3714      	adds	r7, #20
 8004c36:	46bd      	mov	sp, r7
 8004c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3c:	4770      	bx	lr
 8004c3e:	bf00      	nop
 8004c40:	40010000 	.word	0x40010000
 8004c44:	40000400 	.word	0x40000400
 8004c48:	40000800 	.word	0x40000800
 8004c4c:	40000c00 	.word	0x40000c00
 8004c50:	40010400 	.word	0x40010400
 8004c54:	40014000 	.word	0x40014000
 8004c58:	40001800 	.word	0x40001800

08004c5c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b083      	sub	sp, #12
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c64:	bf00      	nop
 8004c66:	370c      	adds	r7, #12
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr

08004c70 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b083      	sub	sp, #12
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c78:	bf00      	nop
 8004c7a:	370c      	adds	r7, #12
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c82:	4770      	bx	lr

08004c84 <__NVIC_SetPriority>:
{
 8004c84:	b480      	push	{r7}
 8004c86:	b083      	sub	sp, #12
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	6039      	str	r1, [r7, #0]
 8004c8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	db0a      	blt.n	8004cae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	b2da      	uxtb	r2, r3
 8004c9c:	490c      	ldr	r1, [pc, #48]	@ (8004cd0 <__NVIC_SetPriority+0x4c>)
 8004c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ca2:	0112      	lsls	r2, r2, #4
 8004ca4:	b2d2      	uxtb	r2, r2
 8004ca6:	440b      	add	r3, r1
 8004ca8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004cac:	e00a      	b.n	8004cc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	b2da      	uxtb	r2, r3
 8004cb2:	4908      	ldr	r1, [pc, #32]	@ (8004cd4 <__NVIC_SetPriority+0x50>)
 8004cb4:	79fb      	ldrb	r3, [r7, #7]
 8004cb6:	f003 030f 	and.w	r3, r3, #15
 8004cba:	3b04      	subs	r3, #4
 8004cbc:	0112      	lsls	r2, r2, #4
 8004cbe:	b2d2      	uxtb	r2, r2
 8004cc0:	440b      	add	r3, r1
 8004cc2:	761a      	strb	r2, [r3, #24]
}
 8004cc4:	bf00      	nop
 8004cc6:	370c      	adds	r7, #12
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cce:	4770      	bx	lr
 8004cd0:	e000e100 	.word	0xe000e100
 8004cd4:	e000ed00 	.word	0xe000ed00

08004cd8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004cdc:	2100      	movs	r1, #0
 8004cde:	f06f 0004 	mvn.w	r0, #4
 8004ce2:	f7ff ffcf 	bl	8004c84 <__NVIC_SetPriority>
#endif
}
 8004ce6:	bf00      	nop
 8004ce8:	bd80      	pop	{r7, pc}
	...

08004cec <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004cec:	b480      	push	{r7}
 8004cee:	b083      	sub	sp, #12
 8004cf0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004cf2:	f3ef 8305 	mrs	r3, IPSR
 8004cf6:	603b      	str	r3, [r7, #0]
  return(result);
 8004cf8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d003      	beq.n	8004d06 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004cfe:	f06f 0305 	mvn.w	r3, #5
 8004d02:	607b      	str	r3, [r7, #4]
 8004d04:	e00c      	b.n	8004d20 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004d06:	4b0a      	ldr	r3, [pc, #40]	@ (8004d30 <osKernelInitialize+0x44>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d105      	bne.n	8004d1a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004d0e:	4b08      	ldr	r3, [pc, #32]	@ (8004d30 <osKernelInitialize+0x44>)
 8004d10:	2201      	movs	r2, #1
 8004d12:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004d14:	2300      	movs	r3, #0
 8004d16:	607b      	str	r3, [r7, #4]
 8004d18:	e002      	b.n	8004d20 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8004d1e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004d20:	687b      	ldr	r3, [r7, #4]
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	370c      	adds	r7, #12
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr
 8004d2e:	bf00      	nop
 8004d30:	20000150 	.word	0x20000150

08004d34 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b082      	sub	sp, #8
 8004d38:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d3a:	f3ef 8305 	mrs	r3, IPSR
 8004d3e:	603b      	str	r3, [r7, #0]
  return(result);
 8004d40:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d003      	beq.n	8004d4e <osKernelStart+0x1a>
    stat = osErrorISR;
 8004d46:	f06f 0305 	mvn.w	r3, #5
 8004d4a:	607b      	str	r3, [r7, #4]
 8004d4c:	e010      	b.n	8004d70 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004d4e:	4b0b      	ldr	r3, [pc, #44]	@ (8004d7c <osKernelStart+0x48>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d109      	bne.n	8004d6a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004d56:	f7ff ffbf 	bl	8004cd8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004d5a:	4b08      	ldr	r3, [pc, #32]	@ (8004d7c <osKernelStart+0x48>)
 8004d5c:	2202      	movs	r2, #2
 8004d5e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004d60:	f001 faf6 	bl	8006350 <vTaskStartScheduler>
      stat = osOK;
 8004d64:	2300      	movs	r3, #0
 8004d66:	607b      	str	r3, [r7, #4]
 8004d68:	e002      	b.n	8004d70 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004d6a:	f04f 33ff 	mov.w	r3, #4294967295
 8004d6e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004d70:	687b      	ldr	r3, [r7, #4]
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3708      	adds	r7, #8
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}
 8004d7a:	bf00      	nop
 8004d7c:	20000150 	.word	0x20000150

08004d80 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b08e      	sub	sp, #56	@ 0x38
 8004d84:	af04      	add	r7, sp, #16
 8004d86:	60f8      	str	r0, [r7, #12]
 8004d88:	60b9      	str	r1, [r7, #8]
 8004d8a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d90:	f3ef 8305 	mrs	r3, IPSR
 8004d94:	617b      	str	r3, [r7, #20]
  return(result);
 8004d96:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d17e      	bne.n	8004e9a <osThreadNew+0x11a>
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d07b      	beq.n	8004e9a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004da2:	2380      	movs	r3, #128	@ 0x80
 8004da4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004da6:	2318      	movs	r3, #24
 8004da8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004daa:	2300      	movs	r3, #0
 8004dac:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8004dae:	f04f 33ff 	mov.w	r3, #4294967295
 8004db2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d045      	beq.n	8004e46 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d002      	beq.n	8004dc8 <osThreadNew+0x48>
        name = attr->name;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	699b      	ldr	r3, [r3, #24]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d002      	beq.n	8004dd6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	699b      	ldr	r3, [r3, #24]
 8004dd4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004dd6:	69fb      	ldr	r3, [r7, #28]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d008      	beq.n	8004dee <osThreadNew+0x6e>
 8004ddc:	69fb      	ldr	r3, [r7, #28]
 8004dde:	2b38      	cmp	r3, #56	@ 0x38
 8004de0:	d805      	bhi.n	8004dee <osThreadNew+0x6e>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	f003 0301 	and.w	r3, r3, #1
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d001      	beq.n	8004df2 <osThreadNew+0x72>
        return (NULL);
 8004dee:	2300      	movs	r3, #0
 8004df0:	e054      	b.n	8004e9c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	695b      	ldr	r3, [r3, #20]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d003      	beq.n	8004e02 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	695b      	ldr	r3, [r3, #20]
 8004dfe:	089b      	lsrs	r3, r3, #2
 8004e00:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d00e      	beq.n	8004e28 <osThreadNew+0xa8>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	68db      	ldr	r3, [r3, #12]
 8004e0e:	2b5b      	cmp	r3, #91	@ 0x5b
 8004e10:	d90a      	bls.n	8004e28 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d006      	beq.n	8004e28 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	695b      	ldr	r3, [r3, #20]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d002      	beq.n	8004e28 <osThreadNew+0xa8>
        mem = 1;
 8004e22:	2301      	movs	r3, #1
 8004e24:	61bb      	str	r3, [r7, #24]
 8004e26:	e010      	b.n	8004e4a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d10c      	bne.n	8004e4a <osThreadNew+0xca>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	68db      	ldr	r3, [r3, #12]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d108      	bne.n	8004e4a <osThreadNew+0xca>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	691b      	ldr	r3, [r3, #16]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d104      	bne.n	8004e4a <osThreadNew+0xca>
          mem = 0;
 8004e40:	2300      	movs	r3, #0
 8004e42:	61bb      	str	r3, [r7, #24]
 8004e44:	e001      	b.n	8004e4a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004e46:	2300      	movs	r3, #0
 8004e48:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004e4a:	69bb      	ldr	r3, [r7, #24]
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d110      	bne.n	8004e72 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004e54:	687a      	ldr	r2, [r7, #4]
 8004e56:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004e58:	9202      	str	r2, [sp, #8]
 8004e5a:	9301      	str	r3, [sp, #4]
 8004e5c:	69fb      	ldr	r3, [r7, #28]
 8004e5e:	9300      	str	r3, [sp, #0]
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	6a3a      	ldr	r2, [r7, #32]
 8004e64:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004e66:	68f8      	ldr	r0, [r7, #12]
 8004e68:	f001 f816 	bl	8005e98 <xTaskCreateStatic>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	613b      	str	r3, [r7, #16]
 8004e70:	e013      	b.n	8004e9a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004e72:	69bb      	ldr	r3, [r7, #24]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d110      	bne.n	8004e9a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004e78:	6a3b      	ldr	r3, [r7, #32]
 8004e7a:	b29a      	uxth	r2, r3
 8004e7c:	f107 0310 	add.w	r3, r7, #16
 8004e80:	9301      	str	r3, [sp, #4]
 8004e82:	69fb      	ldr	r3, [r7, #28]
 8004e84:	9300      	str	r3, [sp, #0]
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004e8a:	68f8      	ldr	r0, [r7, #12]
 8004e8c:	f001 f864 	bl	8005f58 <xTaskCreate>
 8004e90:	4603      	mov	r3, r0
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d001      	beq.n	8004e9a <osThreadNew+0x11a>
            hTask = NULL;
 8004e96:	2300      	movs	r3, #0
 8004e98:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004e9a:	693b      	ldr	r3, [r7, #16]
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3728      	adds	r7, #40	@ 0x28
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}

08004ea4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004ea4:	b480      	push	{r7}
 8004ea6:	b085      	sub	sp, #20
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	60f8      	str	r0, [r7, #12]
 8004eac:	60b9      	str	r1, [r7, #8]
 8004eae:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	4a07      	ldr	r2, [pc, #28]	@ (8004ed0 <vApplicationGetIdleTaskMemory+0x2c>)
 8004eb4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	4a06      	ldr	r2, [pc, #24]	@ (8004ed4 <vApplicationGetIdleTaskMemory+0x30>)
 8004eba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2280      	movs	r2, #128	@ 0x80
 8004ec0:	601a      	str	r2, [r3, #0]
}
 8004ec2:	bf00      	nop
 8004ec4:	3714      	adds	r7, #20
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ecc:	4770      	bx	lr
 8004ece:	bf00      	nop
 8004ed0:	20000154 	.word	0x20000154
 8004ed4:	200001b0 	.word	0x200001b0

08004ed8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004ed8:	b480      	push	{r7}
 8004eda:	b085      	sub	sp, #20
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	60f8      	str	r0, [r7, #12]
 8004ee0:	60b9      	str	r1, [r7, #8]
 8004ee2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	4a07      	ldr	r2, [pc, #28]	@ (8004f04 <vApplicationGetTimerTaskMemory+0x2c>)
 8004ee8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	4a06      	ldr	r2, [pc, #24]	@ (8004f08 <vApplicationGetTimerTaskMemory+0x30>)
 8004eee:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004ef6:	601a      	str	r2, [r3, #0]
}
 8004ef8:	bf00      	nop
 8004efa:	3714      	adds	r7, #20
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr
 8004f04:	200003b0 	.word	0x200003b0
 8004f08:	2000040c 	.word	0x2000040c

08004f0c <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b082      	sub	sp, #8
 8004f10:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8004f12:	2020      	movs	r0, #32
 8004f14:	f002 ff22 	bl	8007d5c <pvPortMalloc>
 8004f18:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d00a      	beq.n	8004f36 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2200      	movs	r2, #0
 8004f24:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	3304      	adds	r3, #4
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f000 fa06 	bl	800533c <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2200      	movs	r2, #0
 8004f34:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8004f36:	687b      	ldr	r3, [r7, #4]
	}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3708      	adds	r7, #8
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}

08004f40 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b090      	sub	sp, #64	@ 0x40
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	60f8      	str	r0, [r7, #12]
 8004f48:	60b9      	str	r1, [r7, #8]
 8004f4a:	607a      	str	r2, [r7, #4]
 8004f4c:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	637b      	str	r3, [r7, #52]	@ 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8004f52:	2300      	movs	r3, #0
 8004f54:	63bb      	str	r3, [r7, #56]	@ 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8004f56:	2300      	movs	r3, #0
 8004f58:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d10b      	bne.n	8004f78 <xEventGroupWaitBits+0x38>
	__asm volatile
 8004f60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f64:	f383 8811 	msr	BASEPRI, r3
 8004f68:	f3bf 8f6f 	isb	sy
 8004f6c:	f3bf 8f4f 	dsb	sy
 8004f70:	623b      	str	r3, [r7, #32]
}
 8004f72:	bf00      	nop
 8004f74:	bf00      	nop
 8004f76:	e7fd      	b.n	8004f74 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004f7e:	d30b      	bcc.n	8004f98 <xEventGroupWaitBits+0x58>
	__asm volatile
 8004f80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f84:	f383 8811 	msr	BASEPRI, r3
 8004f88:	f3bf 8f6f 	isb	sy
 8004f8c:	f3bf 8f4f 	dsb	sy
 8004f90:	61fb      	str	r3, [r7, #28]
}
 8004f92:	bf00      	nop
 8004f94:	bf00      	nop
 8004f96:	e7fd      	b.n	8004f94 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d10b      	bne.n	8004fb6 <xEventGroupWaitBits+0x76>
	__asm volatile
 8004f9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fa2:	f383 8811 	msr	BASEPRI, r3
 8004fa6:	f3bf 8f6f 	isb	sy
 8004faa:	f3bf 8f4f 	dsb	sy
 8004fae:	61bb      	str	r3, [r7, #24]
}
 8004fb0:	bf00      	nop
 8004fb2:	bf00      	nop
 8004fb4:	e7fd      	b.n	8004fb2 <xEventGroupWaitBits+0x72>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004fb6:	f001 fecd 	bl	8006d54 <xTaskGetSchedulerState>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d102      	bne.n	8004fc6 <xEventGroupWaitBits+0x86>
 8004fc0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d101      	bne.n	8004fca <xEventGroupWaitBits+0x8a>
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e000      	b.n	8004fcc <xEventGroupWaitBits+0x8c>
 8004fca:	2300      	movs	r3, #0
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d10b      	bne.n	8004fe8 <xEventGroupWaitBits+0xa8>
	__asm volatile
 8004fd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fd4:	f383 8811 	msr	BASEPRI, r3
 8004fd8:	f3bf 8f6f 	isb	sy
 8004fdc:	f3bf 8f4f 	dsb	sy
 8004fe0:	617b      	str	r3, [r7, #20]
}
 8004fe2:	bf00      	nop
 8004fe4:	bf00      	nop
 8004fe6:	e7fd      	b.n	8004fe4 <xEventGroupWaitBits+0xa4>
	}
	#endif

	vTaskSuspendAll();
 8004fe8:	f001 fa1a 	bl	8006420 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8004fec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8004ff2:	683a      	ldr	r2, [r7, #0]
 8004ff4:	68b9      	ldr	r1, [r7, #8]
 8004ff6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004ff8:	f000 f96a 	bl	80052d0 <prvTestWaitCondition>
 8004ffc:	62b8      	str	r0, [r7, #40]	@ 0x28

		if( xWaitConditionMet != pdFALSE )
 8004ffe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005000:	2b00      	cmp	r3, #0
 8005002:	d00e      	beq.n	8005022 <xEventGroupWaitBits+0xe2>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8005004:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005006:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8005008:	2300      	movs	r3, #0
 800500a:	64bb      	str	r3, [r7, #72]	@ 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d028      	beq.n	8005064 <xEventGroupWaitBits+0x124>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8005012:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	43db      	mvns	r3, r3
 800501a:	401a      	ands	r2, r3
 800501c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800501e:	601a      	str	r2, [r3, #0]
 8005020:	e020      	b.n	8005064 <xEventGroupWaitBits+0x124>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8005022:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005024:	2b00      	cmp	r3, #0
 8005026:	d104      	bne.n	8005032 <xEventGroupWaitBits+0xf2>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8005028:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800502a:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTimeoutOccurred = pdTRUE;
 800502c:	2301      	movs	r3, #1
 800502e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005030:	e018      	b.n	8005064 <xEventGroupWaitBits+0x124>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d003      	beq.n	8005040 <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8005038:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800503a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800503e:	63bb      	str	r3, [r7, #56]	@ 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d003      	beq.n	800504e <xEventGroupWaitBits+0x10e>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8005046:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005048:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800504c:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800504e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005050:	1d18      	adds	r0, r3, #4
 8005052:	68ba      	ldr	r2, [r7, #8]
 8005054:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005056:	4313      	orrs	r3, r2
 8005058:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800505a:	4619      	mov	r1, r3
 800505c:	f001 fbec 	bl	8006838 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8005060:	2300      	movs	r3, #0
 8005062:	63fb      	str	r3, [r7, #60]	@ 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8005064:	f001 f9ea 	bl	800643c <xTaskResumeAll>
 8005068:	6278      	str	r0, [r7, #36]	@ 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800506a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800506c:	2b00      	cmp	r3, #0
 800506e:	d031      	beq.n	80050d4 <xEventGroupWaitBits+0x194>
	{
		if( xAlreadyYielded == pdFALSE )
 8005070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005072:	2b00      	cmp	r3, #0
 8005074:	d107      	bne.n	8005086 <xEventGroupWaitBits+0x146>
		{
			portYIELD_WITHIN_API();
 8005076:	4b1a      	ldr	r3, [pc, #104]	@ (80050e0 <xEventGroupWaitBits+0x1a0>)
 8005078:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800507c:	601a      	str	r2, [r3, #0]
 800507e:	f3bf 8f4f 	dsb	sy
 8005082:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8005086:	f001 fef3 	bl	8006e70 <uxTaskResetEventItemValue>
 800508a:	63f8      	str	r0, [r7, #60]	@ 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800508c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800508e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005092:	2b00      	cmp	r3, #0
 8005094:	d11a      	bne.n	80050cc <xEventGroupWaitBits+0x18c>
		{
			taskENTER_CRITICAL();
 8005096:	f002 fd3f 	bl	8007b18 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800509a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	63fb      	str	r3, [r7, #60]	@ 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 80050a0:	683a      	ldr	r2, [r7, #0]
 80050a2:	68b9      	ldr	r1, [r7, #8]
 80050a4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80050a6:	f000 f913 	bl	80052d0 <prvTestWaitCondition>
 80050aa:	4603      	mov	r3, r0
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d009      	beq.n	80050c4 <xEventGroupWaitBits+0x184>
				{
					if( xClearOnExit != pdFALSE )
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d006      	beq.n	80050c4 <xEventGroupWaitBits+0x184>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80050b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	43db      	mvns	r3, r3
 80050be:	401a      	ands	r2, r3
 80050c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050c2:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 80050c4:	2301      	movs	r3, #1
 80050c6:	633b      	str	r3, [r7, #48]	@ 0x30
			}
			taskEXIT_CRITICAL();
 80050c8:	f002 fd58 	bl	8007b7c <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80050cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050ce:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80050d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 80050d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3740      	adds	r7, #64	@ 0x40
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}
 80050de:	bf00      	nop
 80050e0:	e000ed04 	.word	0xe000ed04

080050e4 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b086      	sub	sp, #24
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
 80050ec:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d10b      	bne.n	8005110 <xEventGroupClearBits+0x2c>
	__asm volatile
 80050f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050fc:	f383 8811 	msr	BASEPRI, r3
 8005100:	f3bf 8f6f 	isb	sy
 8005104:	f3bf 8f4f 	dsb	sy
 8005108:	60fb      	str	r3, [r7, #12]
}
 800510a:	bf00      	nop
 800510c:	bf00      	nop
 800510e:	e7fd      	b.n	800510c <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005116:	d30b      	bcc.n	8005130 <xEventGroupClearBits+0x4c>
	__asm volatile
 8005118:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800511c:	f383 8811 	msr	BASEPRI, r3
 8005120:	f3bf 8f6f 	isb	sy
 8005124:	f3bf 8f4f 	dsb	sy
 8005128:	60bb      	str	r3, [r7, #8]
}
 800512a:	bf00      	nop
 800512c:	bf00      	nop
 800512e:	e7fd      	b.n	800512c <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 8005130:	f002 fcf2 	bl	8007b18 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	681a      	ldr	r2, [r3, #0]
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	43db      	mvns	r3, r3
 8005142:	401a      	ands	r2, r3
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 8005148:	f002 fd18 	bl	8007b7c <vPortExitCritical>

	return uxReturn;
 800514c:	693b      	ldr	r3, [r7, #16]
}
 800514e:	4618      	mov	r0, r3
 8005150:	3718      	adds	r7, #24
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}

08005156 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 8005156:	b480      	push	{r7}
 8005158:	b089      	sub	sp, #36	@ 0x24
 800515a:	af00      	add	r7, sp, #0
 800515c:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005162:	f3ef 8211 	mrs	r2, BASEPRI
 8005166:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800516a:	f383 8811 	msr	BASEPRI, r3
 800516e:	f3bf 8f6f 	isb	sy
 8005172:	f3bf 8f4f 	dsb	sy
 8005176:	60fa      	str	r2, [r7, #12]
 8005178:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800517a:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800517c:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 800517e:	69fb      	ldr	r3, [r7, #28]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	617b      	str	r3, [r7, #20]
 8005184:	69bb      	ldr	r3, [r7, #24]
 8005186:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800518e:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 8005190:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 8005192:	4618      	mov	r0, r3
 8005194:	3724      	adds	r7, #36	@ 0x24
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr

0800519e <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800519e:	b580      	push	{r7, lr}
 80051a0:	b08e      	sub	sp, #56	@ 0x38
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	6078      	str	r0, [r7, #4]
 80051a6:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 80051a8:	2300      	movs	r3, #0
 80051aa:	633b      	str	r3, [r7, #48]	@ 0x30
EventGroup_t *pxEventBits = xEventGroup;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	62bb      	str	r3, [r7, #40]	@ 0x28
BaseType_t xMatchFound = pdFALSE;
 80051b0:	2300      	movs	r3, #0
 80051b2:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d10b      	bne.n	80051d2 <xEventGroupSetBits+0x34>
	__asm volatile
 80051ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051be:	f383 8811 	msr	BASEPRI, r3
 80051c2:	f3bf 8f6f 	isb	sy
 80051c6:	f3bf 8f4f 	dsb	sy
 80051ca:	613b      	str	r3, [r7, #16]
}
 80051cc:	bf00      	nop
 80051ce:	bf00      	nop
 80051d0:	e7fd      	b.n	80051ce <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80051d8:	d30b      	bcc.n	80051f2 <xEventGroupSetBits+0x54>
	__asm volatile
 80051da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051de:	f383 8811 	msr	BASEPRI, r3
 80051e2:	f3bf 8f6f 	isb	sy
 80051e6:	f3bf 8f4f 	dsb	sy
 80051ea:	60fb      	str	r3, [r7, #12]
}
 80051ec:	bf00      	nop
 80051ee:	bf00      	nop
 80051f0:	e7fd      	b.n	80051ee <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 80051f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051f4:	3304      	adds	r3, #4
 80051f6:	627b      	str	r3, [r7, #36]	@ 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80051f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051fa:	3308      	adds	r3, #8
 80051fc:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 80051fe:	f001 f90f 	bl	8006420 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8005202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005204:	68db      	ldr	r3, [r3, #12]
 8005206:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8005208:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	431a      	orrs	r2, r3
 8005210:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005212:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8005214:	e03c      	b.n	8005290 <xEventGroupSetBits+0xf2>
		{
			pxNext = listGET_NEXT( pxListItem );
 8005216:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800521c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8005222:	2300      	movs	r3, #0
 8005224:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8005226:	69bb      	ldr	r3, [r7, #24]
 8005228:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800522c:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800522e:	69bb      	ldr	r3, [r7, #24]
 8005230:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005234:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800523c:	2b00      	cmp	r3, #0
 800523e:	d108      	bne.n	8005252 <xEventGroupSetBits+0xb4>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8005240:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	69bb      	ldr	r3, [r7, #24]
 8005246:	4013      	ands	r3, r2
 8005248:	2b00      	cmp	r3, #0
 800524a:	d00b      	beq.n	8005264 <xEventGroupSetBits+0xc6>
				{
					xMatchFound = pdTRUE;
 800524c:	2301      	movs	r3, #1
 800524e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005250:	e008      	b.n	8005264 <xEventGroupSetBits+0xc6>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8005252:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005254:	681a      	ldr	r2, [r3, #0]
 8005256:	69bb      	ldr	r3, [r7, #24]
 8005258:	4013      	ands	r3, r2
 800525a:	69ba      	ldr	r2, [r7, #24]
 800525c:	429a      	cmp	r2, r3
 800525e:	d101      	bne.n	8005264 <xEventGroupSetBits+0xc6>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8005260:	2301      	movs	r3, #1
 8005262:	62fb      	str	r3, [r7, #44]	@ 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8005264:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005266:	2b00      	cmp	r3, #0
 8005268:	d010      	beq.n	800528c <xEventGroupSetBits+0xee>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005270:	2b00      	cmp	r3, #0
 8005272:	d003      	beq.n	800527c <xEventGroupSetBits+0xde>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8005274:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005276:	69bb      	ldr	r3, [r7, #24]
 8005278:	4313      	orrs	r3, r2
 800527a:	633b      	str	r3, [r7, #48]	@ 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800527c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005284:	4619      	mov	r1, r3
 8005286:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8005288:	f001 fba4 	bl	80069d4 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800528c:	69fb      	ldr	r3, [r7, #28]
 800528e:	637b      	str	r3, [r7, #52]	@ 0x34
		while( pxListItem != pxListEnd )
 8005290:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005292:	6a3b      	ldr	r3, [r7, #32]
 8005294:	429a      	cmp	r2, r3
 8005296:	d1be      	bne.n	8005216 <xEventGroupSetBits+0x78>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8005298:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800529e:	43db      	mvns	r3, r3
 80052a0:	401a      	ands	r2, r3
 80052a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052a4:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 80052a6:	f001 f8c9 	bl	800643c <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 80052aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052ac:	681b      	ldr	r3, [r3, #0]
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3738      	adds	r7, #56	@ 0x38
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}

080052b6 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 80052b6:	b580      	push	{r7, lr}
 80052b8:	b082      	sub	sp, #8
 80052ba:	af00      	add	r7, sp, #0
 80052bc:	6078      	str	r0, [r7, #4]
 80052be:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 80052c0:	6839      	ldr	r1, [r7, #0]
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f7ff ff6b 	bl	800519e <xEventGroupSetBits>
}
 80052c8:	bf00      	nop
 80052ca:	3708      	adds	r7, #8
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}

080052d0 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 80052d0:	b480      	push	{r7}
 80052d2:	b087      	sub	sp, #28
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	60f8      	str	r0, [r7, #12]
 80052d8:	60b9      	str	r1, [r7, #8]
 80052da:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 80052dc:	2300      	movs	r3, #0
 80052de:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d107      	bne.n	80052f6 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 80052e6:	68fa      	ldr	r2, [r7, #12]
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	4013      	ands	r3, r2
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d00a      	beq.n	8005306 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80052f0:	2301      	movs	r3, #1
 80052f2:	617b      	str	r3, [r7, #20]
 80052f4:	e007      	b.n	8005306 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80052f6:	68fa      	ldr	r2, [r7, #12]
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	4013      	ands	r3, r2
 80052fc:	68ba      	ldr	r2, [r7, #8]
 80052fe:	429a      	cmp	r2, r3
 8005300:	d101      	bne.n	8005306 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8005302:	2301      	movs	r3, #1
 8005304:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8005306:	697b      	ldr	r3, [r7, #20]
}
 8005308:	4618      	mov	r0, r3
 800530a:	371c      	adds	r7, #28
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr

08005314 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8005314:	b580      	push	{r7, lr}
 8005316:	b086      	sub	sp, #24
 8005318:	af00      	add	r7, sp, #0
 800531a:	60f8      	str	r0, [r7, #12]
 800531c:	60b9      	str	r1, [r7, #8]
 800531e:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	68ba      	ldr	r2, [r7, #8]
 8005324:	68f9      	ldr	r1, [r7, #12]
 8005326:	4804      	ldr	r0, [pc, #16]	@ (8005338 <xEventGroupSetBitsFromISR+0x24>)
 8005328:	f002 faa2 	bl	8007870 <xTimerPendFunctionCallFromISR>
 800532c:	6178      	str	r0, [r7, #20]

		return xReturn;
 800532e:	697b      	ldr	r3, [r7, #20]
	}
 8005330:	4618      	mov	r0, r3
 8005332:	3718      	adds	r7, #24
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}
 8005338:	080052b7 	.word	0x080052b7

0800533c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800533c:	b480      	push	{r7}
 800533e:	b083      	sub	sp, #12
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f103 0208 	add.w	r2, r3, #8
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f04f 32ff 	mov.w	r2, #4294967295
 8005354:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f103 0208 	add.w	r2, r3, #8
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	f103 0208 	add.w	r2, r3, #8
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005370:	bf00      	nop
 8005372:	370c      	adds	r7, #12
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr

0800537c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800537c:	b480      	push	{r7}
 800537e:	b083      	sub	sp, #12
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2200      	movs	r2, #0
 8005388:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800538a:	bf00      	nop
 800538c:	370c      	adds	r7, #12
 800538e:	46bd      	mov	sp, r7
 8005390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005394:	4770      	bx	lr

08005396 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005396:	b480      	push	{r7}
 8005398:	b085      	sub	sp, #20
 800539a:	af00      	add	r7, sp, #0
 800539c:	6078      	str	r0, [r7, #4]
 800539e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	68fa      	ldr	r2, [r7, #12]
 80053aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	689a      	ldr	r2, [r3, #8]
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	683a      	ldr	r2, [r7, #0]
 80053ba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	683a      	ldr	r2, [r7, #0]
 80053c0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	687a      	ldr	r2, [r7, #4]
 80053c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	1c5a      	adds	r2, r3, #1
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	601a      	str	r2, [r3, #0]
}
 80053d2:	bf00      	nop
 80053d4:	3714      	adds	r7, #20
 80053d6:	46bd      	mov	sp, r7
 80053d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053dc:	4770      	bx	lr

080053de <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80053de:	b480      	push	{r7}
 80053e0:	b085      	sub	sp, #20
 80053e2:	af00      	add	r7, sp, #0
 80053e4:	6078      	str	r0, [r7, #4]
 80053e6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053f4:	d103      	bne.n	80053fe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	691b      	ldr	r3, [r3, #16]
 80053fa:	60fb      	str	r3, [r7, #12]
 80053fc:	e00c      	b.n	8005418 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	3308      	adds	r3, #8
 8005402:	60fb      	str	r3, [r7, #12]
 8005404:	e002      	b.n	800540c <vListInsert+0x2e>
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	60fb      	str	r3, [r7, #12]
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	68ba      	ldr	r2, [r7, #8]
 8005414:	429a      	cmp	r2, r3
 8005416:	d2f6      	bcs.n	8005406 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	685a      	ldr	r2, [r3, #4]
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	683a      	ldr	r2, [r7, #0]
 8005426:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	68fa      	ldr	r2, [r7, #12]
 800542c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	683a      	ldr	r2, [r7, #0]
 8005432:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	687a      	ldr	r2, [r7, #4]
 8005438:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	1c5a      	adds	r2, r3, #1
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	601a      	str	r2, [r3, #0]
}
 8005444:	bf00      	nop
 8005446:	3714      	adds	r7, #20
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr

08005450 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005450:	b480      	push	{r7}
 8005452:	b085      	sub	sp, #20
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	691b      	ldr	r3, [r3, #16]
 800545c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	687a      	ldr	r2, [r7, #4]
 8005464:	6892      	ldr	r2, [r2, #8]
 8005466:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	689b      	ldr	r3, [r3, #8]
 800546c:	687a      	ldr	r2, [r7, #4]
 800546e:	6852      	ldr	r2, [r2, #4]
 8005470:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	687a      	ldr	r2, [r7, #4]
 8005478:	429a      	cmp	r2, r3
 800547a:	d103      	bne.n	8005484 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	689a      	ldr	r2, [r3, #8]
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2200      	movs	r2, #0
 8005488:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	1e5a      	subs	r2, r3, #1
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
}
 8005498:	4618      	mov	r0, r3
 800549a:	3714      	adds	r7, #20
 800549c:	46bd      	mov	sp, r7
 800549e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a2:	4770      	bx	lr

080054a4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b084      	sub	sp, #16
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
 80054ac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d10b      	bne.n	80054d0 <xQueueGenericReset+0x2c>
	__asm volatile
 80054b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054bc:	f383 8811 	msr	BASEPRI, r3
 80054c0:	f3bf 8f6f 	isb	sy
 80054c4:	f3bf 8f4f 	dsb	sy
 80054c8:	60bb      	str	r3, [r7, #8]
}
 80054ca:	bf00      	nop
 80054cc:	bf00      	nop
 80054ce:	e7fd      	b.n	80054cc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80054d0:	f002 fb22 	bl	8007b18 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681a      	ldr	r2, [r3, #0]
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054dc:	68f9      	ldr	r1, [r7, #12]
 80054de:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80054e0:	fb01 f303 	mul.w	r3, r1, r3
 80054e4:	441a      	add	r2, r3
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2200      	movs	r2, #0
 80054ee:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681a      	ldr	r2, [r3, #0]
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681a      	ldr	r2, [r3, #0]
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005500:	3b01      	subs	r3, #1
 8005502:	68f9      	ldr	r1, [r7, #12]
 8005504:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005506:	fb01 f303 	mul.w	r3, r1, r3
 800550a:	441a      	add	r2, r3
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	22ff      	movs	r2, #255	@ 0xff
 8005514:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	22ff      	movs	r2, #255	@ 0xff
 800551c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d114      	bne.n	8005550 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	691b      	ldr	r3, [r3, #16]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d01a      	beq.n	8005564 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	3310      	adds	r3, #16
 8005532:	4618      	mov	r0, r3
 8005534:	f001 f9ea 	bl	800690c <xTaskRemoveFromEventList>
 8005538:	4603      	mov	r3, r0
 800553a:	2b00      	cmp	r3, #0
 800553c:	d012      	beq.n	8005564 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800553e:	4b0d      	ldr	r3, [pc, #52]	@ (8005574 <xQueueGenericReset+0xd0>)
 8005540:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005544:	601a      	str	r2, [r3, #0]
 8005546:	f3bf 8f4f 	dsb	sy
 800554a:	f3bf 8f6f 	isb	sy
 800554e:	e009      	b.n	8005564 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	3310      	adds	r3, #16
 8005554:	4618      	mov	r0, r3
 8005556:	f7ff fef1 	bl	800533c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	3324      	adds	r3, #36	@ 0x24
 800555e:	4618      	mov	r0, r3
 8005560:	f7ff feec 	bl	800533c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005564:	f002 fb0a 	bl	8007b7c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005568:	2301      	movs	r3, #1
}
 800556a:	4618      	mov	r0, r3
 800556c:	3710      	adds	r7, #16
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}
 8005572:	bf00      	nop
 8005574:	e000ed04 	.word	0xe000ed04

08005578 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005578:	b580      	push	{r7, lr}
 800557a:	b08e      	sub	sp, #56	@ 0x38
 800557c:	af02      	add	r7, sp, #8
 800557e:	60f8      	str	r0, [r7, #12]
 8005580:	60b9      	str	r1, [r7, #8]
 8005582:	607a      	str	r2, [r7, #4]
 8005584:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d10b      	bne.n	80055a4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800558c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005590:	f383 8811 	msr	BASEPRI, r3
 8005594:	f3bf 8f6f 	isb	sy
 8005598:	f3bf 8f4f 	dsb	sy
 800559c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800559e:	bf00      	nop
 80055a0:	bf00      	nop
 80055a2:	e7fd      	b.n	80055a0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d10b      	bne.n	80055c2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80055aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055ae:	f383 8811 	msr	BASEPRI, r3
 80055b2:	f3bf 8f6f 	isb	sy
 80055b6:	f3bf 8f4f 	dsb	sy
 80055ba:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80055bc:	bf00      	nop
 80055be:	bf00      	nop
 80055c0:	e7fd      	b.n	80055be <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d002      	beq.n	80055ce <xQueueGenericCreateStatic+0x56>
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d001      	beq.n	80055d2 <xQueueGenericCreateStatic+0x5a>
 80055ce:	2301      	movs	r3, #1
 80055d0:	e000      	b.n	80055d4 <xQueueGenericCreateStatic+0x5c>
 80055d2:	2300      	movs	r3, #0
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d10b      	bne.n	80055f0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80055d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055dc:	f383 8811 	msr	BASEPRI, r3
 80055e0:	f3bf 8f6f 	isb	sy
 80055e4:	f3bf 8f4f 	dsb	sy
 80055e8:	623b      	str	r3, [r7, #32]
}
 80055ea:	bf00      	nop
 80055ec:	bf00      	nop
 80055ee:	e7fd      	b.n	80055ec <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d102      	bne.n	80055fc <xQueueGenericCreateStatic+0x84>
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d101      	bne.n	8005600 <xQueueGenericCreateStatic+0x88>
 80055fc:	2301      	movs	r3, #1
 80055fe:	e000      	b.n	8005602 <xQueueGenericCreateStatic+0x8a>
 8005600:	2300      	movs	r3, #0
 8005602:	2b00      	cmp	r3, #0
 8005604:	d10b      	bne.n	800561e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8005606:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800560a:	f383 8811 	msr	BASEPRI, r3
 800560e:	f3bf 8f6f 	isb	sy
 8005612:	f3bf 8f4f 	dsb	sy
 8005616:	61fb      	str	r3, [r7, #28]
}
 8005618:	bf00      	nop
 800561a:	bf00      	nop
 800561c:	e7fd      	b.n	800561a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800561e:	2350      	movs	r3, #80	@ 0x50
 8005620:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	2b50      	cmp	r3, #80	@ 0x50
 8005626:	d00b      	beq.n	8005640 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005628:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800562c:	f383 8811 	msr	BASEPRI, r3
 8005630:	f3bf 8f6f 	isb	sy
 8005634:	f3bf 8f4f 	dsb	sy
 8005638:	61bb      	str	r3, [r7, #24]
}
 800563a:	bf00      	nop
 800563c:	bf00      	nop
 800563e:	e7fd      	b.n	800563c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005640:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005646:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005648:	2b00      	cmp	r3, #0
 800564a:	d00d      	beq.n	8005668 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800564c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800564e:	2201      	movs	r2, #1
 8005650:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005654:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005658:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800565a:	9300      	str	r3, [sp, #0]
 800565c:	4613      	mov	r3, r2
 800565e:	687a      	ldr	r2, [r7, #4]
 8005660:	68b9      	ldr	r1, [r7, #8]
 8005662:	68f8      	ldr	r0, [r7, #12]
 8005664:	f000 f805 	bl	8005672 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005668:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800566a:	4618      	mov	r0, r3
 800566c:	3730      	adds	r7, #48	@ 0x30
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}

08005672 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005672:	b580      	push	{r7, lr}
 8005674:	b084      	sub	sp, #16
 8005676:	af00      	add	r7, sp, #0
 8005678:	60f8      	str	r0, [r7, #12]
 800567a:	60b9      	str	r1, [r7, #8]
 800567c:	607a      	str	r2, [r7, #4]
 800567e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d103      	bne.n	800568e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005686:	69bb      	ldr	r3, [r7, #24]
 8005688:	69ba      	ldr	r2, [r7, #24]
 800568a:	601a      	str	r2, [r3, #0]
 800568c:	e002      	b.n	8005694 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800568e:	69bb      	ldr	r3, [r7, #24]
 8005690:	687a      	ldr	r2, [r7, #4]
 8005692:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005694:	69bb      	ldr	r3, [r7, #24]
 8005696:	68fa      	ldr	r2, [r7, #12]
 8005698:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800569a:	69bb      	ldr	r3, [r7, #24]
 800569c:	68ba      	ldr	r2, [r7, #8]
 800569e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80056a0:	2101      	movs	r1, #1
 80056a2:	69b8      	ldr	r0, [r7, #24]
 80056a4:	f7ff fefe 	bl	80054a4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80056a8:	69bb      	ldr	r3, [r7, #24]
 80056aa:	78fa      	ldrb	r2, [r7, #3]
 80056ac:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80056b0:	bf00      	nop
 80056b2:	3710      	adds	r7, #16
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}

080056b8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b08e      	sub	sp, #56	@ 0x38
 80056bc:	af00      	add	r7, sp, #0
 80056be:	60f8      	str	r0, [r7, #12]
 80056c0:	60b9      	str	r1, [r7, #8]
 80056c2:	607a      	str	r2, [r7, #4]
 80056c4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80056c6:	2300      	movs	r3, #0
 80056c8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80056ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d10b      	bne.n	80056ec <xQueueGenericSend+0x34>
	__asm volatile
 80056d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056d8:	f383 8811 	msr	BASEPRI, r3
 80056dc:	f3bf 8f6f 	isb	sy
 80056e0:	f3bf 8f4f 	dsb	sy
 80056e4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80056e6:	bf00      	nop
 80056e8:	bf00      	nop
 80056ea:	e7fd      	b.n	80056e8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d103      	bne.n	80056fa <xQueueGenericSend+0x42>
 80056f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d101      	bne.n	80056fe <xQueueGenericSend+0x46>
 80056fa:	2301      	movs	r3, #1
 80056fc:	e000      	b.n	8005700 <xQueueGenericSend+0x48>
 80056fe:	2300      	movs	r3, #0
 8005700:	2b00      	cmp	r3, #0
 8005702:	d10b      	bne.n	800571c <xQueueGenericSend+0x64>
	__asm volatile
 8005704:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005708:	f383 8811 	msr	BASEPRI, r3
 800570c:	f3bf 8f6f 	isb	sy
 8005710:	f3bf 8f4f 	dsb	sy
 8005714:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005716:	bf00      	nop
 8005718:	bf00      	nop
 800571a:	e7fd      	b.n	8005718 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	2b02      	cmp	r3, #2
 8005720:	d103      	bne.n	800572a <xQueueGenericSend+0x72>
 8005722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005724:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005726:	2b01      	cmp	r3, #1
 8005728:	d101      	bne.n	800572e <xQueueGenericSend+0x76>
 800572a:	2301      	movs	r3, #1
 800572c:	e000      	b.n	8005730 <xQueueGenericSend+0x78>
 800572e:	2300      	movs	r3, #0
 8005730:	2b00      	cmp	r3, #0
 8005732:	d10b      	bne.n	800574c <xQueueGenericSend+0x94>
	__asm volatile
 8005734:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005738:	f383 8811 	msr	BASEPRI, r3
 800573c:	f3bf 8f6f 	isb	sy
 8005740:	f3bf 8f4f 	dsb	sy
 8005744:	623b      	str	r3, [r7, #32]
}
 8005746:	bf00      	nop
 8005748:	bf00      	nop
 800574a:	e7fd      	b.n	8005748 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800574c:	f001 fb02 	bl	8006d54 <xTaskGetSchedulerState>
 8005750:	4603      	mov	r3, r0
 8005752:	2b00      	cmp	r3, #0
 8005754:	d102      	bne.n	800575c <xQueueGenericSend+0xa4>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d101      	bne.n	8005760 <xQueueGenericSend+0xa8>
 800575c:	2301      	movs	r3, #1
 800575e:	e000      	b.n	8005762 <xQueueGenericSend+0xaa>
 8005760:	2300      	movs	r3, #0
 8005762:	2b00      	cmp	r3, #0
 8005764:	d10b      	bne.n	800577e <xQueueGenericSend+0xc6>
	__asm volatile
 8005766:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800576a:	f383 8811 	msr	BASEPRI, r3
 800576e:	f3bf 8f6f 	isb	sy
 8005772:	f3bf 8f4f 	dsb	sy
 8005776:	61fb      	str	r3, [r7, #28]
}
 8005778:	bf00      	nop
 800577a:	bf00      	nop
 800577c:	e7fd      	b.n	800577a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800577e:	f002 f9cb 	bl	8007b18 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005784:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005788:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800578a:	429a      	cmp	r2, r3
 800578c:	d302      	bcc.n	8005794 <xQueueGenericSend+0xdc>
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	2b02      	cmp	r3, #2
 8005792:	d129      	bne.n	80057e8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005794:	683a      	ldr	r2, [r7, #0]
 8005796:	68b9      	ldr	r1, [r7, #8]
 8005798:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800579a:	f000 fa0f 	bl	8005bbc <prvCopyDataToQueue>
 800579e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80057a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d010      	beq.n	80057ca <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80057a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057aa:	3324      	adds	r3, #36	@ 0x24
 80057ac:	4618      	mov	r0, r3
 80057ae:	f001 f8ad 	bl	800690c <xTaskRemoveFromEventList>
 80057b2:	4603      	mov	r3, r0
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d013      	beq.n	80057e0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80057b8:	4b3f      	ldr	r3, [pc, #252]	@ (80058b8 <xQueueGenericSend+0x200>)
 80057ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80057be:	601a      	str	r2, [r3, #0]
 80057c0:	f3bf 8f4f 	dsb	sy
 80057c4:	f3bf 8f6f 	isb	sy
 80057c8:	e00a      	b.n	80057e0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80057ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d007      	beq.n	80057e0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80057d0:	4b39      	ldr	r3, [pc, #228]	@ (80058b8 <xQueueGenericSend+0x200>)
 80057d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80057d6:	601a      	str	r2, [r3, #0]
 80057d8:	f3bf 8f4f 	dsb	sy
 80057dc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80057e0:	f002 f9cc 	bl	8007b7c <vPortExitCritical>
				return pdPASS;
 80057e4:	2301      	movs	r3, #1
 80057e6:	e063      	b.n	80058b0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d103      	bne.n	80057f6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80057ee:	f002 f9c5 	bl	8007b7c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80057f2:	2300      	movs	r3, #0
 80057f4:	e05c      	b.n	80058b0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80057f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d106      	bne.n	800580a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80057fc:	f107 0314 	add.w	r3, r7, #20
 8005800:	4618      	mov	r0, r3
 8005802:	f001 f94b 	bl	8006a9c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005806:	2301      	movs	r3, #1
 8005808:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800580a:	f002 f9b7 	bl	8007b7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800580e:	f000 fe07 	bl	8006420 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005812:	f002 f981 	bl	8007b18 <vPortEnterCritical>
 8005816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005818:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800581c:	b25b      	sxtb	r3, r3
 800581e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005822:	d103      	bne.n	800582c <xQueueGenericSend+0x174>
 8005824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005826:	2200      	movs	r2, #0
 8005828:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800582c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800582e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005832:	b25b      	sxtb	r3, r3
 8005834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005838:	d103      	bne.n	8005842 <xQueueGenericSend+0x18a>
 800583a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800583c:	2200      	movs	r2, #0
 800583e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005842:	f002 f99b 	bl	8007b7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005846:	1d3a      	adds	r2, r7, #4
 8005848:	f107 0314 	add.w	r3, r7, #20
 800584c:	4611      	mov	r1, r2
 800584e:	4618      	mov	r0, r3
 8005850:	f001 f93a 	bl	8006ac8 <xTaskCheckForTimeOut>
 8005854:	4603      	mov	r3, r0
 8005856:	2b00      	cmp	r3, #0
 8005858:	d124      	bne.n	80058a4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800585a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800585c:	f000 faa6 	bl	8005dac <prvIsQueueFull>
 8005860:	4603      	mov	r3, r0
 8005862:	2b00      	cmp	r3, #0
 8005864:	d018      	beq.n	8005898 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005868:	3310      	adds	r3, #16
 800586a:	687a      	ldr	r2, [r7, #4]
 800586c:	4611      	mov	r1, r2
 800586e:	4618      	mov	r0, r3
 8005870:	f000 ffbc 	bl	80067ec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005874:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005876:	f000 fa31 	bl	8005cdc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800587a:	f000 fddf 	bl	800643c <xTaskResumeAll>
 800587e:	4603      	mov	r3, r0
 8005880:	2b00      	cmp	r3, #0
 8005882:	f47f af7c 	bne.w	800577e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005886:	4b0c      	ldr	r3, [pc, #48]	@ (80058b8 <xQueueGenericSend+0x200>)
 8005888:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800588c:	601a      	str	r2, [r3, #0]
 800588e:	f3bf 8f4f 	dsb	sy
 8005892:	f3bf 8f6f 	isb	sy
 8005896:	e772      	b.n	800577e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005898:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800589a:	f000 fa1f 	bl	8005cdc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800589e:	f000 fdcd 	bl	800643c <xTaskResumeAll>
 80058a2:	e76c      	b.n	800577e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80058a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80058a6:	f000 fa19 	bl	8005cdc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80058aa:	f000 fdc7 	bl	800643c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80058ae:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	3738      	adds	r7, #56	@ 0x38
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}
 80058b8:	e000ed04 	.word	0xe000ed04

080058bc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b090      	sub	sp, #64	@ 0x40
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	60f8      	str	r0, [r7, #12]
 80058c4:	60b9      	str	r1, [r7, #8]
 80058c6:	607a      	str	r2, [r7, #4]
 80058c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80058ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d10b      	bne.n	80058ec <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80058d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058d8:	f383 8811 	msr	BASEPRI, r3
 80058dc:	f3bf 8f6f 	isb	sy
 80058e0:	f3bf 8f4f 	dsb	sy
 80058e4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80058e6:	bf00      	nop
 80058e8:	bf00      	nop
 80058ea:	e7fd      	b.n	80058e8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d103      	bne.n	80058fa <xQueueGenericSendFromISR+0x3e>
 80058f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d101      	bne.n	80058fe <xQueueGenericSendFromISR+0x42>
 80058fa:	2301      	movs	r3, #1
 80058fc:	e000      	b.n	8005900 <xQueueGenericSendFromISR+0x44>
 80058fe:	2300      	movs	r3, #0
 8005900:	2b00      	cmp	r3, #0
 8005902:	d10b      	bne.n	800591c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005904:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005908:	f383 8811 	msr	BASEPRI, r3
 800590c:	f3bf 8f6f 	isb	sy
 8005910:	f3bf 8f4f 	dsb	sy
 8005914:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005916:	bf00      	nop
 8005918:	bf00      	nop
 800591a:	e7fd      	b.n	8005918 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	2b02      	cmp	r3, #2
 8005920:	d103      	bne.n	800592a <xQueueGenericSendFromISR+0x6e>
 8005922:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005924:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005926:	2b01      	cmp	r3, #1
 8005928:	d101      	bne.n	800592e <xQueueGenericSendFromISR+0x72>
 800592a:	2301      	movs	r3, #1
 800592c:	e000      	b.n	8005930 <xQueueGenericSendFromISR+0x74>
 800592e:	2300      	movs	r3, #0
 8005930:	2b00      	cmp	r3, #0
 8005932:	d10b      	bne.n	800594c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005934:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005938:	f383 8811 	msr	BASEPRI, r3
 800593c:	f3bf 8f6f 	isb	sy
 8005940:	f3bf 8f4f 	dsb	sy
 8005944:	623b      	str	r3, [r7, #32]
}
 8005946:	bf00      	nop
 8005948:	bf00      	nop
 800594a:	e7fd      	b.n	8005948 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800594c:	f002 f9c4 	bl	8007cd8 <vPortValidateInterruptPriority>
	__asm volatile
 8005950:	f3ef 8211 	mrs	r2, BASEPRI
 8005954:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005958:	f383 8811 	msr	BASEPRI, r3
 800595c:	f3bf 8f6f 	isb	sy
 8005960:	f3bf 8f4f 	dsb	sy
 8005964:	61fa      	str	r2, [r7, #28]
 8005966:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8005968:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800596a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800596c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800596e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005970:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005972:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005974:	429a      	cmp	r2, r3
 8005976:	d302      	bcc.n	800597e <xQueueGenericSendFromISR+0xc2>
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	2b02      	cmp	r3, #2
 800597c:	d12f      	bne.n	80059de <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800597e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005980:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005984:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005988:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800598a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800598c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800598e:	683a      	ldr	r2, [r7, #0]
 8005990:	68b9      	ldr	r1, [r7, #8]
 8005992:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005994:	f000 f912 	bl	8005bbc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005998:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800599c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059a0:	d112      	bne.n	80059c8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80059a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d016      	beq.n	80059d8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80059aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059ac:	3324      	adds	r3, #36	@ 0x24
 80059ae:	4618      	mov	r0, r3
 80059b0:	f000 ffac 	bl	800690c <xTaskRemoveFromEventList>
 80059b4:	4603      	mov	r3, r0
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d00e      	beq.n	80059d8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d00b      	beq.n	80059d8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2201      	movs	r2, #1
 80059c4:	601a      	str	r2, [r3, #0]
 80059c6:	e007      	b.n	80059d8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80059c8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80059cc:	3301      	adds	r3, #1
 80059ce:	b2db      	uxtb	r3, r3
 80059d0:	b25a      	sxtb	r2, r3
 80059d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80059d8:	2301      	movs	r3, #1
 80059da:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80059dc:	e001      	b.n	80059e2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80059de:	2300      	movs	r3, #0
 80059e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80059e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059e4:	617b      	str	r3, [r7, #20]
	__asm volatile
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	f383 8811 	msr	BASEPRI, r3
}
 80059ec:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80059ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	3740      	adds	r7, #64	@ 0x40
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}

080059f8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b08c      	sub	sp, #48	@ 0x30
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	60f8      	str	r0, [r7, #12]
 8005a00:	60b9      	str	r1, [r7, #8]
 8005a02:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005a04:	2300      	movs	r3, #0
 8005a06:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005a0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d10b      	bne.n	8005a2a <xQueueReceive+0x32>
	__asm volatile
 8005a12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a16:	f383 8811 	msr	BASEPRI, r3
 8005a1a:	f3bf 8f6f 	isb	sy
 8005a1e:	f3bf 8f4f 	dsb	sy
 8005a22:	623b      	str	r3, [r7, #32]
}
 8005a24:	bf00      	nop
 8005a26:	bf00      	nop
 8005a28:	e7fd      	b.n	8005a26 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d103      	bne.n	8005a38 <xQueueReceive+0x40>
 8005a30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d101      	bne.n	8005a3c <xQueueReceive+0x44>
 8005a38:	2301      	movs	r3, #1
 8005a3a:	e000      	b.n	8005a3e <xQueueReceive+0x46>
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d10b      	bne.n	8005a5a <xQueueReceive+0x62>
	__asm volatile
 8005a42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a46:	f383 8811 	msr	BASEPRI, r3
 8005a4a:	f3bf 8f6f 	isb	sy
 8005a4e:	f3bf 8f4f 	dsb	sy
 8005a52:	61fb      	str	r3, [r7, #28]
}
 8005a54:	bf00      	nop
 8005a56:	bf00      	nop
 8005a58:	e7fd      	b.n	8005a56 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005a5a:	f001 f97b 	bl	8006d54 <xTaskGetSchedulerState>
 8005a5e:	4603      	mov	r3, r0
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d102      	bne.n	8005a6a <xQueueReceive+0x72>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d101      	bne.n	8005a6e <xQueueReceive+0x76>
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	e000      	b.n	8005a70 <xQueueReceive+0x78>
 8005a6e:	2300      	movs	r3, #0
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d10b      	bne.n	8005a8c <xQueueReceive+0x94>
	__asm volatile
 8005a74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a78:	f383 8811 	msr	BASEPRI, r3
 8005a7c:	f3bf 8f6f 	isb	sy
 8005a80:	f3bf 8f4f 	dsb	sy
 8005a84:	61bb      	str	r3, [r7, #24]
}
 8005a86:	bf00      	nop
 8005a88:	bf00      	nop
 8005a8a:	e7fd      	b.n	8005a88 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005a8c:	f002 f844 	bl	8007b18 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a94:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d01f      	beq.n	8005adc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005a9c:	68b9      	ldr	r1, [r7, #8]
 8005a9e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005aa0:	f000 f8f6 	bl	8005c90 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aa6:	1e5a      	subs	r2, r3, #1
 8005aa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005aaa:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005aac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005aae:	691b      	ldr	r3, [r3, #16]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d00f      	beq.n	8005ad4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ab4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ab6:	3310      	adds	r3, #16
 8005ab8:	4618      	mov	r0, r3
 8005aba:	f000 ff27 	bl	800690c <xTaskRemoveFromEventList>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d007      	beq.n	8005ad4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005ac4:	4b3c      	ldr	r3, [pc, #240]	@ (8005bb8 <xQueueReceive+0x1c0>)
 8005ac6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005aca:	601a      	str	r2, [r3, #0]
 8005acc:	f3bf 8f4f 	dsb	sy
 8005ad0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005ad4:	f002 f852 	bl	8007b7c <vPortExitCritical>
				return pdPASS;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	e069      	b.n	8005bb0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d103      	bne.n	8005aea <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005ae2:	f002 f84b 	bl	8007b7c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	e062      	b.n	8005bb0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005aea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d106      	bne.n	8005afe <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005af0:	f107 0310 	add.w	r3, r7, #16
 8005af4:	4618      	mov	r0, r3
 8005af6:	f000 ffd1 	bl	8006a9c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005afa:	2301      	movs	r3, #1
 8005afc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005afe:	f002 f83d 	bl	8007b7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005b02:	f000 fc8d 	bl	8006420 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005b06:	f002 f807 	bl	8007b18 <vPortEnterCritical>
 8005b0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b0c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005b10:	b25b      	sxtb	r3, r3
 8005b12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b16:	d103      	bne.n	8005b20 <xQueueReceive+0x128>
 8005b18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005b20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b22:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005b26:	b25b      	sxtb	r3, r3
 8005b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b2c:	d103      	bne.n	8005b36 <xQueueReceive+0x13e>
 8005b2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b30:	2200      	movs	r2, #0
 8005b32:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005b36:	f002 f821 	bl	8007b7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005b3a:	1d3a      	adds	r2, r7, #4
 8005b3c:	f107 0310 	add.w	r3, r7, #16
 8005b40:	4611      	mov	r1, r2
 8005b42:	4618      	mov	r0, r3
 8005b44:	f000 ffc0 	bl	8006ac8 <xTaskCheckForTimeOut>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d123      	bne.n	8005b96 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b4e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005b50:	f000 f916 	bl	8005d80 <prvIsQueueEmpty>
 8005b54:	4603      	mov	r3, r0
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d017      	beq.n	8005b8a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005b5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b5c:	3324      	adds	r3, #36	@ 0x24
 8005b5e:	687a      	ldr	r2, [r7, #4]
 8005b60:	4611      	mov	r1, r2
 8005b62:	4618      	mov	r0, r3
 8005b64:	f000 fe42 	bl	80067ec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005b68:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005b6a:	f000 f8b7 	bl	8005cdc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005b6e:	f000 fc65 	bl	800643c <xTaskResumeAll>
 8005b72:	4603      	mov	r3, r0
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d189      	bne.n	8005a8c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005b78:	4b0f      	ldr	r3, [pc, #60]	@ (8005bb8 <xQueueReceive+0x1c0>)
 8005b7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b7e:	601a      	str	r2, [r3, #0]
 8005b80:	f3bf 8f4f 	dsb	sy
 8005b84:	f3bf 8f6f 	isb	sy
 8005b88:	e780      	b.n	8005a8c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005b8a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005b8c:	f000 f8a6 	bl	8005cdc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005b90:	f000 fc54 	bl	800643c <xTaskResumeAll>
 8005b94:	e77a      	b.n	8005a8c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005b96:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005b98:	f000 f8a0 	bl	8005cdc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005b9c:	f000 fc4e 	bl	800643c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005ba0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005ba2:	f000 f8ed 	bl	8005d80 <prvIsQueueEmpty>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	f43f af6f 	beq.w	8005a8c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005bae:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	3730      	adds	r7, #48	@ 0x30
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bd80      	pop	{r7, pc}
 8005bb8:	e000ed04 	.word	0xe000ed04

08005bbc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b086      	sub	sp, #24
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	60f8      	str	r0, [r7, #12]
 8005bc4:	60b9      	str	r1, [r7, #8]
 8005bc6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bd0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d10d      	bne.n	8005bf6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d14d      	bne.n	8005c7e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	4618      	mov	r0, r3
 8005be8:	f001 f8d2 	bl	8006d90 <xTaskPriorityDisinherit>
 8005bec:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	609a      	str	r2, [r3, #8]
 8005bf4:	e043      	b.n	8005c7e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d119      	bne.n	8005c30 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	6858      	ldr	r0, [r3, #4]
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c04:	461a      	mov	r2, r3
 8005c06:	68b9      	ldr	r1, [r7, #8]
 8005c08:	f002 fac2 	bl	8008190 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	685a      	ldr	r2, [r3, #4]
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c14:	441a      	add	r2, r3
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	685a      	ldr	r2, [r3, #4]
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	429a      	cmp	r2, r3
 8005c24:	d32b      	bcc.n	8005c7e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681a      	ldr	r2, [r3, #0]
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	605a      	str	r2, [r3, #4]
 8005c2e:	e026      	b.n	8005c7e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	68d8      	ldr	r0, [r3, #12]
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c38:	461a      	mov	r2, r3
 8005c3a:	68b9      	ldr	r1, [r7, #8]
 8005c3c:	f002 faa8 	bl	8008190 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	68da      	ldr	r2, [r3, #12]
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c48:	425b      	negs	r3, r3
 8005c4a:	441a      	add	r2, r3
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	68da      	ldr	r2, [r3, #12]
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	d207      	bcs.n	8005c6c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	689a      	ldr	r2, [r3, #8]
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c64:	425b      	negs	r3, r3
 8005c66:	441a      	add	r2, r3
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2b02      	cmp	r3, #2
 8005c70:	d105      	bne.n	8005c7e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d002      	beq.n	8005c7e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	3b01      	subs	r3, #1
 8005c7c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	1c5a      	adds	r2, r3, #1
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005c86:	697b      	ldr	r3, [r7, #20]
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	3718      	adds	r7, #24
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}

08005c90 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b082      	sub	sp, #8
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
 8005c98:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d018      	beq.n	8005cd4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	68da      	ldr	r2, [r3, #12]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005caa:	441a      	add	r2, r3
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	68da      	ldr	r2, [r3, #12]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	689b      	ldr	r3, [r3, #8]
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	d303      	bcc.n	8005cc4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681a      	ldr	r2, [r3, #0]
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	68d9      	ldr	r1, [r3, #12]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ccc:	461a      	mov	r2, r3
 8005cce:	6838      	ldr	r0, [r7, #0]
 8005cd0:	f002 fa5e 	bl	8008190 <memcpy>
	}
}
 8005cd4:	bf00      	nop
 8005cd6:	3708      	adds	r7, #8
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}

08005cdc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b084      	sub	sp, #16
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005ce4:	f001 ff18 	bl	8007b18 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005cee:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005cf0:	e011      	b.n	8005d16 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d012      	beq.n	8005d20 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	3324      	adds	r3, #36	@ 0x24
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f000 fe04 	bl	800690c <xTaskRemoveFromEventList>
 8005d04:	4603      	mov	r3, r0
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d001      	beq.n	8005d0e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005d0a:	f000 ff41 	bl	8006b90 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005d0e:	7bfb      	ldrb	r3, [r7, #15]
 8005d10:	3b01      	subs	r3, #1
 8005d12:	b2db      	uxtb	r3, r3
 8005d14:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005d16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	dce9      	bgt.n	8005cf2 <prvUnlockQueue+0x16>
 8005d1e:	e000      	b.n	8005d22 <prvUnlockQueue+0x46>
					break;
 8005d20:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	22ff      	movs	r2, #255	@ 0xff
 8005d26:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005d2a:	f001 ff27 	bl	8007b7c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005d2e:	f001 fef3 	bl	8007b18 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005d38:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d3a:	e011      	b.n	8005d60 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	691b      	ldr	r3, [r3, #16]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d012      	beq.n	8005d6a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	3310      	adds	r3, #16
 8005d48:	4618      	mov	r0, r3
 8005d4a:	f000 fddf 	bl	800690c <xTaskRemoveFromEventList>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d001      	beq.n	8005d58 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005d54:	f000 ff1c 	bl	8006b90 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005d58:	7bbb      	ldrb	r3, [r7, #14]
 8005d5a:	3b01      	subs	r3, #1
 8005d5c:	b2db      	uxtb	r3, r3
 8005d5e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	dce9      	bgt.n	8005d3c <prvUnlockQueue+0x60>
 8005d68:	e000      	b.n	8005d6c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005d6a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	22ff      	movs	r2, #255	@ 0xff
 8005d70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005d74:	f001 ff02 	bl	8007b7c <vPortExitCritical>
}
 8005d78:	bf00      	nop
 8005d7a:	3710      	adds	r7, #16
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}

08005d80 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b084      	sub	sp, #16
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005d88:	f001 fec6 	bl	8007b18 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d102      	bne.n	8005d9a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005d94:	2301      	movs	r3, #1
 8005d96:	60fb      	str	r3, [r7, #12]
 8005d98:	e001      	b.n	8005d9e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005d9e:	f001 feed 	bl	8007b7c <vPortExitCritical>

	return xReturn;
 8005da2:	68fb      	ldr	r3, [r7, #12]
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	3710      	adds	r7, #16
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}

08005dac <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b084      	sub	sp, #16
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005db4:	f001 feb0 	bl	8007b18 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	d102      	bne.n	8005dca <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	60fb      	str	r3, [r7, #12]
 8005dc8:	e001      	b.n	8005dce <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005dce:	f001 fed5 	bl	8007b7c <vPortExitCritical>

	return xReturn;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	3710      	adds	r7, #16
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bd80      	pop	{r7, pc}

08005ddc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005ddc:	b480      	push	{r7}
 8005dde:	b085      	sub	sp, #20
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
 8005de4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005de6:	2300      	movs	r3, #0
 8005de8:	60fb      	str	r3, [r7, #12]
 8005dea:	e014      	b.n	8005e16 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005dec:	4a0f      	ldr	r2, [pc, #60]	@ (8005e2c <vQueueAddToRegistry+0x50>)
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d10b      	bne.n	8005e10 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005df8:	490c      	ldr	r1, [pc, #48]	@ (8005e2c <vQueueAddToRegistry+0x50>)
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	683a      	ldr	r2, [r7, #0]
 8005dfe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005e02:	4a0a      	ldr	r2, [pc, #40]	@ (8005e2c <vQueueAddToRegistry+0x50>)
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	00db      	lsls	r3, r3, #3
 8005e08:	4413      	add	r3, r2
 8005e0a:	687a      	ldr	r2, [r7, #4]
 8005e0c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005e0e:	e006      	b.n	8005e1e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	3301      	adds	r3, #1
 8005e14:	60fb      	str	r3, [r7, #12]
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2b07      	cmp	r3, #7
 8005e1a:	d9e7      	bls.n	8005dec <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005e1c:	bf00      	nop
 8005e1e:	bf00      	nop
 8005e20:	3714      	adds	r7, #20
 8005e22:	46bd      	mov	sp, r7
 8005e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e28:	4770      	bx	lr
 8005e2a:	bf00      	nop
 8005e2c:	2000080c 	.word	0x2000080c

08005e30 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b086      	sub	sp, #24
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	60f8      	str	r0, [r7, #12]
 8005e38:	60b9      	str	r1, [r7, #8]
 8005e3a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005e40:	f001 fe6a 	bl	8007b18 <vPortEnterCritical>
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005e4a:	b25b      	sxtb	r3, r3
 8005e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e50:	d103      	bne.n	8005e5a <vQueueWaitForMessageRestricted+0x2a>
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	2200      	movs	r2, #0
 8005e56:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005e60:	b25b      	sxtb	r3, r3
 8005e62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e66:	d103      	bne.n	8005e70 <vQueueWaitForMessageRestricted+0x40>
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005e70:	f001 fe84 	bl	8007b7c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d106      	bne.n	8005e8a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	3324      	adds	r3, #36	@ 0x24
 8005e80:	687a      	ldr	r2, [r7, #4]
 8005e82:	68b9      	ldr	r1, [r7, #8]
 8005e84:	4618      	mov	r0, r3
 8005e86:	f000 fd15 	bl	80068b4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005e8a:	6978      	ldr	r0, [r7, #20]
 8005e8c:	f7ff ff26 	bl	8005cdc <prvUnlockQueue>
	}
 8005e90:	bf00      	nop
 8005e92:	3718      	adds	r7, #24
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}

08005e98 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b08e      	sub	sp, #56	@ 0x38
 8005e9c:	af04      	add	r7, sp, #16
 8005e9e:	60f8      	str	r0, [r7, #12]
 8005ea0:	60b9      	str	r1, [r7, #8]
 8005ea2:	607a      	str	r2, [r7, #4]
 8005ea4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005ea6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d10b      	bne.n	8005ec4 <xTaskCreateStatic+0x2c>
	__asm volatile
 8005eac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eb0:	f383 8811 	msr	BASEPRI, r3
 8005eb4:	f3bf 8f6f 	isb	sy
 8005eb8:	f3bf 8f4f 	dsb	sy
 8005ebc:	623b      	str	r3, [r7, #32]
}
 8005ebe:	bf00      	nop
 8005ec0:	bf00      	nop
 8005ec2:	e7fd      	b.n	8005ec0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005ec4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d10b      	bne.n	8005ee2 <xTaskCreateStatic+0x4a>
	__asm volatile
 8005eca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ece:	f383 8811 	msr	BASEPRI, r3
 8005ed2:	f3bf 8f6f 	isb	sy
 8005ed6:	f3bf 8f4f 	dsb	sy
 8005eda:	61fb      	str	r3, [r7, #28]
}
 8005edc:	bf00      	nop
 8005ede:	bf00      	nop
 8005ee0:	e7fd      	b.n	8005ede <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005ee2:	235c      	movs	r3, #92	@ 0x5c
 8005ee4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	2b5c      	cmp	r3, #92	@ 0x5c
 8005eea:	d00b      	beq.n	8005f04 <xTaskCreateStatic+0x6c>
	__asm volatile
 8005eec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ef0:	f383 8811 	msr	BASEPRI, r3
 8005ef4:	f3bf 8f6f 	isb	sy
 8005ef8:	f3bf 8f4f 	dsb	sy
 8005efc:	61bb      	str	r3, [r7, #24]
}
 8005efe:	bf00      	nop
 8005f00:	bf00      	nop
 8005f02:	e7fd      	b.n	8005f00 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005f04:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005f06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d01e      	beq.n	8005f4a <xTaskCreateStatic+0xb2>
 8005f0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d01b      	beq.n	8005f4a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005f12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f14:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f18:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005f1a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f1e:	2202      	movs	r2, #2
 8005f20:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005f24:	2300      	movs	r3, #0
 8005f26:	9303      	str	r3, [sp, #12]
 8005f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f2a:	9302      	str	r3, [sp, #8]
 8005f2c:	f107 0314 	add.w	r3, r7, #20
 8005f30:	9301      	str	r3, [sp, #4]
 8005f32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f34:	9300      	str	r3, [sp, #0]
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	687a      	ldr	r2, [r7, #4]
 8005f3a:	68b9      	ldr	r1, [r7, #8]
 8005f3c:	68f8      	ldr	r0, [r7, #12]
 8005f3e:	f000 f850 	bl	8005fe2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005f42:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005f44:	f000 f8de 	bl	8006104 <prvAddNewTaskToReadyList>
 8005f48:	e001      	b.n	8005f4e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005f4e:	697b      	ldr	r3, [r7, #20]
	}
 8005f50:	4618      	mov	r0, r3
 8005f52:	3728      	adds	r7, #40	@ 0x28
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}

08005f58 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b08c      	sub	sp, #48	@ 0x30
 8005f5c:	af04      	add	r7, sp, #16
 8005f5e:	60f8      	str	r0, [r7, #12]
 8005f60:	60b9      	str	r1, [r7, #8]
 8005f62:	603b      	str	r3, [r7, #0]
 8005f64:	4613      	mov	r3, r2
 8005f66:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005f68:	88fb      	ldrh	r3, [r7, #6]
 8005f6a:	009b      	lsls	r3, r3, #2
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	f001 fef5 	bl	8007d5c <pvPortMalloc>
 8005f72:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d00e      	beq.n	8005f98 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005f7a:	205c      	movs	r0, #92	@ 0x5c
 8005f7c:	f001 feee 	bl	8007d5c <pvPortMalloc>
 8005f80:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005f82:	69fb      	ldr	r3, [r7, #28]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d003      	beq.n	8005f90 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005f88:	69fb      	ldr	r3, [r7, #28]
 8005f8a:	697a      	ldr	r2, [r7, #20]
 8005f8c:	631a      	str	r2, [r3, #48]	@ 0x30
 8005f8e:	e005      	b.n	8005f9c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005f90:	6978      	ldr	r0, [r7, #20]
 8005f92:	f001 ffb1 	bl	8007ef8 <vPortFree>
 8005f96:	e001      	b.n	8005f9c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005f9c:	69fb      	ldr	r3, [r7, #28]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d017      	beq.n	8005fd2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005fa2:	69fb      	ldr	r3, [r7, #28]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005faa:	88fa      	ldrh	r2, [r7, #6]
 8005fac:	2300      	movs	r3, #0
 8005fae:	9303      	str	r3, [sp, #12]
 8005fb0:	69fb      	ldr	r3, [r7, #28]
 8005fb2:	9302      	str	r3, [sp, #8]
 8005fb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fb6:	9301      	str	r3, [sp, #4]
 8005fb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fba:	9300      	str	r3, [sp, #0]
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	68b9      	ldr	r1, [r7, #8]
 8005fc0:	68f8      	ldr	r0, [r7, #12]
 8005fc2:	f000 f80e 	bl	8005fe2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005fc6:	69f8      	ldr	r0, [r7, #28]
 8005fc8:	f000 f89c 	bl	8006104 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005fcc:	2301      	movs	r3, #1
 8005fce:	61bb      	str	r3, [r7, #24]
 8005fd0:	e002      	b.n	8005fd8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005fd2:	f04f 33ff 	mov.w	r3, #4294967295
 8005fd6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005fd8:	69bb      	ldr	r3, [r7, #24]
	}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3720      	adds	r7, #32
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}

08005fe2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005fe2:	b580      	push	{r7, lr}
 8005fe4:	b088      	sub	sp, #32
 8005fe6:	af00      	add	r7, sp, #0
 8005fe8:	60f8      	str	r0, [r7, #12]
 8005fea:	60b9      	str	r1, [r7, #8]
 8005fec:	607a      	str	r2, [r7, #4]
 8005fee:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005ff0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ff2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	009b      	lsls	r3, r3, #2
 8005ff8:	461a      	mov	r2, r3
 8005ffa:	21a5      	movs	r1, #165	@ 0xa5
 8005ffc:	f002 f89c 	bl	8008138 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006002:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800600a:	3b01      	subs	r3, #1
 800600c:	009b      	lsls	r3, r3, #2
 800600e:	4413      	add	r3, r2
 8006010:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006012:	69bb      	ldr	r3, [r7, #24]
 8006014:	f023 0307 	bic.w	r3, r3, #7
 8006018:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800601a:	69bb      	ldr	r3, [r7, #24]
 800601c:	f003 0307 	and.w	r3, r3, #7
 8006020:	2b00      	cmp	r3, #0
 8006022:	d00b      	beq.n	800603c <prvInitialiseNewTask+0x5a>
	__asm volatile
 8006024:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006028:	f383 8811 	msr	BASEPRI, r3
 800602c:	f3bf 8f6f 	isb	sy
 8006030:	f3bf 8f4f 	dsb	sy
 8006034:	617b      	str	r3, [r7, #20]
}
 8006036:	bf00      	nop
 8006038:	bf00      	nop
 800603a:	e7fd      	b.n	8006038 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d01f      	beq.n	8006082 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006042:	2300      	movs	r3, #0
 8006044:	61fb      	str	r3, [r7, #28]
 8006046:	e012      	b.n	800606e <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006048:	68ba      	ldr	r2, [r7, #8]
 800604a:	69fb      	ldr	r3, [r7, #28]
 800604c:	4413      	add	r3, r2
 800604e:	7819      	ldrb	r1, [r3, #0]
 8006050:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006052:	69fb      	ldr	r3, [r7, #28]
 8006054:	4413      	add	r3, r2
 8006056:	3334      	adds	r3, #52	@ 0x34
 8006058:	460a      	mov	r2, r1
 800605a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800605c:	68ba      	ldr	r2, [r7, #8]
 800605e:	69fb      	ldr	r3, [r7, #28]
 8006060:	4413      	add	r3, r2
 8006062:	781b      	ldrb	r3, [r3, #0]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d006      	beq.n	8006076 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006068:	69fb      	ldr	r3, [r7, #28]
 800606a:	3301      	adds	r3, #1
 800606c:	61fb      	str	r3, [r7, #28]
 800606e:	69fb      	ldr	r3, [r7, #28]
 8006070:	2b0f      	cmp	r3, #15
 8006072:	d9e9      	bls.n	8006048 <prvInitialiseNewTask+0x66>
 8006074:	e000      	b.n	8006078 <prvInitialiseNewTask+0x96>
			{
				break;
 8006076:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800607a:	2200      	movs	r2, #0
 800607c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006080:	e003      	b.n	800608a <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006084:	2200      	movs	r2, #0
 8006086:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800608a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800608c:	2b37      	cmp	r3, #55	@ 0x37
 800608e:	d901      	bls.n	8006094 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006090:	2337      	movs	r3, #55	@ 0x37
 8006092:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006096:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006098:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800609a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800609c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800609e:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80060a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060a2:	2200      	movs	r2, #0
 80060a4:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80060a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060a8:	3304      	adds	r3, #4
 80060aa:	4618      	mov	r0, r3
 80060ac:	f7ff f966 	bl	800537c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80060b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060b2:	3318      	adds	r3, #24
 80060b4:	4618      	mov	r0, r3
 80060b6:	f7ff f961 	bl	800537c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80060ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80060be:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060c2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80060c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060c8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80060ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80060ce:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80060d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060d2:	2200      	movs	r2, #0
 80060d4:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80060d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060d8:	2200      	movs	r2, #0
 80060da:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80060de:	683a      	ldr	r2, [r7, #0]
 80060e0:	68f9      	ldr	r1, [r7, #12]
 80060e2:	69b8      	ldr	r0, [r7, #24]
 80060e4:	f001 fbe4 	bl	80078b0 <pxPortInitialiseStack>
 80060e8:	4602      	mov	r2, r0
 80060ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060ec:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80060ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d002      	beq.n	80060fa <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80060f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80060f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80060fa:	bf00      	nop
 80060fc:	3720      	adds	r7, #32
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}
	...

08006104 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b082      	sub	sp, #8
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800610c:	f001 fd04 	bl	8007b18 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006110:	4b2d      	ldr	r3, [pc, #180]	@ (80061c8 <prvAddNewTaskToReadyList+0xc4>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	3301      	adds	r3, #1
 8006116:	4a2c      	ldr	r2, [pc, #176]	@ (80061c8 <prvAddNewTaskToReadyList+0xc4>)
 8006118:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800611a:	4b2c      	ldr	r3, [pc, #176]	@ (80061cc <prvAddNewTaskToReadyList+0xc8>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d109      	bne.n	8006136 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006122:	4a2a      	ldr	r2, [pc, #168]	@ (80061cc <prvAddNewTaskToReadyList+0xc8>)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006128:	4b27      	ldr	r3, [pc, #156]	@ (80061c8 <prvAddNewTaskToReadyList+0xc4>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	2b01      	cmp	r3, #1
 800612e:	d110      	bne.n	8006152 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006130:	f000 fd52 	bl	8006bd8 <prvInitialiseTaskLists>
 8006134:	e00d      	b.n	8006152 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006136:	4b26      	ldr	r3, [pc, #152]	@ (80061d0 <prvAddNewTaskToReadyList+0xcc>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d109      	bne.n	8006152 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800613e:	4b23      	ldr	r3, [pc, #140]	@ (80061cc <prvAddNewTaskToReadyList+0xc8>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006148:	429a      	cmp	r2, r3
 800614a:	d802      	bhi.n	8006152 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800614c:	4a1f      	ldr	r2, [pc, #124]	@ (80061cc <prvAddNewTaskToReadyList+0xc8>)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006152:	4b20      	ldr	r3, [pc, #128]	@ (80061d4 <prvAddNewTaskToReadyList+0xd0>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	3301      	adds	r3, #1
 8006158:	4a1e      	ldr	r2, [pc, #120]	@ (80061d4 <prvAddNewTaskToReadyList+0xd0>)
 800615a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800615c:	4b1d      	ldr	r3, [pc, #116]	@ (80061d4 <prvAddNewTaskToReadyList+0xd0>)
 800615e:	681a      	ldr	r2, [r3, #0]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006168:	4b1b      	ldr	r3, [pc, #108]	@ (80061d8 <prvAddNewTaskToReadyList+0xd4>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	429a      	cmp	r2, r3
 800616e:	d903      	bls.n	8006178 <prvAddNewTaskToReadyList+0x74>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006174:	4a18      	ldr	r2, [pc, #96]	@ (80061d8 <prvAddNewTaskToReadyList+0xd4>)
 8006176:	6013      	str	r3, [r2, #0]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800617c:	4613      	mov	r3, r2
 800617e:	009b      	lsls	r3, r3, #2
 8006180:	4413      	add	r3, r2
 8006182:	009b      	lsls	r3, r3, #2
 8006184:	4a15      	ldr	r2, [pc, #84]	@ (80061dc <prvAddNewTaskToReadyList+0xd8>)
 8006186:	441a      	add	r2, r3
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	3304      	adds	r3, #4
 800618c:	4619      	mov	r1, r3
 800618e:	4610      	mov	r0, r2
 8006190:	f7ff f901 	bl	8005396 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006194:	f001 fcf2 	bl	8007b7c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006198:	4b0d      	ldr	r3, [pc, #52]	@ (80061d0 <prvAddNewTaskToReadyList+0xcc>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d00e      	beq.n	80061be <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80061a0:	4b0a      	ldr	r3, [pc, #40]	@ (80061cc <prvAddNewTaskToReadyList+0xc8>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061aa:	429a      	cmp	r2, r3
 80061ac:	d207      	bcs.n	80061be <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80061ae:	4b0c      	ldr	r3, [pc, #48]	@ (80061e0 <prvAddNewTaskToReadyList+0xdc>)
 80061b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80061b4:	601a      	str	r2, [r3, #0]
 80061b6:	f3bf 8f4f 	dsb	sy
 80061ba:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80061be:	bf00      	nop
 80061c0:	3708      	adds	r7, #8
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}
 80061c6:	bf00      	nop
 80061c8:	20000d20 	.word	0x20000d20
 80061cc:	2000084c 	.word	0x2000084c
 80061d0:	20000d2c 	.word	0x20000d2c
 80061d4:	20000d3c 	.word	0x20000d3c
 80061d8:	20000d28 	.word	0x20000d28
 80061dc:	20000850 	.word	0x20000850
 80061e0:	e000ed04 	.word	0xe000ed04

080061e4 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b08a      	sub	sp, #40	@ 0x28
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
 80061ec:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80061ee:	2300      	movs	r3, #0
 80061f0:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d10b      	bne.n	8006210 <vTaskDelayUntil+0x2c>
	__asm volatile
 80061f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061fc:	f383 8811 	msr	BASEPRI, r3
 8006200:	f3bf 8f6f 	isb	sy
 8006204:	f3bf 8f4f 	dsb	sy
 8006208:	617b      	str	r3, [r7, #20]
}
 800620a:	bf00      	nop
 800620c:	bf00      	nop
 800620e:	e7fd      	b.n	800620c <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d10b      	bne.n	800622e <vTaskDelayUntil+0x4a>
	__asm volatile
 8006216:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800621a:	f383 8811 	msr	BASEPRI, r3
 800621e:	f3bf 8f6f 	isb	sy
 8006222:	f3bf 8f4f 	dsb	sy
 8006226:	613b      	str	r3, [r7, #16]
}
 8006228:	bf00      	nop
 800622a:	bf00      	nop
 800622c:	e7fd      	b.n	800622a <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 800622e:	4b2a      	ldr	r3, [pc, #168]	@ (80062d8 <vTaskDelayUntil+0xf4>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d00b      	beq.n	800624e <vTaskDelayUntil+0x6a>
	__asm volatile
 8006236:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800623a:	f383 8811 	msr	BASEPRI, r3
 800623e:	f3bf 8f6f 	isb	sy
 8006242:	f3bf 8f4f 	dsb	sy
 8006246:	60fb      	str	r3, [r7, #12]
}
 8006248:	bf00      	nop
 800624a:	bf00      	nop
 800624c:	e7fd      	b.n	800624a <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 800624e:	f000 f8e7 	bl	8006420 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8006252:	4b22      	ldr	r3, [pc, #136]	@ (80062dc <vTaskDelayUntil+0xf8>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	683a      	ldr	r2, [r7, #0]
 800625e:	4413      	add	r3, r2
 8006260:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	6a3a      	ldr	r2, [r7, #32]
 8006268:	429a      	cmp	r2, r3
 800626a:	d20b      	bcs.n	8006284 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	69fa      	ldr	r2, [r7, #28]
 8006272:	429a      	cmp	r2, r3
 8006274:	d211      	bcs.n	800629a <vTaskDelayUntil+0xb6>
 8006276:	69fa      	ldr	r2, [r7, #28]
 8006278:	6a3b      	ldr	r3, [r7, #32]
 800627a:	429a      	cmp	r2, r3
 800627c:	d90d      	bls.n	800629a <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800627e:	2301      	movs	r3, #1
 8006280:	627b      	str	r3, [r7, #36]	@ 0x24
 8006282:	e00a      	b.n	800629a <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	69fa      	ldr	r2, [r7, #28]
 800628a:	429a      	cmp	r2, r3
 800628c:	d303      	bcc.n	8006296 <vTaskDelayUntil+0xb2>
 800628e:	69fa      	ldr	r2, [r7, #28]
 8006290:	6a3b      	ldr	r3, [r7, #32]
 8006292:	429a      	cmp	r2, r3
 8006294:	d901      	bls.n	800629a <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8006296:	2301      	movs	r3, #1
 8006298:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	69fa      	ldr	r2, [r7, #28]
 800629e:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80062a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d006      	beq.n	80062b4 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80062a6:	69fa      	ldr	r2, [r7, #28]
 80062a8:	6a3b      	ldr	r3, [r7, #32]
 80062aa:	1ad3      	subs	r3, r2, r3
 80062ac:	2100      	movs	r1, #0
 80062ae:	4618      	mov	r0, r3
 80062b0:	f000 fed2 	bl	8007058 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80062b4:	f000 f8c2 	bl	800643c <xTaskResumeAll>
 80062b8:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80062ba:	69bb      	ldr	r3, [r7, #24]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d107      	bne.n	80062d0 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 80062c0:	4b07      	ldr	r3, [pc, #28]	@ (80062e0 <vTaskDelayUntil+0xfc>)
 80062c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80062c6:	601a      	str	r2, [r3, #0]
 80062c8:	f3bf 8f4f 	dsb	sy
 80062cc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80062d0:	bf00      	nop
 80062d2:	3728      	adds	r7, #40	@ 0x28
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}
 80062d8:	20000d48 	.word	0x20000d48
 80062dc:	20000d24 	.word	0x20000d24
 80062e0:	e000ed04 	.word	0xe000ed04

080062e4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b084      	sub	sp, #16
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80062ec:	2300      	movs	r3, #0
 80062ee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d018      	beq.n	8006328 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80062f6:	4b14      	ldr	r3, [pc, #80]	@ (8006348 <vTaskDelay+0x64>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d00b      	beq.n	8006316 <vTaskDelay+0x32>
	__asm volatile
 80062fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006302:	f383 8811 	msr	BASEPRI, r3
 8006306:	f3bf 8f6f 	isb	sy
 800630a:	f3bf 8f4f 	dsb	sy
 800630e:	60bb      	str	r3, [r7, #8]
}
 8006310:	bf00      	nop
 8006312:	bf00      	nop
 8006314:	e7fd      	b.n	8006312 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006316:	f000 f883 	bl	8006420 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800631a:	2100      	movs	r1, #0
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	f000 fe9b 	bl	8007058 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006322:	f000 f88b 	bl	800643c <xTaskResumeAll>
 8006326:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d107      	bne.n	800633e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800632e:	4b07      	ldr	r3, [pc, #28]	@ (800634c <vTaskDelay+0x68>)
 8006330:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006334:	601a      	str	r2, [r3, #0]
 8006336:	f3bf 8f4f 	dsb	sy
 800633a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800633e:	bf00      	nop
 8006340:	3710      	adds	r7, #16
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}
 8006346:	bf00      	nop
 8006348:	20000d48 	.word	0x20000d48
 800634c:	e000ed04 	.word	0xe000ed04

08006350 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b08a      	sub	sp, #40	@ 0x28
 8006354:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006356:	2300      	movs	r3, #0
 8006358:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800635a:	2300      	movs	r3, #0
 800635c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800635e:	463a      	mov	r2, r7
 8006360:	1d39      	adds	r1, r7, #4
 8006362:	f107 0308 	add.w	r3, r7, #8
 8006366:	4618      	mov	r0, r3
 8006368:	f7fe fd9c 	bl	8004ea4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800636c:	6839      	ldr	r1, [r7, #0]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	68ba      	ldr	r2, [r7, #8]
 8006372:	9202      	str	r2, [sp, #8]
 8006374:	9301      	str	r3, [sp, #4]
 8006376:	2300      	movs	r3, #0
 8006378:	9300      	str	r3, [sp, #0]
 800637a:	2300      	movs	r3, #0
 800637c:	460a      	mov	r2, r1
 800637e:	4922      	ldr	r1, [pc, #136]	@ (8006408 <vTaskStartScheduler+0xb8>)
 8006380:	4822      	ldr	r0, [pc, #136]	@ (800640c <vTaskStartScheduler+0xbc>)
 8006382:	f7ff fd89 	bl	8005e98 <xTaskCreateStatic>
 8006386:	4603      	mov	r3, r0
 8006388:	4a21      	ldr	r2, [pc, #132]	@ (8006410 <vTaskStartScheduler+0xc0>)
 800638a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800638c:	4b20      	ldr	r3, [pc, #128]	@ (8006410 <vTaskStartScheduler+0xc0>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d002      	beq.n	800639a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006394:	2301      	movs	r3, #1
 8006396:	617b      	str	r3, [r7, #20]
 8006398:	e001      	b.n	800639e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800639a:	2300      	movs	r3, #0
 800639c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	2b01      	cmp	r3, #1
 80063a2:	d102      	bne.n	80063aa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80063a4:	f000 feac 	bl	8007100 <xTimerCreateTimerTask>
 80063a8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	2b01      	cmp	r3, #1
 80063ae:	d116      	bne.n	80063de <vTaskStartScheduler+0x8e>
	__asm volatile
 80063b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063b4:	f383 8811 	msr	BASEPRI, r3
 80063b8:	f3bf 8f6f 	isb	sy
 80063bc:	f3bf 8f4f 	dsb	sy
 80063c0:	613b      	str	r3, [r7, #16]
}
 80063c2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80063c4:	4b13      	ldr	r3, [pc, #76]	@ (8006414 <vTaskStartScheduler+0xc4>)
 80063c6:	f04f 32ff 	mov.w	r2, #4294967295
 80063ca:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80063cc:	4b12      	ldr	r3, [pc, #72]	@ (8006418 <vTaskStartScheduler+0xc8>)
 80063ce:	2201      	movs	r2, #1
 80063d0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80063d2:	4b12      	ldr	r3, [pc, #72]	@ (800641c <vTaskStartScheduler+0xcc>)
 80063d4:	2200      	movs	r2, #0
 80063d6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80063d8:	f001 fafa 	bl	80079d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80063dc:	e00f      	b.n	80063fe <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063e4:	d10b      	bne.n	80063fe <vTaskStartScheduler+0xae>
	__asm volatile
 80063e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063ea:	f383 8811 	msr	BASEPRI, r3
 80063ee:	f3bf 8f6f 	isb	sy
 80063f2:	f3bf 8f4f 	dsb	sy
 80063f6:	60fb      	str	r3, [r7, #12]
}
 80063f8:	bf00      	nop
 80063fa:	bf00      	nop
 80063fc:	e7fd      	b.n	80063fa <vTaskStartScheduler+0xaa>
}
 80063fe:	bf00      	nop
 8006400:	3718      	adds	r7, #24
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}
 8006406:	bf00      	nop
 8006408:	08008218 	.word	0x08008218
 800640c:	08006ba9 	.word	0x08006ba9
 8006410:	20000d44 	.word	0x20000d44
 8006414:	20000d40 	.word	0x20000d40
 8006418:	20000d2c 	.word	0x20000d2c
 800641c:	20000d24 	.word	0x20000d24

08006420 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006420:	b480      	push	{r7}
 8006422:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006424:	4b04      	ldr	r3, [pc, #16]	@ (8006438 <vTaskSuspendAll+0x18>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	3301      	adds	r3, #1
 800642a:	4a03      	ldr	r2, [pc, #12]	@ (8006438 <vTaskSuspendAll+0x18>)
 800642c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800642e:	bf00      	nop
 8006430:	46bd      	mov	sp, r7
 8006432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006436:	4770      	bx	lr
 8006438:	20000d48 	.word	0x20000d48

0800643c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b084      	sub	sp, #16
 8006440:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006442:	2300      	movs	r3, #0
 8006444:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006446:	2300      	movs	r3, #0
 8006448:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800644a:	4b42      	ldr	r3, [pc, #264]	@ (8006554 <xTaskResumeAll+0x118>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d10b      	bne.n	800646a <xTaskResumeAll+0x2e>
	__asm volatile
 8006452:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006456:	f383 8811 	msr	BASEPRI, r3
 800645a:	f3bf 8f6f 	isb	sy
 800645e:	f3bf 8f4f 	dsb	sy
 8006462:	603b      	str	r3, [r7, #0]
}
 8006464:	bf00      	nop
 8006466:	bf00      	nop
 8006468:	e7fd      	b.n	8006466 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800646a:	f001 fb55 	bl	8007b18 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800646e:	4b39      	ldr	r3, [pc, #228]	@ (8006554 <xTaskResumeAll+0x118>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	3b01      	subs	r3, #1
 8006474:	4a37      	ldr	r2, [pc, #220]	@ (8006554 <xTaskResumeAll+0x118>)
 8006476:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006478:	4b36      	ldr	r3, [pc, #216]	@ (8006554 <xTaskResumeAll+0x118>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d162      	bne.n	8006546 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006480:	4b35      	ldr	r3, [pc, #212]	@ (8006558 <xTaskResumeAll+0x11c>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d05e      	beq.n	8006546 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006488:	e02f      	b.n	80064ea <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800648a:	4b34      	ldr	r3, [pc, #208]	@ (800655c <xTaskResumeAll+0x120>)
 800648c:	68db      	ldr	r3, [r3, #12]
 800648e:	68db      	ldr	r3, [r3, #12]
 8006490:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	3318      	adds	r3, #24
 8006496:	4618      	mov	r0, r3
 8006498:	f7fe ffda 	bl	8005450 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	3304      	adds	r3, #4
 80064a0:	4618      	mov	r0, r3
 80064a2:	f7fe ffd5 	bl	8005450 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064aa:	4b2d      	ldr	r3, [pc, #180]	@ (8006560 <xTaskResumeAll+0x124>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	429a      	cmp	r2, r3
 80064b0:	d903      	bls.n	80064ba <xTaskResumeAll+0x7e>
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064b6:	4a2a      	ldr	r2, [pc, #168]	@ (8006560 <xTaskResumeAll+0x124>)
 80064b8:	6013      	str	r3, [r2, #0]
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064be:	4613      	mov	r3, r2
 80064c0:	009b      	lsls	r3, r3, #2
 80064c2:	4413      	add	r3, r2
 80064c4:	009b      	lsls	r3, r3, #2
 80064c6:	4a27      	ldr	r2, [pc, #156]	@ (8006564 <xTaskResumeAll+0x128>)
 80064c8:	441a      	add	r2, r3
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	3304      	adds	r3, #4
 80064ce:	4619      	mov	r1, r3
 80064d0:	4610      	mov	r0, r2
 80064d2:	f7fe ff60 	bl	8005396 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064da:	4b23      	ldr	r3, [pc, #140]	@ (8006568 <xTaskResumeAll+0x12c>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064e0:	429a      	cmp	r2, r3
 80064e2:	d302      	bcc.n	80064ea <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80064e4:	4b21      	ldr	r3, [pc, #132]	@ (800656c <xTaskResumeAll+0x130>)
 80064e6:	2201      	movs	r2, #1
 80064e8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80064ea:	4b1c      	ldr	r3, [pc, #112]	@ (800655c <xTaskResumeAll+0x120>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d1cb      	bne.n	800648a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d001      	beq.n	80064fc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80064f8:	f000 fc0c 	bl	8006d14 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80064fc:	4b1c      	ldr	r3, [pc, #112]	@ (8006570 <xTaskResumeAll+0x134>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d010      	beq.n	800652a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006508:	f000 f858 	bl	80065bc <xTaskIncrementTick>
 800650c:	4603      	mov	r3, r0
 800650e:	2b00      	cmp	r3, #0
 8006510:	d002      	beq.n	8006518 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8006512:	4b16      	ldr	r3, [pc, #88]	@ (800656c <xTaskResumeAll+0x130>)
 8006514:	2201      	movs	r2, #1
 8006516:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	3b01      	subs	r3, #1
 800651c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d1f1      	bne.n	8006508 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8006524:	4b12      	ldr	r3, [pc, #72]	@ (8006570 <xTaskResumeAll+0x134>)
 8006526:	2200      	movs	r2, #0
 8006528:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800652a:	4b10      	ldr	r3, [pc, #64]	@ (800656c <xTaskResumeAll+0x130>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d009      	beq.n	8006546 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006532:	2301      	movs	r3, #1
 8006534:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006536:	4b0f      	ldr	r3, [pc, #60]	@ (8006574 <xTaskResumeAll+0x138>)
 8006538:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800653c:	601a      	str	r2, [r3, #0]
 800653e:	f3bf 8f4f 	dsb	sy
 8006542:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006546:	f001 fb19 	bl	8007b7c <vPortExitCritical>

	return xAlreadyYielded;
 800654a:	68bb      	ldr	r3, [r7, #8]
}
 800654c:	4618      	mov	r0, r3
 800654e:	3710      	adds	r7, #16
 8006550:	46bd      	mov	sp, r7
 8006552:	bd80      	pop	{r7, pc}
 8006554:	20000d48 	.word	0x20000d48
 8006558:	20000d20 	.word	0x20000d20
 800655c:	20000ce0 	.word	0x20000ce0
 8006560:	20000d28 	.word	0x20000d28
 8006564:	20000850 	.word	0x20000850
 8006568:	2000084c 	.word	0x2000084c
 800656c:	20000d34 	.word	0x20000d34
 8006570:	20000d30 	.word	0x20000d30
 8006574:	e000ed04 	.word	0xe000ed04

08006578 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006578:	b480      	push	{r7}
 800657a:	b083      	sub	sp, #12
 800657c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800657e:	4b05      	ldr	r3, [pc, #20]	@ (8006594 <xTaskGetTickCount+0x1c>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006584:	687b      	ldr	r3, [r7, #4]
}
 8006586:	4618      	mov	r0, r3
 8006588:	370c      	adds	r7, #12
 800658a:	46bd      	mov	sp, r7
 800658c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006590:	4770      	bx	lr
 8006592:	bf00      	nop
 8006594:	20000d24 	.word	0x20000d24

08006598 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b082      	sub	sp, #8
 800659c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800659e:	f001 fb9b 	bl	8007cd8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80065a2:	2300      	movs	r3, #0
 80065a4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80065a6:	4b04      	ldr	r3, [pc, #16]	@ (80065b8 <xTaskGetTickCountFromISR+0x20>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80065ac:	683b      	ldr	r3, [r7, #0]
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	3708      	adds	r7, #8
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}
 80065b6:	bf00      	nop
 80065b8:	20000d24 	.word	0x20000d24

080065bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b086      	sub	sp, #24
 80065c0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80065c2:	2300      	movs	r3, #0
 80065c4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80065c6:	4b4f      	ldr	r3, [pc, #316]	@ (8006704 <xTaskIncrementTick+0x148>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	f040 8090 	bne.w	80066f0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80065d0:	4b4d      	ldr	r3, [pc, #308]	@ (8006708 <xTaskIncrementTick+0x14c>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	3301      	adds	r3, #1
 80065d6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80065d8:	4a4b      	ldr	r2, [pc, #300]	@ (8006708 <xTaskIncrementTick+0x14c>)
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d121      	bne.n	8006628 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80065e4:	4b49      	ldr	r3, [pc, #292]	@ (800670c <xTaskIncrementTick+0x150>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d00b      	beq.n	8006606 <xTaskIncrementTick+0x4a>
	__asm volatile
 80065ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065f2:	f383 8811 	msr	BASEPRI, r3
 80065f6:	f3bf 8f6f 	isb	sy
 80065fa:	f3bf 8f4f 	dsb	sy
 80065fe:	603b      	str	r3, [r7, #0]
}
 8006600:	bf00      	nop
 8006602:	bf00      	nop
 8006604:	e7fd      	b.n	8006602 <xTaskIncrementTick+0x46>
 8006606:	4b41      	ldr	r3, [pc, #260]	@ (800670c <xTaskIncrementTick+0x150>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	60fb      	str	r3, [r7, #12]
 800660c:	4b40      	ldr	r3, [pc, #256]	@ (8006710 <xTaskIncrementTick+0x154>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a3e      	ldr	r2, [pc, #248]	@ (800670c <xTaskIncrementTick+0x150>)
 8006612:	6013      	str	r3, [r2, #0]
 8006614:	4a3e      	ldr	r2, [pc, #248]	@ (8006710 <xTaskIncrementTick+0x154>)
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	6013      	str	r3, [r2, #0]
 800661a:	4b3e      	ldr	r3, [pc, #248]	@ (8006714 <xTaskIncrementTick+0x158>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	3301      	adds	r3, #1
 8006620:	4a3c      	ldr	r2, [pc, #240]	@ (8006714 <xTaskIncrementTick+0x158>)
 8006622:	6013      	str	r3, [r2, #0]
 8006624:	f000 fb76 	bl	8006d14 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006628:	4b3b      	ldr	r3, [pc, #236]	@ (8006718 <xTaskIncrementTick+0x15c>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	693a      	ldr	r2, [r7, #16]
 800662e:	429a      	cmp	r2, r3
 8006630:	d349      	bcc.n	80066c6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006632:	4b36      	ldr	r3, [pc, #216]	@ (800670c <xTaskIncrementTick+0x150>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d104      	bne.n	8006646 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800663c:	4b36      	ldr	r3, [pc, #216]	@ (8006718 <xTaskIncrementTick+0x15c>)
 800663e:	f04f 32ff 	mov.w	r2, #4294967295
 8006642:	601a      	str	r2, [r3, #0]
					break;
 8006644:	e03f      	b.n	80066c6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006646:	4b31      	ldr	r3, [pc, #196]	@ (800670c <xTaskIncrementTick+0x150>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	68db      	ldr	r3, [r3, #12]
 800664c:	68db      	ldr	r3, [r3, #12]
 800664e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006656:	693a      	ldr	r2, [r7, #16]
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	429a      	cmp	r2, r3
 800665c:	d203      	bcs.n	8006666 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800665e:	4a2e      	ldr	r2, [pc, #184]	@ (8006718 <xTaskIncrementTick+0x15c>)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006664:	e02f      	b.n	80066c6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	3304      	adds	r3, #4
 800666a:	4618      	mov	r0, r3
 800666c:	f7fe fef0 	bl	8005450 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006674:	2b00      	cmp	r3, #0
 8006676:	d004      	beq.n	8006682 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	3318      	adds	r3, #24
 800667c:	4618      	mov	r0, r3
 800667e:	f7fe fee7 	bl	8005450 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006686:	4b25      	ldr	r3, [pc, #148]	@ (800671c <xTaskIncrementTick+0x160>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	429a      	cmp	r2, r3
 800668c:	d903      	bls.n	8006696 <xTaskIncrementTick+0xda>
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006692:	4a22      	ldr	r2, [pc, #136]	@ (800671c <xTaskIncrementTick+0x160>)
 8006694:	6013      	str	r3, [r2, #0]
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800669a:	4613      	mov	r3, r2
 800669c:	009b      	lsls	r3, r3, #2
 800669e:	4413      	add	r3, r2
 80066a0:	009b      	lsls	r3, r3, #2
 80066a2:	4a1f      	ldr	r2, [pc, #124]	@ (8006720 <xTaskIncrementTick+0x164>)
 80066a4:	441a      	add	r2, r3
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	3304      	adds	r3, #4
 80066aa:	4619      	mov	r1, r3
 80066ac:	4610      	mov	r0, r2
 80066ae:	f7fe fe72 	bl	8005396 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066b6:	4b1b      	ldr	r3, [pc, #108]	@ (8006724 <xTaskIncrementTick+0x168>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066bc:	429a      	cmp	r2, r3
 80066be:	d3b8      	bcc.n	8006632 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80066c0:	2301      	movs	r3, #1
 80066c2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80066c4:	e7b5      	b.n	8006632 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80066c6:	4b17      	ldr	r3, [pc, #92]	@ (8006724 <xTaskIncrementTick+0x168>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066cc:	4914      	ldr	r1, [pc, #80]	@ (8006720 <xTaskIncrementTick+0x164>)
 80066ce:	4613      	mov	r3, r2
 80066d0:	009b      	lsls	r3, r3, #2
 80066d2:	4413      	add	r3, r2
 80066d4:	009b      	lsls	r3, r3, #2
 80066d6:	440b      	add	r3, r1
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	2b01      	cmp	r3, #1
 80066dc:	d901      	bls.n	80066e2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80066de:	2301      	movs	r3, #1
 80066e0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80066e2:	4b11      	ldr	r3, [pc, #68]	@ (8006728 <xTaskIncrementTick+0x16c>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d007      	beq.n	80066fa <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80066ea:	2301      	movs	r3, #1
 80066ec:	617b      	str	r3, [r7, #20]
 80066ee:	e004      	b.n	80066fa <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80066f0:	4b0e      	ldr	r3, [pc, #56]	@ (800672c <xTaskIncrementTick+0x170>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	3301      	adds	r3, #1
 80066f6:	4a0d      	ldr	r2, [pc, #52]	@ (800672c <xTaskIncrementTick+0x170>)
 80066f8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80066fa:	697b      	ldr	r3, [r7, #20]
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	3718      	adds	r7, #24
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}
 8006704:	20000d48 	.word	0x20000d48
 8006708:	20000d24 	.word	0x20000d24
 800670c:	20000cd8 	.word	0x20000cd8
 8006710:	20000cdc 	.word	0x20000cdc
 8006714:	20000d38 	.word	0x20000d38
 8006718:	20000d40 	.word	0x20000d40
 800671c:	20000d28 	.word	0x20000d28
 8006720:	20000850 	.word	0x20000850
 8006724:	2000084c 	.word	0x2000084c
 8006728:	20000d34 	.word	0x20000d34
 800672c:	20000d30 	.word	0x20000d30

08006730 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006730:	b480      	push	{r7}
 8006732:	b085      	sub	sp, #20
 8006734:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006736:	4b28      	ldr	r3, [pc, #160]	@ (80067d8 <vTaskSwitchContext+0xa8>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d003      	beq.n	8006746 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800673e:	4b27      	ldr	r3, [pc, #156]	@ (80067dc <vTaskSwitchContext+0xac>)
 8006740:	2201      	movs	r2, #1
 8006742:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006744:	e042      	b.n	80067cc <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8006746:	4b25      	ldr	r3, [pc, #148]	@ (80067dc <vTaskSwitchContext+0xac>)
 8006748:	2200      	movs	r2, #0
 800674a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800674c:	4b24      	ldr	r3, [pc, #144]	@ (80067e0 <vTaskSwitchContext+0xb0>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	60fb      	str	r3, [r7, #12]
 8006752:	e011      	b.n	8006778 <vTaskSwitchContext+0x48>
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d10b      	bne.n	8006772 <vTaskSwitchContext+0x42>
	__asm volatile
 800675a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800675e:	f383 8811 	msr	BASEPRI, r3
 8006762:	f3bf 8f6f 	isb	sy
 8006766:	f3bf 8f4f 	dsb	sy
 800676a:	607b      	str	r3, [r7, #4]
}
 800676c:	bf00      	nop
 800676e:	bf00      	nop
 8006770:	e7fd      	b.n	800676e <vTaskSwitchContext+0x3e>
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	3b01      	subs	r3, #1
 8006776:	60fb      	str	r3, [r7, #12]
 8006778:	491a      	ldr	r1, [pc, #104]	@ (80067e4 <vTaskSwitchContext+0xb4>)
 800677a:	68fa      	ldr	r2, [r7, #12]
 800677c:	4613      	mov	r3, r2
 800677e:	009b      	lsls	r3, r3, #2
 8006780:	4413      	add	r3, r2
 8006782:	009b      	lsls	r3, r3, #2
 8006784:	440b      	add	r3, r1
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d0e3      	beq.n	8006754 <vTaskSwitchContext+0x24>
 800678c:	68fa      	ldr	r2, [r7, #12]
 800678e:	4613      	mov	r3, r2
 8006790:	009b      	lsls	r3, r3, #2
 8006792:	4413      	add	r3, r2
 8006794:	009b      	lsls	r3, r3, #2
 8006796:	4a13      	ldr	r2, [pc, #76]	@ (80067e4 <vTaskSwitchContext+0xb4>)
 8006798:	4413      	add	r3, r2
 800679a:	60bb      	str	r3, [r7, #8]
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	685a      	ldr	r2, [r3, #4]
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	605a      	str	r2, [r3, #4]
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	685a      	ldr	r2, [r3, #4]
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	3308      	adds	r3, #8
 80067ae:	429a      	cmp	r2, r3
 80067b0:	d104      	bne.n	80067bc <vTaskSwitchContext+0x8c>
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	685b      	ldr	r3, [r3, #4]
 80067b6:	685a      	ldr	r2, [r3, #4]
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	605a      	str	r2, [r3, #4]
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	68db      	ldr	r3, [r3, #12]
 80067c2:	4a09      	ldr	r2, [pc, #36]	@ (80067e8 <vTaskSwitchContext+0xb8>)
 80067c4:	6013      	str	r3, [r2, #0]
 80067c6:	4a06      	ldr	r2, [pc, #24]	@ (80067e0 <vTaskSwitchContext+0xb0>)
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	6013      	str	r3, [r2, #0]
}
 80067cc:	bf00      	nop
 80067ce:	3714      	adds	r7, #20
 80067d0:	46bd      	mov	sp, r7
 80067d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d6:	4770      	bx	lr
 80067d8:	20000d48 	.word	0x20000d48
 80067dc:	20000d34 	.word	0x20000d34
 80067e0:	20000d28 	.word	0x20000d28
 80067e4:	20000850 	.word	0x20000850
 80067e8:	2000084c 	.word	0x2000084c

080067ec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b084      	sub	sp, #16
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
 80067f4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d10b      	bne.n	8006814 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80067fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006800:	f383 8811 	msr	BASEPRI, r3
 8006804:	f3bf 8f6f 	isb	sy
 8006808:	f3bf 8f4f 	dsb	sy
 800680c:	60fb      	str	r3, [r7, #12]
}
 800680e:	bf00      	nop
 8006810:	bf00      	nop
 8006812:	e7fd      	b.n	8006810 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006814:	4b07      	ldr	r3, [pc, #28]	@ (8006834 <vTaskPlaceOnEventList+0x48>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	3318      	adds	r3, #24
 800681a:	4619      	mov	r1, r3
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	f7fe fdde 	bl	80053de <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006822:	2101      	movs	r1, #1
 8006824:	6838      	ldr	r0, [r7, #0]
 8006826:	f000 fc17 	bl	8007058 <prvAddCurrentTaskToDelayedList>
}
 800682a:	bf00      	nop
 800682c:	3710      	adds	r7, #16
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}
 8006832:	bf00      	nop
 8006834:	2000084c 	.word	0x2000084c

08006838 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b086      	sub	sp, #24
 800683c:	af00      	add	r7, sp, #0
 800683e:	60f8      	str	r0, [r7, #12]
 8006840:	60b9      	str	r1, [r7, #8]
 8006842:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d10b      	bne.n	8006862 <vTaskPlaceOnUnorderedEventList+0x2a>
	__asm volatile
 800684a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800684e:	f383 8811 	msr	BASEPRI, r3
 8006852:	f3bf 8f6f 	isb	sy
 8006856:	f3bf 8f4f 	dsb	sy
 800685a:	617b      	str	r3, [r7, #20]
}
 800685c:	bf00      	nop
 800685e:	bf00      	nop
 8006860:	e7fd      	b.n	800685e <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8006862:	4b12      	ldr	r3, [pc, #72]	@ (80068ac <vTaskPlaceOnUnorderedEventList+0x74>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d10b      	bne.n	8006882 <vTaskPlaceOnUnorderedEventList+0x4a>
	__asm volatile
 800686a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800686e:	f383 8811 	msr	BASEPRI, r3
 8006872:	f3bf 8f6f 	isb	sy
 8006876:	f3bf 8f4f 	dsb	sy
 800687a:	613b      	str	r3, [r7, #16]
}
 800687c:	bf00      	nop
 800687e:	bf00      	nop
 8006880:	e7fd      	b.n	800687e <vTaskPlaceOnUnorderedEventList+0x46>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8006882:	4b0b      	ldr	r3, [pc, #44]	@ (80068b0 <vTaskPlaceOnUnorderedEventList+0x78>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	68ba      	ldr	r2, [r7, #8]
 8006888:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800688c:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800688e:	4b08      	ldr	r3, [pc, #32]	@ (80068b0 <vTaskPlaceOnUnorderedEventList+0x78>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	3318      	adds	r3, #24
 8006894:	4619      	mov	r1, r3
 8006896:	68f8      	ldr	r0, [r7, #12]
 8006898:	f7fe fd7d 	bl	8005396 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800689c:	2101      	movs	r1, #1
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f000 fbda 	bl	8007058 <prvAddCurrentTaskToDelayedList>
}
 80068a4:	bf00      	nop
 80068a6:	3718      	adds	r7, #24
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}
 80068ac:	20000d48 	.word	0x20000d48
 80068b0:	2000084c 	.word	0x2000084c

080068b4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b086      	sub	sp, #24
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	60f8      	str	r0, [r7, #12]
 80068bc:	60b9      	str	r1, [r7, #8]
 80068be:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d10b      	bne.n	80068de <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80068c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068ca:	f383 8811 	msr	BASEPRI, r3
 80068ce:	f3bf 8f6f 	isb	sy
 80068d2:	f3bf 8f4f 	dsb	sy
 80068d6:	617b      	str	r3, [r7, #20]
}
 80068d8:	bf00      	nop
 80068da:	bf00      	nop
 80068dc:	e7fd      	b.n	80068da <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80068de:	4b0a      	ldr	r3, [pc, #40]	@ (8006908 <vTaskPlaceOnEventListRestricted+0x54>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	3318      	adds	r3, #24
 80068e4:	4619      	mov	r1, r3
 80068e6:	68f8      	ldr	r0, [r7, #12]
 80068e8:	f7fe fd55 	bl	8005396 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d002      	beq.n	80068f8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80068f2:	f04f 33ff 	mov.w	r3, #4294967295
 80068f6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80068f8:	6879      	ldr	r1, [r7, #4]
 80068fa:	68b8      	ldr	r0, [r7, #8]
 80068fc:	f000 fbac 	bl	8007058 <prvAddCurrentTaskToDelayedList>
	}
 8006900:	bf00      	nop
 8006902:	3718      	adds	r7, #24
 8006904:	46bd      	mov	sp, r7
 8006906:	bd80      	pop	{r7, pc}
 8006908:	2000084c 	.word	0x2000084c

0800690c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b086      	sub	sp, #24
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	68db      	ldr	r3, [r3, #12]
 8006918:	68db      	ldr	r3, [r3, #12]
 800691a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d10b      	bne.n	800693a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8006922:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006926:	f383 8811 	msr	BASEPRI, r3
 800692a:	f3bf 8f6f 	isb	sy
 800692e:	f3bf 8f4f 	dsb	sy
 8006932:	60fb      	str	r3, [r7, #12]
}
 8006934:	bf00      	nop
 8006936:	bf00      	nop
 8006938:	e7fd      	b.n	8006936 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800693a:	693b      	ldr	r3, [r7, #16]
 800693c:	3318      	adds	r3, #24
 800693e:	4618      	mov	r0, r3
 8006940:	f7fe fd86 	bl	8005450 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006944:	4b1d      	ldr	r3, [pc, #116]	@ (80069bc <xTaskRemoveFromEventList+0xb0>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d11d      	bne.n	8006988 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800694c:	693b      	ldr	r3, [r7, #16]
 800694e:	3304      	adds	r3, #4
 8006950:	4618      	mov	r0, r3
 8006952:	f7fe fd7d 	bl	8005450 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800695a:	4b19      	ldr	r3, [pc, #100]	@ (80069c0 <xTaskRemoveFromEventList+0xb4>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	429a      	cmp	r2, r3
 8006960:	d903      	bls.n	800696a <xTaskRemoveFromEventList+0x5e>
 8006962:	693b      	ldr	r3, [r7, #16]
 8006964:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006966:	4a16      	ldr	r2, [pc, #88]	@ (80069c0 <xTaskRemoveFromEventList+0xb4>)
 8006968:	6013      	str	r3, [r2, #0]
 800696a:	693b      	ldr	r3, [r7, #16]
 800696c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800696e:	4613      	mov	r3, r2
 8006970:	009b      	lsls	r3, r3, #2
 8006972:	4413      	add	r3, r2
 8006974:	009b      	lsls	r3, r3, #2
 8006976:	4a13      	ldr	r2, [pc, #76]	@ (80069c4 <xTaskRemoveFromEventList+0xb8>)
 8006978:	441a      	add	r2, r3
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	3304      	adds	r3, #4
 800697e:	4619      	mov	r1, r3
 8006980:	4610      	mov	r0, r2
 8006982:	f7fe fd08 	bl	8005396 <vListInsertEnd>
 8006986:	e005      	b.n	8006994 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006988:	693b      	ldr	r3, [r7, #16]
 800698a:	3318      	adds	r3, #24
 800698c:	4619      	mov	r1, r3
 800698e:	480e      	ldr	r0, [pc, #56]	@ (80069c8 <xTaskRemoveFromEventList+0xbc>)
 8006990:	f7fe fd01 	bl	8005396 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006994:	693b      	ldr	r3, [r7, #16]
 8006996:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006998:	4b0c      	ldr	r3, [pc, #48]	@ (80069cc <xTaskRemoveFromEventList+0xc0>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800699e:	429a      	cmp	r2, r3
 80069a0:	d905      	bls.n	80069ae <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80069a2:	2301      	movs	r3, #1
 80069a4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80069a6:	4b0a      	ldr	r3, [pc, #40]	@ (80069d0 <xTaskRemoveFromEventList+0xc4>)
 80069a8:	2201      	movs	r2, #1
 80069aa:	601a      	str	r2, [r3, #0]
 80069ac:	e001      	b.n	80069b2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80069ae:	2300      	movs	r3, #0
 80069b0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80069b2:	697b      	ldr	r3, [r7, #20]
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	3718      	adds	r7, #24
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd80      	pop	{r7, pc}
 80069bc:	20000d48 	.word	0x20000d48
 80069c0:	20000d28 	.word	0x20000d28
 80069c4:	20000850 	.word	0x20000850
 80069c8:	20000ce0 	.word	0x20000ce0
 80069cc:	2000084c 	.word	0x2000084c
 80069d0:	20000d34 	.word	0x20000d34

080069d4 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b086      	sub	sp, #24
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
 80069dc:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 80069de:	4b2a      	ldr	r3, [pc, #168]	@ (8006a88 <vTaskRemoveFromUnorderedEventList+0xb4>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d10b      	bne.n	80069fe <vTaskRemoveFromUnorderedEventList+0x2a>
	__asm volatile
 80069e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069ea:	f383 8811 	msr	BASEPRI, r3
 80069ee:	f3bf 8f6f 	isb	sy
 80069f2:	f3bf 8f4f 	dsb	sy
 80069f6:	613b      	str	r3, [r7, #16]
}
 80069f8:	bf00      	nop
 80069fa:	bf00      	nop
 80069fc:	e7fd      	b.n	80069fa <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	68db      	ldr	r3, [r3, #12]
 8006a0c:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d10b      	bne.n	8006a2c <vTaskRemoveFromUnorderedEventList+0x58>
	__asm volatile
 8006a14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a18:	f383 8811 	msr	BASEPRI, r3
 8006a1c:	f3bf 8f6f 	isb	sy
 8006a20:	f3bf 8f4f 	dsb	sy
 8006a24:	60fb      	str	r3, [r7, #12]
}
 8006a26:	bf00      	nop
 8006a28:	bf00      	nop
 8006a2a:	e7fd      	b.n	8006a28 <vTaskRemoveFromUnorderedEventList+0x54>
	( void ) uxListRemove( pxEventListItem );
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f7fe fd0f 	bl	8005450 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006a32:	697b      	ldr	r3, [r7, #20]
 8006a34:	3304      	adds	r3, #4
 8006a36:	4618      	mov	r0, r3
 8006a38:	f7fe fd0a 	bl	8005450 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a40:	4b12      	ldr	r3, [pc, #72]	@ (8006a8c <vTaskRemoveFromUnorderedEventList+0xb8>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	429a      	cmp	r2, r3
 8006a46:	d903      	bls.n	8006a50 <vTaskRemoveFromUnorderedEventList+0x7c>
 8006a48:	697b      	ldr	r3, [r7, #20]
 8006a4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a4c:	4a0f      	ldr	r2, [pc, #60]	@ (8006a8c <vTaskRemoveFromUnorderedEventList+0xb8>)
 8006a4e:	6013      	str	r3, [r2, #0]
 8006a50:	697b      	ldr	r3, [r7, #20]
 8006a52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a54:	4613      	mov	r3, r2
 8006a56:	009b      	lsls	r3, r3, #2
 8006a58:	4413      	add	r3, r2
 8006a5a:	009b      	lsls	r3, r3, #2
 8006a5c:	4a0c      	ldr	r2, [pc, #48]	@ (8006a90 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8006a5e:	441a      	add	r2, r3
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	3304      	adds	r3, #4
 8006a64:	4619      	mov	r1, r3
 8006a66:	4610      	mov	r0, r2
 8006a68:	f7fe fc95 	bl	8005396 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a70:	4b08      	ldr	r3, [pc, #32]	@ (8006a94 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a76:	429a      	cmp	r2, r3
 8006a78:	d902      	bls.n	8006a80 <vTaskRemoveFromUnorderedEventList+0xac>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8006a7a:	4b07      	ldr	r3, [pc, #28]	@ (8006a98 <vTaskRemoveFromUnorderedEventList+0xc4>)
 8006a7c:	2201      	movs	r2, #1
 8006a7e:	601a      	str	r2, [r3, #0]
	}
}
 8006a80:	bf00      	nop
 8006a82:	3718      	adds	r7, #24
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd80      	pop	{r7, pc}
 8006a88:	20000d48 	.word	0x20000d48
 8006a8c:	20000d28 	.word	0x20000d28
 8006a90:	20000850 	.word	0x20000850
 8006a94:	2000084c 	.word	0x2000084c
 8006a98:	20000d34 	.word	0x20000d34

08006a9c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b083      	sub	sp, #12
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006aa4:	4b06      	ldr	r3, [pc, #24]	@ (8006ac0 <vTaskInternalSetTimeOutState+0x24>)
 8006aa6:	681a      	ldr	r2, [r3, #0]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006aac:	4b05      	ldr	r3, [pc, #20]	@ (8006ac4 <vTaskInternalSetTimeOutState+0x28>)
 8006aae:	681a      	ldr	r2, [r3, #0]
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	605a      	str	r2, [r3, #4]
}
 8006ab4:	bf00      	nop
 8006ab6:	370c      	adds	r7, #12
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abe:	4770      	bx	lr
 8006ac0:	20000d38 	.word	0x20000d38
 8006ac4:	20000d24 	.word	0x20000d24

08006ac8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b088      	sub	sp, #32
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
 8006ad0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d10b      	bne.n	8006af0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006ad8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006adc:	f383 8811 	msr	BASEPRI, r3
 8006ae0:	f3bf 8f6f 	isb	sy
 8006ae4:	f3bf 8f4f 	dsb	sy
 8006ae8:	613b      	str	r3, [r7, #16]
}
 8006aea:	bf00      	nop
 8006aec:	bf00      	nop
 8006aee:	e7fd      	b.n	8006aec <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d10b      	bne.n	8006b0e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8006af6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006afa:	f383 8811 	msr	BASEPRI, r3
 8006afe:	f3bf 8f6f 	isb	sy
 8006b02:	f3bf 8f4f 	dsb	sy
 8006b06:	60fb      	str	r3, [r7, #12]
}
 8006b08:	bf00      	nop
 8006b0a:	bf00      	nop
 8006b0c:	e7fd      	b.n	8006b0a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8006b0e:	f001 f803 	bl	8007b18 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006b12:	4b1d      	ldr	r3, [pc, #116]	@ (8006b88 <xTaskCheckForTimeOut+0xc0>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	69ba      	ldr	r2, [r7, #24]
 8006b1e:	1ad3      	subs	r3, r2, r3
 8006b20:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b2a:	d102      	bne.n	8006b32 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	61fb      	str	r3, [r7, #28]
 8006b30:	e023      	b.n	8006b7a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681a      	ldr	r2, [r3, #0]
 8006b36:	4b15      	ldr	r3, [pc, #84]	@ (8006b8c <xTaskCheckForTimeOut+0xc4>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	429a      	cmp	r2, r3
 8006b3c:	d007      	beq.n	8006b4e <xTaskCheckForTimeOut+0x86>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	685b      	ldr	r3, [r3, #4]
 8006b42:	69ba      	ldr	r2, [r7, #24]
 8006b44:	429a      	cmp	r2, r3
 8006b46:	d302      	bcc.n	8006b4e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006b48:	2301      	movs	r3, #1
 8006b4a:	61fb      	str	r3, [r7, #28]
 8006b4c:	e015      	b.n	8006b7a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	697a      	ldr	r2, [r7, #20]
 8006b54:	429a      	cmp	r2, r3
 8006b56:	d20b      	bcs.n	8006b70 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	681a      	ldr	r2, [r3, #0]
 8006b5c:	697b      	ldr	r3, [r7, #20]
 8006b5e:	1ad2      	subs	r2, r2, r3
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f7ff ff99 	bl	8006a9c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	61fb      	str	r3, [r7, #28]
 8006b6e:	e004      	b.n	8006b7a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	2200      	movs	r2, #0
 8006b74:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006b76:	2301      	movs	r3, #1
 8006b78:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006b7a:	f000 ffff 	bl	8007b7c <vPortExitCritical>

	return xReturn;
 8006b7e:	69fb      	ldr	r3, [r7, #28]
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	3720      	adds	r7, #32
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}
 8006b88:	20000d24 	.word	0x20000d24
 8006b8c:	20000d38 	.word	0x20000d38

08006b90 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006b90:	b480      	push	{r7}
 8006b92:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006b94:	4b03      	ldr	r3, [pc, #12]	@ (8006ba4 <vTaskMissedYield+0x14>)
 8006b96:	2201      	movs	r2, #1
 8006b98:	601a      	str	r2, [r3, #0]
}
 8006b9a:	bf00      	nop
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba2:	4770      	bx	lr
 8006ba4:	20000d34 	.word	0x20000d34

08006ba8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b082      	sub	sp, #8
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006bb0:	f000 f852 	bl	8006c58 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006bb4:	4b06      	ldr	r3, [pc, #24]	@ (8006bd0 <prvIdleTask+0x28>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	2b01      	cmp	r3, #1
 8006bba:	d9f9      	bls.n	8006bb0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006bbc:	4b05      	ldr	r3, [pc, #20]	@ (8006bd4 <prvIdleTask+0x2c>)
 8006bbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006bc2:	601a      	str	r2, [r3, #0]
 8006bc4:	f3bf 8f4f 	dsb	sy
 8006bc8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006bcc:	e7f0      	b.n	8006bb0 <prvIdleTask+0x8>
 8006bce:	bf00      	nop
 8006bd0:	20000850 	.word	0x20000850
 8006bd4:	e000ed04 	.word	0xe000ed04

08006bd8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b082      	sub	sp, #8
 8006bdc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006bde:	2300      	movs	r3, #0
 8006be0:	607b      	str	r3, [r7, #4]
 8006be2:	e00c      	b.n	8006bfe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006be4:	687a      	ldr	r2, [r7, #4]
 8006be6:	4613      	mov	r3, r2
 8006be8:	009b      	lsls	r3, r3, #2
 8006bea:	4413      	add	r3, r2
 8006bec:	009b      	lsls	r3, r3, #2
 8006bee:	4a12      	ldr	r2, [pc, #72]	@ (8006c38 <prvInitialiseTaskLists+0x60>)
 8006bf0:	4413      	add	r3, r2
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	f7fe fba2 	bl	800533c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	3301      	adds	r3, #1
 8006bfc:	607b      	str	r3, [r7, #4]
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2b37      	cmp	r3, #55	@ 0x37
 8006c02:	d9ef      	bls.n	8006be4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006c04:	480d      	ldr	r0, [pc, #52]	@ (8006c3c <prvInitialiseTaskLists+0x64>)
 8006c06:	f7fe fb99 	bl	800533c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006c0a:	480d      	ldr	r0, [pc, #52]	@ (8006c40 <prvInitialiseTaskLists+0x68>)
 8006c0c:	f7fe fb96 	bl	800533c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006c10:	480c      	ldr	r0, [pc, #48]	@ (8006c44 <prvInitialiseTaskLists+0x6c>)
 8006c12:	f7fe fb93 	bl	800533c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006c16:	480c      	ldr	r0, [pc, #48]	@ (8006c48 <prvInitialiseTaskLists+0x70>)
 8006c18:	f7fe fb90 	bl	800533c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006c1c:	480b      	ldr	r0, [pc, #44]	@ (8006c4c <prvInitialiseTaskLists+0x74>)
 8006c1e:	f7fe fb8d 	bl	800533c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006c22:	4b0b      	ldr	r3, [pc, #44]	@ (8006c50 <prvInitialiseTaskLists+0x78>)
 8006c24:	4a05      	ldr	r2, [pc, #20]	@ (8006c3c <prvInitialiseTaskLists+0x64>)
 8006c26:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006c28:	4b0a      	ldr	r3, [pc, #40]	@ (8006c54 <prvInitialiseTaskLists+0x7c>)
 8006c2a:	4a05      	ldr	r2, [pc, #20]	@ (8006c40 <prvInitialiseTaskLists+0x68>)
 8006c2c:	601a      	str	r2, [r3, #0]
}
 8006c2e:	bf00      	nop
 8006c30:	3708      	adds	r7, #8
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}
 8006c36:	bf00      	nop
 8006c38:	20000850 	.word	0x20000850
 8006c3c:	20000cb0 	.word	0x20000cb0
 8006c40:	20000cc4 	.word	0x20000cc4
 8006c44:	20000ce0 	.word	0x20000ce0
 8006c48:	20000cf4 	.word	0x20000cf4
 8006c4c:	20000d0c 	.word	0x20000d0c
 8006c50:	20000cd8 	.word	0x20000cd8
 8006c54:	20000cdc 	.word	0x20000cdc

08006c58 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b082      	sub	sp, #8
 8006c5c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006c5e:	e019      	b.n	8006c94 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006c60:	f000 ff5a 	bl	8007b18 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c64:	4b10      	ldr	r3, [pc, #64]	@ (8006ca8 <prvCheckTasksWaitingTermination+0x50>)
 8006c66:	68db      	ldr	r3, [r3, #12]
 8006c68:	68db      	ldr	r3, [r3, #12]
 8006c6a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	3304      	adds	r3, #4
 8006c70:	4618      	mov	r0, r3
 8006c72:	f7fe fbed 	bl	8005450 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006c76:	4b0d      	ldr	r3, [pc, #52]	@ (8006cac <prvCheckTasksWaitingTermination+0x54>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	3b01      	subs	r3, #1
 8006c7c:	4a0b      	ldr	r2, [pc, #44]	@ (8006cac <prvCheckTasksWaitingTermination+0x54>)
 8006c7e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006c80:	4b0b      	ldr	r3, [pc, #44]	@ (8006cb0 <prvCheckTasksWaitingTermination+0x58>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	3b01      	subs	r3, #1
 8006c86:	4a0a      	ldr	r2, [pc, #40]	@ (8006cb0 <prvCheckTasksWaitingTermination+0x58>)
 8006c88:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006c8a:	f000 ff77 	bl	8007b7c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f000 f810 	bl	8006cb4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006c94:	4b06      	ldr	r3, [pc, #24]	@ (8006cb0 <prvCheckTasksWaitingTermination+0x58>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d1e1      	bne.n	8006c60 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006c9c:	bf00      	nop
 8006c9e:	bf00      	nop
 8006ca0:	3708      	adds	r7, #8
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}
 8006ca6:	bf00      	nop
 8006ca8:	20000cf4 	.word	0x20000cf4
 8006cac:	20000d20 	.word	0x20000d20
 8006cb0:	20000d08 	.word	0x20000d08

08006cb4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b084      	sub	sp, #16
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d108      	bne.n	8006cd8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cca:	4618      	mov	r0, r3
 8006ccc:	f001 f914 	bl	8007ef8 <vPortFree>
				vPortFree( pxTCB );
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f001 f911 	bl	8007ef8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006cd6:	e019      	b.n	8006d0c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006cde:	2b01      	cmp	r3, #1
 8006ce0:	d103      	bne.n	8006cea <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f001 f908 	bl	8007ef8 <vPortFree>
	}
 8006ce8:	e010      	b.n	8006d0c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006cf0:	2b02      	cmp	r3, #2
 8006cf2:	d00b      	beq.n	8006d0c <prvDeleteTCB+0x58>
	__asm volatile
 8006cf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cf8:	f383 8811 	msr	BASEPRI, r3
 8006cfc:	f3bf 8f6f 	isb	sy
 8006d00:	f3bf 8f4f 	dsb	sy
 8006d04:	60fb      	str	r3, [r7, #12]
}
 8006d06:	bf00      	nop
 8006d08:	bf00      	nop
 8006d0a:	e7fd      	b.n	8006d08 <prvDeleteTCB+0x54>
	}
 8006d0c:	bf00      	nop
 8006d0e:	3710      	adds	r7, #16
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bd80      	pop	{r7, pc}

08006d14 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006d14:	b480      	push	{r7}
 8006d16:	b083      	sub	sp, #12
 8006d18:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d1a:	4b0c      	ldr	r3, [pc, #48]	@ (8006d4c <prvResetNextTaskUnblockTime+0x38>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d104      	bne.n	8006d2e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006d24:	4b0a      	ldr	r3, [pc, #40]	@ (8006d50 <prvResetNextTaskUnblockTime+0x3c>)
 8006d26:	f04f 32ff 	mov.w	r2, #4294967295
 8006d2a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006d2c:	e008      	b.n	8006d40 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d2e:	4b07      	ldr	r3, [pc, #28]	@ (8006d4c <prvResetNextTaskUnblockTime+0x38>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	68db      	ldr	r3, [r3, #12]
 8006d34:	68db      	ldr	r3, [r3, #12]
 8006d36:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	685b      	ldr	r3, [r3, #4]
 8006d3c:	4a04      	ldr	r2, [pc, #16]	@ (8006d50 <prvResetNextTaskUnblockTime+0x3c>)
 8006d3e:	6013      	str	r3, [r2, #0]
}
 8006d40:	bf00      	nop
 8006d42:	370c      	adds	r7, #12
 8006d44:	46bd      	mov	sp, r7
 8006d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4a:	4770      	bx	lr
 8006d4c:	20000cd8 	.word	0x20000cd8
 8006d50:	20000d40 	.word	0x20000d40

08006d54 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006d54:	b480      	push	{r7}
 8006d56:	b083      	sub	sp, #12
 8006d58:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006d5a:	4b0b      	ldr	r3, [pc, #44]	@ (8006d88 <xTaskGetSchedulerState+0x34>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d102      	bne.n	8006d68 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006d62:	2301      	movs	r3, #1
 8006d64:	607b      	str	r3, [r7, #4]
 8006d66:	e008      	b.n	8006d7a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d68:	4b08      	ldr	r3, [pc, #32]	@ (8006d8c <xTaskGetSchedulerState+0x38>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d102      	bne.n	8006d76 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006d70:	2302      	movs	r3, #2
 8006d72:	607b      	str	r3, [r7, #4]
 8006d74:	e001      	b.n	8006d7a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006d76:	2300      	movs	r3, #0
 8006d78:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006d7a:	687b      	ldr	r3, [r7, #4]
	}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	370c      	adds	r7, #12
 8006d80:	46bd      	mov	sp, r7
 8006d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d86:	4770      	bx	lr
 8006d88:	20000d2c 	.word	0x20000d2c
 8006d8c:	20000d48 	.word	0x20000d48

08006d90 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b086      	sub	sp, #24
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d058      	beq.n	8006e58 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006da6:	4b2f      	ldr	r3, [pc, #188]	@ (8006e64 <xTaskPriorityDisinherit+0xd4>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	693a      	ldr	r2, [r7, #16]
 8006dac:	429a      	cmp	r2, r3
 8006dae:	d00b      	beq.n	8006dc8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006db0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006db4:	f383 8811 	msr	BASEPRI, r3
 8006db8:	f3bf 8f6f 	isb	sy
 8006dbc:	f3bf 8f4f 	dsb	sy
 8006dc0:	60fb      	str	r3, [r7, #12]
}
 8006dc2:	bf00      	nop
 8006dc4:	bf00      	nop
 8006dc6:	e7fd      	b.n	8006dc4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006dc8:	693b      	ldr	r3, [r7, #16]
 8006dca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d10b      	bne.n	8006de8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006dd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dd4:	f383 8811 	msr	BASEPRI, r3
 8006dd8:	f3bf 8f6f 	isb	sy
 8006ddc:	f3bf 8f4f 	dsb	sy
 8006de0:	60bb      	str	r3, [r7, #8]
}
 8006de2:	bf00      	nop
 8006de4:	bf00      	nop
 8006de6:	e7fd      	b.n	8006de4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006de8:	693b      	ldr	r3, [r7, #16]
 8006dea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006dec:	1e5a      	subs	r2, r3, #1
 8006dee:	693b      	ldr	r3, [r7, #16]
 8006df0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006dfa:	429a      	cmp	r2, r3
 8006dfc:	d02c      	beq.n	8006e58 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d128      	bne.n	8006e58 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e06:	693b      	ldr	r3, [r7, #16]
 8006e08:	3304      	adds	r3, #4
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	f7fe fb20 	bl	8005450 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006e10:	693b      	ldr	r3, [r7, #16]
 8006e12:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006e14:	693b      	ldr	r3, [r7, #16]
 8006e16:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e18:	693b      	ldr	r3, [r7, #16]
 8006e1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e1c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006e24:	693b      	ldr	r3, [r7, #16]
 8006e26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e28:	4b0f      	ldr	r3, [pc, #60]	@ (8006e68 <xTaskPriorityDisinherit+0xd8>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	429a      	cmp	r2, r3
 8006e2e:	d903      	bls.n	8006e38 <xTaskPriorityDisinherit+0xa8>
 8006e30:	693b      	ldr	r3, [r7, #16]
 8006e32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e34:	4a0c      	ldr	r2, [pc, #48]	@ (8006e68 <xTaskPriorityDisinherit+0xd8>)
 8006e36:	6013      	str	r3, [r2, #0]
 8006e38:	693b      	ldr	r3, [r7, #16]
 8006e3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e3c:	4613      	mov	r3, r2
 8006e3e:	009b      	lsls	r3, r3, #2
 8006e40:	4413      	add	r3, r2
 8006e42:	009b      	lsls	r3, r3, #2
 8006e44:	4a09      	ldr	r2, [pc, #36]	@ (8006e6c <xTaskPriorityDisinherit+0xdc>)
 8006e46:	441a      	add	r2, r3
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	3304      	adds	r3, #4
 8006e4c:	4619      	mov	r1, r3
 8006e4e:	4610      	mov	r0, r2
 8006e50:	f7fe faa1 	bl	8005396 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006e54:	2301      	movs	r3, #1
 8006e56:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006e58:	697b      	ldr	r3, [r7, #20]
	}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	3718      	adds	r7, #24
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}
 8006e62:	bf00      	nop
 8006e64:	2000084c 	.word	0x2000084c
 8006e68:	20000d28 	.word	0x20000d28
 8006e6c:	20000850 	.word	0x20000850

08006e70 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8006e70:	b480      	push	{r7}
 8006e72:	b083      	sub	sp, #12
 8006e74:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8006e76:	4b09      	ldr	r3, [pc, #36]	@ (8006e9c <uxTaskResetEventItemValue+0x2c>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	699b      	ldr	r3, [r3, #24]
 8006e7c:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e7e:	4b07      	ldr	r3, [pc, #28]	@ (8006e9c <uxTaskResetEventItemValue+0x2c>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e84:	4b05      	ldr	r3, [pc, #20]	@ (8006e9c <uxTaskResetEventItemValue+0x2c>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 8006e8c:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8006e8e:	687b      	ldr	r3, [r7, #4]
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	370c      	adds	r7, #12
 8006e94:	46bd      	mov	sp, r7
 8006e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9a:	4770      	bx	lr
 8006e9c:	2000084c 	.word	0x2000084c

08006ea0 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b084      	sub	sp, #16
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
 8006ea8:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8006eaa:	f000 fe35 	bl	8007b18 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8006eae:	4b1e      	ldr	r3, [pc, #120]	@ (8006f28 <ulTaskNotifyTake+0x88>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d113      	bne.n	8006ee0 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8006eb8:	4b1b      	ldr	r3, [pc, #108]	@ (8006f28 <ulTaskNotifyTake+0x88>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	2201      	movs	r2, #1
 8006ebe:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d00b      	beq.n	8006ee0 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006ec8:	2101      	movs	r1, #1
 8006eca:	6838      	ldr	r0, [r7, #0]
 8006ecc:	f000 f8c4 	bl	8007058 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8006ed0:	4b16      	ldr	r3, [pc, #88]	@ (8006f2c <ulTaskNotifyTake+0x8c>)
 8006ed2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ed6:	601a      	str	r2, [r3, #0]
 8006ed8:	f3bf 8f4f 	dsb	sy
 8006edc:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8006ee0:	f000 fe4c 	bl	8007b7c <vPortExitCritical>

		taskENTER_CRITICAL();
 8006ee4:	f000 fe18 	bl	8007b18 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8006ee8:	4b0f      	ldr	r3, [pc, #60]	@ (8006f28 <ulTaskNotifyTake+0x88>)
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006eee:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d00c      	beq.n	8006f10 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d004      	beq.n	8006f06 <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8006efc:	4b0a      	ldr	r3, [pc, #40]	@ (8006f28 <ulTaskNotifyTake+0x88>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	2200      	movs	r2, #0
 8006f02:	655a      	str	r2, [r3, #84]	@ 0x54
 8006f04:	e004      	b.n	8006f10 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8006f06:	4b08      	ldr	r3, [pc, #32]	@ (8006f28 <ulTaskNotifyTake+0x88>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	68fa      	ldr	r2, [r7, #12]
 8006f0c:	3a01      	subs	r2, #1
 8006f0e:	655a      	str	r2, [r3, #84]	@ 0x54
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006f10:	4b05      	ldr	r3, [pc, #20]	@ (8006f28 <ulTaskNotifyTake+0x88>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	2200      	movs	r2, #0
 8006f16:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
		}
		taskEXIT_CRITICAL();
 8006f1a:	f000 fe2f 	bl	8007b7c <vPortExitCritical>

		return ulReturn;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
	}
 8006f20:	4618      	mov	r0, r3
 8006f22:	3710      	adds	r7, #16
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}
 8006f28:	2000084c 	.word	0x2000084c
 8006f2c:	e000ed04 	.word	0xe000ed04

08006f30 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b08a      	sub	sp, #40	@ 0x28
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
 8006f38:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d10b      	bne.n	8006f58 <vTaskNotifyGiveFromISR+0x28>
	__asm volatile
 8006f40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f44:	f383 8811 	msr	BASEPRI, r3
 8006f48:	f3bf 8f6f 	isb	sy
 8006f4c:	f3bf 8f4f 	dsb	sy
 8006f50:	61bb      	str	r3, [r7, #24]
}
 8006f52:	bf00      	nop
 8006f54:	bf00      	nop
 8006f56:	e7fd      	b.n	8006f54 <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006f58:	f000 febe 	bl	8007cd8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	627b      	str	r3, [r7, #36]	@ 0x24
	__asm volatile
 8006f60:	f3ef 8211 	mrs	r2, BASEPRI
 8006f64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f68:	f383 8811 	msr	BASEPRI, r3
 8006f6c:	f3bf 8f6f 	isb	sy
 8006f70:	f3bf 8f4f 	dsb	sy
 8006f74:	617a      	str	r2, [r7, #20]
 8006f76:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006f78:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006f7a:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8006f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f7e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8006f82:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8006f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f86:	2202      	movs	r2, #2
 8006f88:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 8006f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f90:	1c5a      	adds	r2, r3, #1
 8006f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f94:	655a      	str	r2, [r3, #84]	@ 0x54

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006f96:	7ffb      	ldrb	r3, [r7, #31]
 8006f98:	2b01      	cmp	r3, #1
 8006f9a:	d147      	bne.n	800702c <vTaskNotifyGiveFromISR+0xfc>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d00b      	beq.n	8006fbc <vTaskNotifyGiveFromISR+0x8c>
	__asm volatile
 8006fa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fa8:	f383 8811 	msr	BASEPRI, r3
 8006fac:	f3bf 8f6f 	isb	sy
 8006fb0:	f3bf 8f4f 	dsb	sy
 8006fb4:	60fb      	str	r3, [r7, #12]
}
 8006fb6:	bf00      	nop
 8006fb8:	bf00      	nop
 8006fba:	e7fd      	b.n	8006fb8 <vTaskNotifyGiveFromISR+0x88>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006fbc:	4b20      	ldr	r3, [pc, #128]	@ (8007040 <vTaskNotifyGiveFromISR+0x110>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d11d      	bne.n	8007000 <vTaskNotifyGiveFromISR+0xd0>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fc6:	3304      	adds	r3, #4
 8006fc8:	4618      	mov	r0, r3
 8006fca:	f7fe fa41 	bl	8005450 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fd2:	4b1c      	ldr	r3, [pc, #112]	@ (8007044 <vTaskNotifyGiveFromISR+0x114>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	429a      	cmp	r2, r3
 8006fd8:	d903      	bls.n	8006fe2 <vTaskNotifyGiveFromISR+0xb2>
 8006fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fde:	4a19      	ldr	r2, [pc, #100]	@ (8007044 <vTaskNotifyGiveFromISR+0x114>)
 8006fe0:	6013      	str	r3, [r2, #0]
 8006fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fe4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fe6:	4613      	mov	r3, r2
 8006fe8:	009b      	lsls	r3, r3, #2
 8006fea:	4413      	add	r3, r2
 8006fec:	009b      	lsls	r3, r3, #2
 8006fee:	4a16      	ldr	r2, [pc, #88]	@ (8007048 <vTaskNotifyGiveFromISR+0x118>)
 8006ff0:	441a      	add	r2, r3
 8006ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ff4:	3304      	adds	r3, #4
 8006ff6:	4619      	mov	r1, r3
 8006ff8:	4610      	mov	r0, r2
 8006ffa:	f7fe f9cc 	bl	8005396 <vListInsertEnd>
 8006ffe:	e005      	b.n	800700c <vTaskNotifyGiveFromISR+0xdc>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8007000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007002:	3318      	adds	r3, #24
 8007004:	4619      	mov	r1, r3
 8007006:	4811      	ldr	r0, [pc, #68]	@ (800704c <vTaskNotifyGiveFromISR+0x11c>)
 8007008:	f7fe f9c5 	bl	8005396 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800700c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800700e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007010:	4b0f      	ldr	r3, [pc, #60]	@ (8007050 <vTaskNotifyGiveFromISR+0x120>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007016:	429a      	cmp	r2, r3
 8007018:	d908      	bls.n	800702c <vTaskNotifyGiveFromISR+0xfc>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d002      	beq.n	8007026 <vTaskNotifyGiveFromISR+0xf6>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	2201      	movs	r2, #1
 8007024:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8007026:	4b0b      	ldr	r3, [pc, #44]	@ (8007054 <vTaskNotifyGiveFromISR+0x124>)
 8007028:	2201      	movs	r2, #1
 800702a:	601a      	str	r2, [r3, #0]
 800702c:	6a3b      	ldr	r3, [r7, #32]
 800702e:	60bb      	str	r3, [r7, #8]
	__asm volatile
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	f383 8811 	msr	BASEPRI, r3
}
 8007036:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 8007038:	bf00      	nop
 800703a:	3728      	adds	r7, #40	@ 0x28
 800703c:	46bd      	mov	sp, r7
 800703e:	bd80      	pop	{r7, pc}
 8007040:	20000d48 	.word	0x20000d48
 8007044:	20000d28 	.word	0x20000d28
 8007048:	20000850 	.word	0x20000850
 800704c:	20000ce0 	.word	0x20000ce0
 8007050:	2000084c 	.word	0x2000084c
 8007054:	20000d34 	.word	0x20000d34

08007058 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b084      	sub	sp, #16
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
 8007060:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007062:	4b21      	ldr	r3, [pc, #132]	@ (80070e8 <prvAddCurrentTaskToDelayedList+0x90>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007068:	4b20      	ldr	r3, [pc, #128]	@ (80070ec <prvAddCurrentTaskToDelayedList+0x94>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	3304      	adds	r3, #4
 800706e:	4618      	mov	r0, r3
 8007070:	f7fe f9ee 	bl	8005450 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f1b3 3fff 	cmp.w	r3, #4294967295
 800707a:	d10a      	bne.n	8007092 <prvAddCurrentTaskToDelayedList+0x3a>
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d007      	beq.n	8007092 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007082:	4b1a      	ldr	r3, [pc, #104]	@ (80070ec <prvAddCurrentTaskToDelayedList+0x94>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	3304      	adds	r3, #4
 8007088:	4619      	mov	r1, r3
 800708a:	4819      	ldr	r0, [pc, #100]	@ (80070f0 <prvAddCurrentTaskToDelayedList+0x98>)
 800708c:	f7fe f983 	bl	8005396 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007090:	e026      	b.n	80070e0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007092:	68fa      	ldr	r2, [r7, #12]
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	4413      	add	r3, r2
 8007098:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800709a:	4b14      	ldr	r3, [pc, #80]	@ (80070ec <prvAddCurrentTaskToDelayedList+0x94>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	68ba      	ldr	r2, [r7, #8]
 80070a0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80070a2:	68ba      	ldr	r2, [r7, #8]
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	429a      	cmp	r2, r3
 80070a8:	d209      	bcs.n	80070be <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80070aa:	4b12      	ldr	r3, [pc, #72]	@ (80070f4 <prvAddCurrentTaskToDelayedList+0x9c>)
 80070ac:	681a      	ldr	r2, [r3, #0]
 80070ae:	4b0f      	ldr	r3, [pc, #60]	@ (80070ec <prvAddCurrentTaskToDelayedList+0x94>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	3304      	adds	r3, #4
 80070b4:	4619      	mov	r1, r3
 80070b6:	4610      	mov	r0, r2
 80070b8:	f7fe f991 	bl	80053de <vListInsert>
}
 80070bc:	e010      	b.n	80070e0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80070be:	4b0e      	ldr	r3, [pc, #56]	@ (80070f8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80070c0:	681a      	ldr	r2, [r3, #0]
 80070c2:	4b0a      	ldr	r3, [pc, #40]	@ (80070ec <prvAddCurrentTaskToDelayedList+0x94>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	3304      	adds	r3, #4
 80070c8:	4619      	mov	r1, r3
 80070ca:	4610      	mov	r0, r2
 80070cc:	f7fe f987 	bl	80053de <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80070d0:	4b0a      	ldr	r3, [pc, #40]	@ (80070fc <prvAddCurrentTaskToDelayedList+0xa4>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	68ba      	ldr	r2, [r7, #8]
 80070d6:	429a      	cmp	r2, r3
 80070d8:	d202      	bcs.n	80070e0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80070da:	4a08      	ldr	r2, [pc, #32]	@ (80070fc <prvAddCurrentTaskToDelayedList+0xa4>)
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	6013      	str	r3, [r2, #0]
}
 80070e0:	bf00      	nop
 80070e2:	3710      	adds	r7, #16
 80070e4:	46bd      	mov	sp, r7
 80070e6:	bd80      	pop	{r7, pc}
 80070e8:	20000d24 	.word	0x20000d24
 80070ec:	2000084c 	.word	0x2000084c
 80070f0:	20000d0c 	.word	0x20000d0c
 80070f4:	20000cdc 	.word	0x20000cdc
 80070f8:	20000cd8 	.word	0x20000cd8
 80070fc:	20000d40 	.word	0x20000d40

08007100 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b08a      	sub	sp, #40	@ 0x28
 8007104:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007106:	2300      	movs	r3, #0
 8007108:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800710a:	f000 fb71 	bl	80077f0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800710e:	4b1d      	ldr	r3, [pc, #116]	@ (8007184 <xTimerCreateTimerTask+0x84>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d021      	beq.n	800715a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007116:	2300      	movs	r3, #0
 8007118:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800711a:	2300      	movs	r3, #0
 800711c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800711e:	1d3a      	adds	r2, r7, #4
 8007120:	f107 0108 	add.w	r1, r7, #8
 8007124:	f107 030c 	add.w	r3, r7, #12
 8007128:	4618      	mov	r0, r3
 800712a:	f7fd fed5 	bl	8004ed8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800712e:	6879      	ldr	r1, [r7, #4]
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	68fa      	ldr	r2, [r7, #12]
 8007134:	9202      	str	r2, [sp, #8]
 8007136:	9301      	str	r3, [sp, #4]
 8007138:	2302      	movs	r3, #2
 800713a:	9300      	str	r3, [sp, #0]
 800713c:	2300      	movs	r3, #0
 800713e:	460a      	mov	r2, r1
 8007140:	4911      	ldr	r1, [pc, #68]	@ (8007188 <xTimerCreateTimerTask+0x88>)
 8007142:	4812      	ldr	r0, [pc, #72]	@ (800718c <xTimerCreateTimerTask+0x8c>)
 8007144:	f7fe fea8 	bl	8005e98 <xTaskCreateStatic>
 8007148:	4603      	mov	r3, r0
 800714a:	4a11      	ldr	r2, [pc, #68]	@ (8007190 <xTimerCreateTimerTask+0x90>)
 800714c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800714e:	4b10      	ldr	r3, [pc, #64]	@ (8007190 <xTimerCreateTimerTask+0x90>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d001      	beq.n	800715a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007156:	2301      	movs	r3, #1
 8007158:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800715a:	697b      	ldr	r3, [r7, #20]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d10b      	bne.n	8007178 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8007160:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007164:	f383 8811 	msr	BASEPRI, r3
 8007168:	f3bf 8f6f 	isb	sy
 800716c:	f3bf 8f4f 	dsb	sy
 8007170:	613b      	str	r3, [r7, #16]
}
 8007172:	bf00      	nop
 8007174:	bf00      	nop
 8007176:	e7fd      	b.n	8007174 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007178:	697b      	ldr	r3, [r7, #20]
}
 800717a:	4618      	mov	r0, r3
 800717c:	3718      	adds	r7, #24
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}
 8007182:	bf00      	nop
 8007184:	20000d7c 	.word	0x20000d7c
 8007188:	08008220 	.word	0x08008220
 800718c:	08007389 	.word	0x08007389
 8007190:	20000d80 	.word	0x20000d80

08007194 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8007194:	b580      	push	{r7, lr}
 8007196:	b088      	sub	sp, #32
 8007198:	af02      	add	r7, sp, #8
 800719a:	60f8      	str	r0, [r7, #12]
 800719c:	60b9      	str	r1, [r7, #8]
 800719e:	607a      	str	r2, [r7, #4]
 80071a0:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80071a2:	202c      	movs	r0, #44	@ 0x2c
 80071a4:	f000 fdda 	bl	8007d5c <pvPortMalloc>
 80071a8:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 80071aa:	697b      	ldr	r3, [r7, #20]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d00d      	beq.n	80071cc <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	2200      	movs	r2, #0
 80071b4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	9301      	str	r3, [sp, #4]
 80071bc:	6a3b      	ldr	r3, [r7, #32]
 80071be:	9300      	str	r3, [sp, #0]
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	687a      	ldr	r2, [r7, #4]
 80071c4:	68b9      	ldr	r1, [r7, #8]
 80071c6:	68f8      	ldr	r0, [r7, #12]
 80071c8:	f000 f805 	bl	80071d6 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80071cc:	697b      	ldr	r3, [r7, #20]
	}
 80071ce:	4618      	mov	r0, r3
 80071d0:	3718      	adds	r7, #24
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}

080071d6 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 80071d6:	b580      	push	{r7, lr}
 80071d8:	b086      	sub	sp, #24
 80071da:	af00      	add	r7, sp, #0
 80071dc:	60f8      	str	r0, [r7, #12]
 80071de:	60b9      	str	r1, [r7, #8]
 80071e0:	607a      	str	r2, [r7, #4]
 80071e2:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d10b      	bne.n	8007202 <prvInitialiseNewTimer+0x2c>
	__asm volatile
 80071ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071ee:	f383 8811 	msr	BASEPRI, r3
 80071f2:	f3bf 8f6f 	isb	sy
 80071f6:	f3bf 8f4f 	dsb	sy
 80071fa:	617b      	str	r3, [r7, #20]
}
 80071fc:	bf00      	nop
 80071fe:	bf00      	nop
 8007200:	e7fd      	b.n	80071fe <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8007202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007204:	2b00      	cmp	r3, #0
 8007206:	d01e      	beq.n	8007246 <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8007208:	f000 faf2 	bl	80077f0 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800720c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800720e:	68fa      	ldr	r2, [r7, #12]
 8007210:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8007212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007214:	68ba      	ldr	r2, [r7, #8]
 8007216:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8007218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800721a:	683a      	ldr	r2, [r7, #0]
 800721c:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800721e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007220:	6a3a      	ldr	r2, [r7, #32]
 8007222:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8007224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007226:	3304      	adds	r3, #4
 8007228:	4618      	mov	r0, r3
 800722a:	f7fe f8a7 	bl	800537c <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d008      	beq.n	8007246 <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8007234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007236:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800723a:	f043 0304 	orr.w	r3, r3, #4
 800723e:	b2da      	uxtb	r2, r3
 8007240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007242:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8007246:	bf00      	nop
 8007248:	3718      	adds	r7, #24
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}
	...

08007250 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b08a      	sub	sp, #40	@ 0x28
 8007254:	af00      	add	r7, sp, #0
 8007256:	60f8      	str	r0, [r7, #12]
 8007258:	60b9      	str	r1, [r7, #8]
 800725a:	607a      	str	r2, [r7, #4]
 800725c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800725e:	2300      	movs	r3, #0
 8007260:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d10b      	bne.n	8007280 <xTimerGenericCommand+0x30>
	__asm volatile
 8007268:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800726c:	f383 8811 	msr	BASEPRI, r3
 8007270:	f3bf 8f6f 	isb	sy
 8007274:	f3bf 8f4f 	dsb	sy
 8007278:	623b      	str	r3, [r7, #32]
}
 800727a:	bf00      	nop
 800727c:	bf00      	nop
 800727e:	e7fd      	b.n	800727c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007280:	4b19      	ldr	r3, [pc, #100]	@ (80072e8 <xTimerGenericCommand+0x98>)
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d02a      	beq.n	80072de <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	2b05      	cmp	r3, #5
 8007298:	dc18      	bgt.n	80072cc <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800729a:	f7ff fd5b 	bl	8006d54 <xTaskGetSchedulerState>
 800729e:	4603      	mov	r3, r0
 80072a0:	2b02      	cmp	r3, #2
 80072a2:	d109      	bne.n	80072b8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80072a4:	4b10      	ldr	r3, [pc, #64]	@ (80072e8 <xTimerGenericCommand+0x98>)
 80072a6:	6818      	ldr	r0, [r3, #0]
 80072a8:	f107 0110 	add.w	r1, r7, #16
 80072ac:	2300      	movs	r3, #0
 80072ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80072b0:	f7fe fa02 	bl	80056b8 <xQueueGenericSend>
 80072b4:	6278      	str	r0, [r7, #36]	@ 0x24
 80072b6:	e012      	b.n	80072de <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80072b8:	4b0b      	ldr	r3, [pc, #44]	@ (80072e8 <xTimerGenericCommand+0x98>)
 80072ba:	6818      	ldr	r0, [r3, #0]
 80072bc:	f107 0110 	add.w	r1, r7, #16
 80072c0:	2300      	movs	r3, #0
 80072c2:	2200      	movs	r2, #0
 80072c4:	f7fe f9f8 	bl	80056b8 <xQueueGenericSend>
 80072c8:	6278      	str	r0, [r7, #36]	@ 0x24
 80072ca:	e008      	b.n	80072de <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80072cc:	4b06      	ldr	r3, [pc, #24]	@ (80072e8 <xTimerGenericCommand+0x98>)
 80072ce:	6818      	ldr	r0, [r3, #0]
 80072d0:	f107 0110 	add.w	r1, r7, #16
 80072d4:	2300      	movs	r3, #0
 80072d6:	683a      	ldr	r2, [r7, #0]
 80072d8:	f7fe faf0 	bl	80058bc <xQueueGenericSendFromISR>
 80072dc:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80072de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80072e0:	4618      	mov	r0, r3
 80072e2:	3728      	adds	r7, #40	@ 0x28
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bd80      	pop	{r7, pc}
 80072e8:	20000d7c 	.word	0x20000d7c

080072ec <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b088      	sub	sp, #32
 80072f0:	af02      	add	r7, sp, #8
 80072f2:	6078      	str	r0, [r7, #4]
 80072f4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072f6:	4b23      	ldr	r3, [pc, #140]	@ (8007384 <prvProcessExpiredTimer+0x98>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	68db      	ldr	r3, [r3, #12]
 80072fc:	68db      	ldr	r3, [r3, #12]
 80072fe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	3304      	adds	r3, #4
 8007304:	4618      	mov	r0, r3
 8007306:	f7fe f8a3 	bl	8005450 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007310:	f003 0304 	and.w	r3, r3, #4
 8007314:	2b00      	cmp	r3, #0
 8007316:	d023      	beq.n	8007360 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007318:	697b      	ldr	r3, [r7, #20]
 800731a:	699a      	ldr	r2, [r3, #24]
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	18d1      	adds	r1, r2, r3
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	683a      	ldr	r2, [r7, #0]
 8007324:	6978      	ldr	r0, [r7, #20]
 8007326:	f000 f8d5 	bl	80074d4 <prvInsertTimerInActiveList>
 800732a:	4603      	mov	r3, r0
 800732c:	2b00      	cmp	r3, #0
 800732e:	d020      	beq.n	8007372 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007330:	2300      	movs	r3, #0
 8007332:	9300      	str	r3, [sp, #0]
 8007334:	2300      	movs	r3, #0
 8007336:	687a      	ldr	r2, [r7, #4]
 8007338:	2100      	movs	r1, #0
 800733a:	6978      	ldr	r0, [r7, #20]
 800733c:	f7ff ff88 	bl	8007250 <xTimerGenericCommand>
 8007340:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007342:	693b      	ldr	r3, [r7, #16]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d114      	bne.n	8007372 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8007348:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800734c:	f383 8811 	msr	BASEPRI, r3
 8007350:	f3bf 8f6f 	isb	sy
 8007354:	f3bf 8f4f 	dsb	sy
 8007358:	60fb      	str	r3, [r7, #12]
}
 800735a:	bf00      	nop
 800735c:	bf00      	nop
 800735e:	e7fd      	b.n	800735c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007360:	697b      	ldr	r3, [r7, #20]
 8007362:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007366:	f023 0301 	bic.w	r3, r3, #1
 800736a:	b2da      	uxtb	r2, r3
 800736c:	697b      	ldr	r3, [r7, #20]
 800736e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	6a1b      	ldr	r3, [r3, #32]
 8007376:	6978      	ldr	r0, [r7, #20]
 8007378:	4798      	blx	r3
}
 800737a:	bf00      	nop
 800737c:	3718      	adds	r7, #24
 800737e:	46bd      	mov	sp, r7
 8007380:	bd80      	pop	{r7, pc}
 8007382:	bf00      	nop
 8007384:	20000d74 	.word	0x20000d74

08007388 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b084      	sub	sp, #16
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007390:	f107 0308 	add.w	r3, r7, #8
 8007394:	4618      	mov	r0, r3
 8007396:	f000 f859 	bl	800744c <prvGetNextExpireTime>
 800739a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	4619      	mov	r1, r3
 80073a0:	68f8      	ldr	r0, [r7, #12]
 80073a2:	f000 f805 	bl	80073b0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80073a6:	f000 f8d7 	bl	8007558 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80073aa:	bf00      	nop
 80073ac:	e7f0      	b.n	8007390 <prvTimerTask+0x8>
	...

080073b0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b084      	sub	sp, #16
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
 80073b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80073ba:	f7ff f831 	bl	8006420 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80073be:	f107 0308 	add.w	r3, r7, #8
 80073c2:	4618      	mov	r0, r3
 80073c4:	f000 f866 	bl	8007494 <prvSampleTimeNow>
 80073c8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d130      	bne.n	8007432 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d10a      	bne.n	80073ec <prvProcessTimerOrBlockTask+0x3c>
 80073d6:	687a      	ldr	r2, [r7, #4]
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	429a      	cmp	r2, r3
 80073dc:	d806      	bhi.n	80073ec <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80073de:	f7ff f82d 	bl	800643c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80073e2:	68f9      	ldr	r1, [r7, #12]
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f7ff ff81 	bl	80072ec <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80073ea:	e024      	b.n	8007436 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d008      	beq.n	8007404 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80073f2:	4b13      	ldr	r3, [pc, #76]	@ (8007440 <prvProcessTimerOrBlockTask+0x90>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d101      	bne.n	8007400 <prvProcessTimerOrBlockTask+0x50>
 80073fc:	2301      	movs	r3, #1
 80073fe:	e000      	b.n	8007402 <prvProcessTimerOrBlockTask+0x52>
 8007400:	2300      	movs	r3, #0
 8007402:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007404:	4b0f      	ldr	r3, [pc, #60]	@ (8007444 <prvProcessTimerOrBlockTask+0x94>)
 8007406:	6818      	ldr	r0, [r3, #0]
 8007408:	687a      	ldr	r2, [r7, #4]
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	1ad3      	subs	r3, r2, r3
 800740e:	683a      	ldr	r2, [r7, #0]
 8007410:	4619      	mov	r1, r3
 8007412:	f7fe fd0d 	bl	8005e30 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007416:	f7ff f811 	bl	800643c <xTaskResumeAll>
 800741a:	4603      	mov	r3, r0
 800741c:	2b00      	cmp	r3, #0
 800741e:	d10a      	bne.n	8007436 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007420:	4b09      	ldr	r3, [pc, #36]	@ (8007448 <prvProcessTimerOrBlockTask+0x98>)
 8007422:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007426:	601a      	str	r2, [r3, #0]
 8007428:	f3bf 8f4f 	dsb	sy
 800742c:	f3bf 8f6f 	isb	sy
}
 8007430:	e001      	b.n	8007436 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007432:	f7ff f803 	bl	800643c <xTaskResumeAll>
}
 8007436:	bf00      	nop
 8007438:	3710      	adds	r7, #16
 800743a:	46bd      	mov	sp, r7
 800743c:	bd80      	pop	{r7, pc}
 800743e:	bf00      	nop
 8007440:	20000d78 	.word	0x20000d78
 8007444:	20000d7c 	.word	0x20000d7c
 8007448:	e000ed04 	.word	0xe000ed04

0800744c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800744c:	b480      	push	{r7}
 800744e:	b085      	sub	sp, #20
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007454:	4b0e      	ldr	r3, [pc, #56]	@ (8007490 <prvGetNextExpireTime+0x44>)
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d101      	bne.n	8007462 <prvGetNextExpireTime+0x16>
 800745e:	2201      	movs	r2, #1
 8007460:	e000      	b.n	8007464 <prvGetNextExpireTime+0x18>
 8007462:	2200      	movs	r2, #0
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d105      	bne.n	800747c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007470:	4b07      	ldr	r3, [pc, #28]	@ (8007490 <prvGetNextExpireTime+0x44>)
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	68db      	ldr	r3, [r3, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	60fb      	str	r3, [r7, #12]
 800747a:	e001      	b.n	8007480 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800747c:	2300      	movs	r3, #0
 800747e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007480:	68fb      	ldr	r3, [r7, #12]
}
 8007482:	4618      	mov	r0, r3
 8007484:	3714      	adds	r7, #20
 8007486:	46bd      	mov	sp, r7
 8007488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748c:	4770      	bx	lr
 800748e:	bf00      	nop
 8007490:	20000d74 	.word	0x20000d74

08007494 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b084      	sub	sp, #16
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800749c:	f7ff f86c 	bl	8006578 <xTaskGetTickCount>
 80074a0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80074a2:	4b0b      	ldr	r3, [pc, #44]	@ (80074d0 <prvSampleTimeNow+0x3c>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	68fa      	ldr	r2, [r7, #12]
 80074a8:	429a      	cmp	r2, r3
 80074aa:	d205      	bcs.n	80074b8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80074ac:	f000 f93a 	bl	8007724 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2201      	movs	r2, #1
 80074b4:	601a      	str	r2, [r3, #0]
 80074b6:	e002      	b.n	80074be <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2200      	movs	r2, #0
 80074bc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80074be:	4a04      	ldr	r2, [pc, #16]	@ (80074d0 <prvSampleTimeNow+0x3c>)
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80074c4:	68fb      	ldr	r3, [r7, #12]
}
 80074c6:	4618      	mov	r0, r3
 80074c8:	3710      	adds	r7, #16
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd80      	pop	{r7, pc}
 80074ce:	bf00      	nop
 80074d0:	20000d84 	.word	0x20000d84

080074d4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b086      	sub	sp, #24
 80074d8:	af00      	add	r7, sp, #0
 80074da:	60f8      	str	r0, [r7, #12]
 80074dc:	60b9      	str	r1, [r7, #8]
 80074de:	607a      	str	r2, [r7, #4]
 80074e0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80074e2:	2300      	movs	r3, #0
 80074e4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	68ba      	ldr	r2, [r7, #8]
 80074ea:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	68fa      	ldr	r2, [r7, #12]
 80074f0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80074f2:	68ba      	ldr	r2, [r7, #8]
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	429a      	cmp	r2, r3
 80074f8:	d812      	bhi.n	8007520 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80074fa:	687a      	ldr	r2, [r7, #4]
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	1ad2      	subs	r2, r2, r3
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	699b      	ldr	r3, [r3, #24]
 8007504:	429a      	cmp	r2, r3
 8007506:	d302      	bcc.n	800750e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007508:	2301      	movs	r3, #1
 800750a:	617b      	str	r3, [r7, #20]
 800750c:	e01b      	b.n	8007546 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800750e:	4b10      	ldr	r3, [pc, #64]	@ (8007550 <prvInsertTimerInActiveList+0x7c>)
 8007510:	681a      	ldr	r2, [r3, #0]
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	3304      	adds	r3, #4
 8007516:	4619      	mov	r1, r3
 8007518:	4610      	mov	r0, r2
 800751a:	f7fd ff60 	bl	80053de <vListInsert>
 800751e:	e012      	b.n	8007546 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007520:	687a      	ldr	r2, [r7, #4]
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	429a      	cmp	r2, r3
 8007526:	d206      	bcs.n	8007536 <prvInsertTimerInActiveList+0x62>
 8007528:	68ba      	ldr	r2, [r7, #8]
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	429a      	cmp	r2, r3
 800752e:	d302      	bcc.n	8007536 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007530:	2301      	movs	r3, #1
 8007532:	617b      	str	r3, [r7, #20]
 8007534:	e007      	b.n	8007546 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007536:	4b07      	ldr	r3, [pc, #28]	@ (8007554 <prvInsertTimerInActiveList+0x80>)
 8007538:	681a      	ldr	r2, [r3, #0]
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	3304      	adds	r3, #4
 800753e:	4619      	mov	r1, r3
 8007540:	4610      	mov	r0, r2
 8007542:	f7fd ff4c 	bl	80053de <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007546:	697b      	ldr	r3, [r7, #20]
}
 8007548:	4618      	mov	r0, r3
 800754a:	3718      	adds	r7, #24
 800754c:	46bd      	mov	sp, r7
 800754e:	bd80      	pop	{r7, pc}
 8007550:	20000d78 	.word	0x20000d78
 8007554:	20000d74 	.word	0x20000d74

08007558 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b08e      	sub	sp, #56	@ 0x38
 800755c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800755e:	e0ce      	b.n	80076fe <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2b00      	cmp	r3, #0
 8007564:	da19      	bge.n	800759a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007566:	1d3b      	adds	r3, r7, #4
 8007568:	3304      	adds	r3, #4
 800756a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800756c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800756e:	2b00      	cmp	r3, #0
 8007570:	d10b      	bne.n	800758a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8007572:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007576:	f383 8811 	msr	BASEPRI, r3
 800757a:	f3bf 8f6f 	isb	sy
 800757e:	f3bf 8f4f 	dsb	sy
 8007582:	61fb      	str	r3, [r7, #28]
}
 8007584:	bf00      	nop
 8007586:	bf00      	nop
 8007588:	e7fd      	b.n	8007586 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800758a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007590:	6850      	ldr	r0, [r2, #4]
 8007592:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007594:	6892      	ldr	r2, [r2, #8]
 8007596:	4611      	mov	r1, r2
 8007598:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2b00      	cmp	r3, #0
 800759e:	f2c0 80ae 	blt.w	80076fe <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80075a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075a8:	695b      	ldr	r3, [r3, #20]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d004      	beq.n	80075b8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80075ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075b0:	3304      	adds	r3, #4
 80075b2:	4618      	mov	r0, r3
 80075b4:	f7fd ff4c 	bl	8005450 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80075b8:	463b      	mov	r3, r7
 80075ba:	4618      	mov	r0, r3
 80075bc:	f7ff ff6a 	bl	8007494 <prvSampleTimeNow>
 80075c0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2b09      	cmp	r3, #9
 80075c6:	f200 8097 	bhi.w	80076f8 <prvProcessReceivedCommands+0x1a0>
 80075ca:	a201      	add	r2, pc, #4	@ (adr r2, 80075d0 <prvProcessReceivedCommands+0x78>)
 80075cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075d0:	080075f9 	.word	0x080075f9
 80075d4:	080075f9 	.word	0x080075f9
 80075d8:	080075f9 	.word	0x080075f9
 80075dc:	0800766f 	.word	0x0800766f
 80075e0:	08007683 	.word	0x08007683
 80075e4:	080076cf 	.word	0x080076cf
 80075e8:	080075f9 	.word	0x080075f9
 80075ec:	080075f9 	.word	0x080075f9
 80075f0:	0800766f 	.word	0x0800766f
 80075f4:	08007683 	.word	0x08007683
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80075f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075fa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80075fe:	f043 0301 	orr.w	r3, r3, #1
 8007602:	b2da      	uxtb	r2, r3
 8007604:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007606:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800760a:	68ba      	ldr	r2, [r7, #8]
 800760c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800760e:	699b      	ldr	r3, [r3, #24]
 8007610:	18d1      	adds	r1, r2, r3
 8007612:	68bb      	ldr	r3, [r7, #8]
 8007614:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007616:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007618:	f7ff ff5c 	bl	80074d4 <prvInsertTimerInActiveList>
 800761c:	4603      	mov	r3, r0
 800761e:	2b00      	cmp	r3, #0
 8007620:	d06c      	beq.n	80076fc <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007622:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007624:	6a1b      	ldr	r3, [r3, #32]
 8007626:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007628:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800762a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800762c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007630:	f003 0304 	and.w	r3, r3, #4
 8007634:	2b00      	cmp	r3, #0
 8007636:	d061      	beq.n	80076fc <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007638:	68ba      	ldr	r2, [r7, #8]
 800763a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800763c:	699b      	ldr	r3, [r3, #24]
 800763e:	441a      	add	r2, r3
 8007640:	2300      	movs	r3, #0
 8007642:	9300      	str	r3, [sp, #0]
 8007644:	2300      	movs	r3, #0
 8007646:	2100      	movs	r1, #0
 8007648:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800764a:	f7ff fe01 	bl	8007250 <xTimerGenericCommand>
 800764e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007650:	6a3b      	ldr	r3, [r7, #32]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d152      	bne.n	80076fc <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8007656:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800765a:	f383 8811 	msr	BASEPRI, r3
 800765e:	f3bf 8f6f 	isb	sy
 8007662:	f3bf 8f4f 	dsb	sy
 8007666:	61bb      	str	r3, [r7, #24]
}
 8007668:	bf00      	nop
 800766a:	bf00      	nop
 800766c:	e7fd      	b.n	800766a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800766e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007670:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007674:	f023 0301 	bic.w	r3, r3, #1
 8007678:	b2da      	uxtb	r2, r3
 800767a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800767c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007680:	e03d      	b.n	80076fe <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007682:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007684:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007688:	f043 0301 	orr.w	r3, r3, #1
 800768c:	b2da      	uxtb	r2, r3
 800768e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007690:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007694:	68ba      	ldr	r2, [r7, #8]
 8007696:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007698:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800769a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800769c:	699b      	ldr	r3, [r3, #24]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d10b      	bne.n	80076ba <prvProcessReceivedCommands+0x162>
	__asm volatile
 80076a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076a6:	f383 8811 	msr	BASEPRI, r3
 80076aa:	f3bf 8f6f 	isb	sy
 80076ae:	f3bf 8f4f 	dsb	sy
 80076b2:	617b      	str	r3, [r7, #20]
}
 80076b4:	bf00      	nop
 80076b6:	bf00      	nop
 80076b8:	e7fd      	b.n	80076b6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80076ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076bc:	699a      	ldr	r2, [r3, #24]
 80076be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076c0:	18d1      	adds	r1, r2, r3
 80076c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80076c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80076c8:	f7ff ff04 	bl	80074d4 <prvInsertTimerInActiveList>
					break;
 80076cc:	e017      	b.n	80076fe <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80076ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80076d4:	f003 0302 	and.w	r3, r3, #2
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d103      	bne.n	80076e4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80076dc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80076de:	f000 fc0b 	bl	8007ef8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80076e2:	e00c      	b.n	80076fe <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80076e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076e6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80076ea:	f023 0301 	bic.w	r3, r3, #1
 80076ee:	b2da      	uxtb	r2, r3
 80076f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076f2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80076f6:	e002      	b.n	80076fe <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80076f8:	bf00      	nop
 80076fa:	e000      	b.n	80076fe <prvProcessReceivedCommands+0x1a6>
					break;
 80076fc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80076fe:	4b08      	ldr	r3, [pc, #32]	@ (8007720 <prvProcessReceivedCommands+0x1c8>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	1d39      	adds	r1, r7, #4
 8007704:	2200      	movs	r2, #0
 8007706:	4618      	mov	r0, r3
 8007708:	f7fe f976 	bl	80059f8 <xQueueReceive>
 800770c:	4603      	mov	r3, r0
 800770e:	2b00      	cmp	r3, #0
 8007710:	f47f af26 	bne.w	8007560 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007714:	bf00      	nop
 8007716:	bf00      	nop
 8007718:	3730      	adds	r7, #48	@ 0x30
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}
 800771e:	bf00      	nop
 8007720:	20000d7c 	.word	0x20000d7c

08007724 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b088      	sub	sp, #32
 8007728:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800772a:	e049      	b.n	80077c0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800772c:	4b2e      	ldr	r3, [pc, #184]	@ (80077e8 <prvSwitchTimerLists+0xc4>)
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	68db      	ldr	r3, [r3, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007736:	4b2c      	ldr	r3, [pc, #176]	@ (80077e8 <prvSwitchTimerLists+0xc4>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	68db      	ldr	r3, [r3, #12]
 800773c:	68db      	ldr	r3, [r3, #12]
 800773e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	3304      	adds	r3, #4
 8007744:	4618      	mov	r0, r3
 8007746:	f7fd fe83 	bl	8005450 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	6a1b      	ldr	r3, [r3, #32]
 800774e:	68f8      	ldr	r0, [r7, #12]
 8007750:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007758:	f003 0304 	and.w	r3, r3, #4
 800775c:	2b00      	cmp	r3, #0
 800775e:	d02f      	beq.n	80077c0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	699b      	ldr	r3, [r3, #24]
 8007764:	693a      	ldr	r2, [r7, #16]
 8007766:	4413      	add	r3, r2
 8007768:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800776a:	68ba      	ldr	r2, [r7, #8]
 800776c:	693b      	ldr	r3, [r7, #16]
 800776e:	429a      	cmp	r2, r3
 8007770:	d90e      	bls.n	8007790 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	68ba      	ldr	r2, [r7, #8]
 8007776:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	68fa      	ldr	r2, [r7, #12]
 800777c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800777e:	4b1a      	ldr	r3, [pc, #104]	@ (80077e8 <prvSwitchTimerLists+0xc4>)
 8007780:	681a      	ldr	r2, [r3, #0]
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	3304      	adds	r3, #4
 8007786:	4619      	mov	r1, r3
 8007788:	4610      	mov	r0, r2
 800778a:	f7fd fe28 	bl	80053de <vListInsert>
 800778e:	e017      	b.n	80077c0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007790:	2300      	movs	r3, #0
 8007792:	9300      	str	r3, [sp, #0]
 8007794:	2300      	movs	r3, #0
 8007796:	693a      	ldr	r2, [r7, #16]
 8007798:	2100      	movs	r1, #0
 800779a:	68f8      	ldr	r0, [r7, #12]
 800779c:	f7ff fd58 	bl	8007250 <xTimerGenericCommand>
 80077a0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d10b      	bne.n	80077c0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80077a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077ac:	f383 8811 	msr	BASEPRI, r3
 80077b0:	f3bf 8f6f 	isb	sy
 80077b4:	f3bf 8f4f 	dsb	sy
 80077b8:	603b      	str	r3, [r7, #0]
}
 80077ba:	bf00      	nop
 80077bc:	bf00      	nop
 80077be:	e7fd      	b.n	80077bc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80077c0:	4b09      	ldr	r3, [pc, #36]	@ (80077e8 <prvSwitchTimerLists+0xc4>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d1b0      	bne.n	800772c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80077ca:	4b07      	ldr	r3, [pc, #28]	@ (80077e8 <prvSwitchTimerLists+0xc4>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80077d0:	4b06      	ldr	r3, [pc, #24]	@ (80077ec <prvSwitchTimerLists+0xc8>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	4a04      	ldr	r2, [pc, #16]	@ (80077e8 <prvSwitchTimerLists+0xc4>)
 80077d6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80077d8:	4a04      	ldr	r2, [pc, #16]	@ (80077ec <prvSwitchTimerLists+0xc8>)
 80077da:	697b      	ldr	r3, [r7, #20]
 80077dc:	6013      	str	r3, [r2, #0]
}
 80077de:	bf00      	nop
 80077e0:	3718      	adds	r7, #24
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}
 80077e6:	bf00      	nop
 80077e8:	20000d74 	.word	0x20000d74
 80077ec:	20000d78 	.word	0x20000d78

080077f0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b082      	sub	sp, #8
 80077f4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80077f6:	f000 f98f 	bl	8007b18 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80077fa:	4b15      	ldr	r3, [pc, #84]	@ (8007850 <prvCheckForValidListAndQueue+0x60>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d120      	bne.n	8007844 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007802:	4814      	ldr	r0, [pc, #80]	@ (8007854 <prvCheckForValidListAndQueue+0x64>)
 8007804:	f7fd fd9a 	bl	800533c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007808:	4813      	ldr	r0, [pc, #76]	@ (8007858 <prvCheckForValidListAndQueue+0x68>)
 800780a:	f7fd fd97 	bl	800533c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800780e:	4b13      	ldr	r3, [pc, #76]	@ (800785c <prvCheckForValidListAndQueue+0x6c>)
 8007810:	4a10      	ldr	r2, [pc, #64]	@ (8007854 <prvCheckForValidListAndQueue+0x64>)
 8007812:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007814:	4b12      	ldr	r3, [pc, #72]	@ (8007860 <prvCheckForValidListAndQueue+0x70>)
 8007816:	4a10      	ldr	r2, [pc, #64]	@ (8007858 <prvCheckForValidListAndQueue+0x68>)
 8007818:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800781a:	2300      	movs	r3, #0
 800781c:	9300      	str	r3, [sp, #0]
 800781e:	4b11      	ldr	r3, [pc, #68]	@ (8007864 <prvCheckForValidListAndQueue+0x74>)
 8007820:	4a11      	ldr	r2, [pc, #68]	@ (8007868 <prvCheckForValidListAndQueue+0x78>)
 8007822:	2110      	movs	r1, #16
 8007824:	200a      	movs	r0, #10
 8007826:	f7fd fea7 	bl	8005578 <xQueueGenericCreateStatic>
 800782a:	4603      	mov	r3, r0
 800782c:	4a08      	ldr	r2, [pc, #32]	@ (8007850 <prvCheckForValidListAndQueue+0x60>)
 800782e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007830:	4b07      	ldr	r3, [pc, #28]	@ (8007850 <prvCheckForValidListAndQueue+0x60>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d005      	beq.n	8007844 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007838:	4b05      	ldr	r3, [pc, #20]	@ (8007850 <prvCheckForValidListAndQueue+0x60>)
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	490b      	ldr	r1, [pc, #44]	@ (800786c <prvCheckForValidListAndQueue+0x7c>)
 800783e:	4618      	mov	r0, r3
 8007840:	f7fe facc 	bl	8005ddc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007844:	f000 f99a 	bl	8007b7c <vPortExitCritical>
}
 8007848:	bf00      	nop
 800784a:	46bd      	mov	sp, r7
 800784c:	bd80      	pop	{r7, pc}
 800784e:	bf00      	nop
 8007850:	20000d7c 	.word	0x20000d7c
 8007854:	20000d4c 	.word	0x20000d4c
 8007858:	20000d60 	.word	0x20000d60
 800785c:	20000d74 	.word	0x20000d74
 8007860:	20000d78 	.word	0x20000d78
 8007864:	20000e28 	.word	0x20000e28
 8007868:	20000d88 	.word	0x20000d88
 800786c:	08008228 	.word	0x08008228

08007870 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8007870:	b580      	push	{r7, lr}
 8007872:	b08a      	sub	sp, #40	@ 0x28
 8007874:	af00      	add	r7, sp, #0
 8007876:	60f8      	str	r0, [r7, #12]
 8007878:	60b9      	str	r1, [r7, #8]
 800787a:	607a      	str	r2, [r7, #4]
 800787c:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800787e:	f06f 0301 	mvn.w	r3, #1
 8007882:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007890:	4b06      	ldr	r3, [pc, #24]	@ (80078ac <xTimerPendFunctionCallFromISR+0x3c>)
 8007892:	6818      	ldr	r0, [r3, #0]
 8007894:	f107 0114 	add.w	r1, r7, #20
 8007898:	2300      	movs	r3, #0
 800789a:	683a      	ldr	r2, [r7, #0]
 800789c:	f7fe f80e 	bl	80058bc <xQueueGenericSendFromISR>
 80078a0:	6278      	str	r0, [r7, #36]	@ 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 80078a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 80078a4:	4618      	mov	r0, r3
 80078a6:	3728      	adds	r7, #40	@ 0x28
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bd80      	pop	{r7, pc}
 80078ac:	20000d7c 	.word	0x20000d7c

080078b0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80078b0:	b480      	push	{r7}
 80078b2:	b085      	sub	sp, #20
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	60f8      	str	r0, [r7, #12]
 80078b8:	60b9      	str	r1, [r7, #8]
 80078ba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	3b04      	subs	r3, #4
 80078c0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80078c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	3b04      	subs	r3, #4
 80078ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	f023 0201 	bic.w	r2, r3, #1
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	3b04      	subs	r3, #4
 80078de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80078e0:	4a0c      	ldr	r2, [pc, #48]	@ (8007914 <pxPortInitialiseStack+0x64>)
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	3b14      	subs	r3, #20
 80078ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80078ec:	687a      	ldr	r2, [r7, #4]
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	3b04      	subs	r3, #4
 80078f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	f06f 0202 	mvn.w	r2, #2
 80078fe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	3b20      	subs	r3, #32
 8007904:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007906:	68fb      	ldr	r3, [r7, #12]
}
 8007908:	4618      	mov	r0, r3
 800790a:	3714      	adds	r7, #20
 800790c:	46bd      	mov	sp, r7
 800790e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007912:	4770      	bx	lr
 8007914:	08007919 	.word	0x08007919

08007918 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007918:	b480      	push	{r7}
 800791a:	b085      	sub	sp, #20
 800791c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800791e:	2300      	movs	r3, #0
 8007920:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007922:	4b13      	ldr	r3, [pc, #76]	@ (8007970 <prvTaskExitError+0x58>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800792a:	d00b      	beq.n	8007944 <prvTaskExitError+0x2c>
	__asm volatile
 800792c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007930:	f383 8811 	msr	BASEPRI, r3
 8007934:	f3bf 8f6f 	isb	sy
 8007938:	f3bf 8f4f 	dsb	sy
 800793c:	60fb      	str	r3, [r7, #12]
}
 800793e:	bf00      	nop
 8007940:	bf00      	nop
 8007942:	e7fd      	b.n	8007940 <prvTaskExitError+0x28>
	__asm volatile
 8007944:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007948:	f383 8811 	msr	BASEPRI, r3
 800794c:	f3bf 8f6f 	isb	sy
 8007950:	f3bf 8f4f 	dsb	sy
 8007954:	60bb      	str	r3, [r7, #8]
}
 8007956:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007958:	bf00      	nop
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d0fc      	beq.n	800795a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007960:	bf00      	nop
 8007962:	bf00      	nop
 8007964:	3714      	adds	r7, #20
 8007966:	46bd      	mov	sp, r7
 8007968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796c:	4770      	bx	lr
 800796e:	bf00      	nop
 8007970:	20000010 	.word	0x20000010
	...

08007980 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007980:	4b07      	ldr	r3, [pc, #28]	@ (80079a0 <pxCurrentTCBConst2>)
 8007982:	6819      	ldr	r1, [r3, #0]
 8007984:	6808      	ldr	r0, [r1, #0]
 8007986:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800798a:	f380 8809 	msr	PSP, r0
 800798e:	f3bf 8f6f 	isb	sy
 8007992:	f04f 0000 	mov.w	r0, #0
 8007996:	f380 8811 	msr	BASEPRI, r0
 800799a:	4770      	bx	lr
 800799c:	f3af 8000 	nop.w

080079a0 <pxCurrentTCBConst2>:
 80079a0:	2000084c 	.word	0x2000084c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80079a4:	bf00      	nop
 80079a6:	bf00      	nop

080079a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80079a8:	4808      	ldr	r0, [pc, #32]	@ (80079cc <prvPortStartFirstTask+0x24>)
 80079aa:	6800      	ldr	r0, [r0, #0]
 80079ac:	6800      	ldr	r0, [r0, #0]
 80079ae:	f380 8808 	msr	MSP, r0
 80079b2:	f04f 0000 	mov.w	r0, #0
 80079b6:	f380 8814 	msr	CONTROL, r0
 80079ba:	b662      	cpsie	i
 80079bc:	b661      	cpsie	f
 80079be:	f3bf 8f4f 	dsb	sy
 80079c2:	f3bf 8f6f 	isb	sy
 80079c6:	df00      	svc	0
 80079c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80079ca:	bf00      	nop
 80079cc:	e000ed08 	.word	0xe000ed08

080079d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b086      	sub	sp, #24
 80079d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80079d6:	4b47      	ldr	r3, [pc, #284]	@ (8007af4 <xPortStartScheduler+0x124>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	4a47      	ldr	r2, [pc, #284]	@ (8007af8 <xPortStartScheduler+0x128>)
 80079dc:	4293      	cmp	r3, r2
 80079de:	d10b      	bne.n	80079f8 <xPortStartScheduler+0x28>
	__asm volatile
 80079e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079e4:	f383 8811 	msr	BASEPRI, r3
 80079e8:	f3bf 8f6f 	isb	sy
 80079ec:	f3bf 8f4f 	dsb	sy
 80079f0:	60fb      	str	r3, [r7, #12]
}
 80079f2:	bf00      	nop
 80079f4:	bf00      	nop
 80079f6:	e7fd      	b.n	80079f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80079f8:	4b3e      	ldr	r3, [pc, #248]	@ (8007af4 <xPortStartScheduler+0x124>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	4a3f      	ldr	r2, [pc, #252]	@ (8007afc <xPortStartScheduler+0x12c>)
 80079fe:	4293      	cmp	r3, r2
 8007a00:	d10b      	bne.n	8007a1a <xPortStartScheduler+0x4a>
	__asm volatile
 8007a02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a06:	f383 8811 	msr	BASEPRI, r3
 8007a0a:	f3bf 8f6f 	isb	sy
 8007a0e:	f3bf 8f4f 	dsb	sy
 8007a12:	613b      	str	r3, [r7, #16]
}
 8007a14:	bf00      	nop
 8007a16:	bf00      	nop
 8007a18:	e7fd      	b.n	8007a16 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007a1a:	4b39      	ldr	r3, [pc, #228]	@ (8007b00 <xPortStartScheduler+0x130>)
 8007a1c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007a1e:	697b      	ldr	r3, [r7, #20]
 8007a20:	781b      	ldrb	r3, [r3, #0]
 8007a22:	b2db      	uxtb	r3, r3
 8007a24:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007a26:	697b      	ldr	r3, [r7, #20]
 8007a28:	22ff      	movs	r2, #255	@ 0xff
 8007a2a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007a2c:	697b      	ldr	r3, [r7, #20]
 8007a2e:	781b      	ldrb	r3, [r3, #0]
 8007a30:	b2db      	uxtb	r3, r3
 8007a32:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007a34:	78fb      	ldrb	r3, [r7, #3]
 8007a36:	b2db      	uxtb	r3, r3
 8007a38:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007a3c:	b2da      	uxtb	r2, r3
 8007a3e:	4b31      	ldr	r3, [pc, #196]	@ (8007b04 <xPortStartScheduler+0x134>)
 8007a40:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007a42:	4b31      	ldr	r3, [pc, #196]	@ (8007b08 <xPortStartScheduler+0x138>)
 8007a44:	2207      	movs	r2, #7
 8007a46:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007a48:	e009      	b.n	8007a5e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8007a4a:	4b2f      	ldr	r3, [pc, #188]	@ (8007b08 <xPortStartScheduler+0x138>)
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	3b01      	subs	r3, #1
 8007a50:	4a2d      	ldr	r2, [pc, #180]	@ (8007b08 <xPortStartScheduler+0x138>)
 8007a52:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007a54:	78fb      	ldrb	r3, [r7, #3]
 8007a56:	b2db      	uxtb	r3, r3
 8007a58:	005b      	lsls	r3, r3, #1
 8007a5a:	b2db      	uxtb	r3, r3
 8007a5c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007a5e:	78fb      	ldrb	r3, [r7, #3]
 8007a60:	b2db      	uxtb	r3, r3
 8007a62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a66:	2b80      	cmp	r3, #128	@ 0x80
 8007a68:	d0ef      	beq.n	8007a4a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007a6a:	4b27      	ldr	r3, [pc, #156]	@ (8007b08 <xPortStartScheduler+0x138>)
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f1c3 0307 	rsb	r3, r3, #7
 8007a72:	2b04      	cmp	r3, #4
 8007a74:	d00b      	beq.n	8007a8e <xPortStartScheduler+0xbe>
	__asm volatile
 8007a76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a7a:	f383 8811 	msr	BASEPRI, r3
 8007a7e:	f3bf 8f6f 	isb	sy
 8007a82:	f3bf 8f4f 	dsb	sy
 8007a86:	60bb      	str	r3, [r7, #8]
}
 8007a88:	bf00      	nop
 8007a8a:	bf00      	nop
 8007a8c:	e7fd      	b.n	8007a8a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007a8e:	4b1e      	ldr	r3, [pc, #120]	@ (8007b08 <xPortStartScheduler+0x138>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	021b      	lsls	r3, r3, #8
 8007a94:	4a1c      	ldr	r2, [pc, #112]	@ (8007b08 <xPortStartScheduler+0x138>)
 8007a96:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007a98:	4b1b      	ldr	r3, [pc, #108]	@ (8007b08 <xPortStartScheduler+0x138>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007aa0:	4a19      	ldr	r2, [pc, #100]	@ (8007b08 <xPortStartScheduler+0x138>)
 8007aa2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	b2da      	uxtb	r2, r3
 8007aa8:	697b      	ldr	r3, [r7, #20]
 8007aaa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007aac:	4b17      	ldr	r3, [pc, #92]	@ (8007b0c <xPortStartScheduler+0x13c>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	4a16      	ldr	r2, [pc, #88]	@ (8007b0c <xPortStartScheduler+0x13c>)
 8007ab2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007ab6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007ab8:	4b14      	ldr	r3, [pc, #80]	@ (8007b0c <xPortStartScheduler+0x13c>)
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	4a13      	ldr	r2, [pc, #76]	@ (8007b0c <xPortStartScheduler+0x13c>)
 8007abe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007ac2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007ac4:	f000 f8da 	bl	8007c7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007ac8:	4b11      	ldr	r3, [pc, #68]	@ (8007b10 <xPortStartScheduler+0x140>)
 8007aca:	2200      	movs	r2, #0
 8007acc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007ace:	f000 f8f9 	bl	8007cc4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007ad2:	4b10      	ldr	r3, [pc, #64]	@ (8007b14 <xPortStartScheduler+0x144>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	4a0f      	ldr	r2, [pc, #60]	@ (8007b14 <xPortStartScheduler+0x144>)
 8007ad8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8007adc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007ade:	f7ff ff63 	bl	80079a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007ae2:	f7fe fe25 	bl	8006730 <vTaskSwitchContext>
	prvTaskExitError();
 8007ae6:	f7ff ff17 	bl	8007918 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007aea:	2300      	movs	r3, #0
}
 8007aec:	4618      	mov	r0, r3
 8007aee:	3718      	adds	r7, #24
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bd80      	pop	{r7, pc}
 8007af4:	e000ed00 	.word	0xe000ed00
 8007af8:	410fc271 	.word	0x410fc271
 8007afc:	410fc270 	.word	0x410fc270
 8007b00:	e000e400 	.word	0xe000e400
 8007b04:	20000e78 	.word	0x20000e78
 8007b08:	20000e7c 	.word	0x20000e7c
 8007b0c:	e000ed20 	.word	0xe000ed20
 8007b10:	20000010 	.word	0x20000010
 8007b14:	e000ef34 	.word	0xe000ef34

08007b18 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b083      	sub	sp, #12
 8007b1c:	af00      	add	r7, sp, #0
	__asm volatile
 8007b1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b22:	f383 8811 	msr	BASEPRI, r3
 8007b26:	f3bf 8f6f 	isb	sy
 8007b2a:	f3bf 8f4f 	dsb	sy
 8007b2e:	607b      	str	r3, [r7, #4]
}
 8007b30:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007b32:	4b10      	ldr	r3, [pc, #64]	@ (8007b74 <vPortEnterCritical+0x5c>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	3301      	adds	r3, #1
 8007b38:	4a0e      	ldr	r2, [pc, #56]	@ (8007b74 <vPortEnterCritical+0x5c>)
 8007b3a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007b3c:	4b0d      	ldr	r3, [pc, #52]	@ (8007b74 <vPortEnterCritical+0x5c>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	2b01      	cmp	r3, #1
 8007b42:	d110      	bne.n	8007b66 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007b44:	4b0c      	ldr	r3, [pc, #48]	@ (8007b78 <vPortEnterCritical+0x60>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	b2db      	uxtb	r3, r3
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d00b      	beq.n	8007b66 <vPortEnterCritical+0x4e>
	__asm volatile
 8007b4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b52:	f383 8811 	msr	BASEPRI, r3
 8007b56:	f3bf 8f6f 	isb	sy
 8007b5a:	f3bf 8f4f 	dsb	sy
 8007b5e:	603b      	str	r3, [r7, #0]
}
 8007b60:	bf00      	nop
 8007b62:	bf00      	nop
 8007b64:	e7fd      	b.n	8007b62 <vPortEnterCritical+0x4a>
	}
}
 8007b66:	bf00      	nop
 8007b68:	370c      	adds	r7, #12
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b70:	4770      	bx	lr
 8007b72:	bf00      	nop
 8007b74:	20000010 	.word	0x20000010
 8007b78:	e000ed04 	.word	0xe000ed04

08007b7c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	b083      	sub	sp, #12
 8007b80:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007b82:	4b12      	ldr	r3, [pc, #72]	@ (8007bcc <vPortExitCritical+0x50>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d10b      	bne.n	8007ba2 <vPortExitCritical+0x26>
	__asm volatile
 8007b8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b8e:	f383 8811 	msr	BASEPRI, r3
 8007b92:	f3bf 8f6f 	isb	sy
 8007b96:	f3bf 8f4f 	dsb	sy
 8007b9a:	607b      	str	r3, [r7, #4]
}
 8007b9c:	bf00      	nop
 8007b9e:	bf00      	nop
 8007ba0:	e7fd      	b.n	8007b9e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007ba2:	4b0a      	ldr	r3, [pc, #40]	@ (8007bcc <vPortExitCritical+0x50>)
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	3b01      	subs	r3, #1
 8007ba8:	4a08      	ldr	r2, [pc, #32]	@ (8007bcc <vPortExitCritical+0x50>)
 8007baa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007bac:	4b07      	ldr	r3, [pc, #28]	@ (8007bcc <vPortExitCritical+0x50>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d105      	bne.n	8007bc0 <vPortExitCritical+0x44>
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	f383 8811 	msr	BASEPRI, r3
}
 8007bbe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007bc0:	bf00      	nop
 8007bc2:	370c      	adds	r7, #12
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bca:	4770      	bx	lr
 8007bcc:	20000010 	.word	0x20000010

08007bd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007bd0:	f3ef 8009 	mrs	r0, PSP
 8007bd4:	f3bf 8f6f 	isb	sy
 8007bd8:	4b15      	ldr	r3, [pc, #84]	@ (8007c30 <pxCurrentTCBConst>)
 8007bda:	681a      	ldr	r2, [r3, #0]
 8007bdc:	f01e 0f10 	tst.w	lr, #16
 8007be0:	bf08      	it	eq
 8007be2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007be6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bea:	6010      	str	r0, [r2, #0]
 8007bec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007bf0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007bf4:	f380 8811 	msr	BASEPRI, r0
 8007bf8:	f3bf 8f4f 	dsb	sy
 8007bfc:	f3bf 8f6f 	isb	sy
 8007c00:	f7fe fd96 	bl	8006730 <vTaskSwitchContext>
 8007c04:	f04f 0000 	mov.w	r0, #0
 8007c08:	f380 8811 	msr	BASEPRI, r0
 8007c0c:	bc09      	pop	{r0, r3}
 8007c0e:	6819      	ldr	r1, [r3, #0]
 8007c10:	6808      	ldr	r0, [r1, #0]
 8007c12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c16:	f01e 0f10 	tst.w	lr, #16
 8007c1a:	bf08      	it	eq
 8007c1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007c20:	f380 8809 	msr	PSP, r0
 8007c24:	f3bf 8f6f 	isb	sy
 8007c28:	4770      	bx	lr
 8007c2a:	bf00      	nop
 8007c2c:	f3af 8000 	nop.w

08007c30 <pxCurrentTCBConst>:
 8007c30:	2000084c 	.word	0x2000084c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007c34:	bf00      	nop
 8007c36:	bf00      	nop

08007c38 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b082      	sub	sp, #8
 8007c3c:	af00      	add	r7, sp, #0
	__asm volatile
 8007c3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c42:	f383 8811 	msr	BASEPRI, r3
 8007c46:	f3bf 8f6f 	isb	sy
 8007c4a:	f3bf 8f4f 	dsb	sy
 8007c4e:	607b      	str	r3, [r7, #4]
}
 8007c50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007c52:	f7fe fcb3 	bl	80065bc <xTaskIncrementTick>
 8007c56:	4603      	mov	r3, r0
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d003      	beq.n	8007c64 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007c5c:	4b06      	ldr	r3, [pc, #24]	@ (8007c78 <xPortSysTickHandler+0x40>)
 8007c5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c62:	601a      	str	r2, [r3, #0]
 8007c64:	2300      	movs	r3, #0
 8007c66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	f383 8811 	msr	BASEPRI, r3
}
 8007c6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007c70:	bf00      	nop
 8007c72:	3708      	adds	r7, #8
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}
 8007c78:	e000ed04 	.word	0xe000ed04

08007c7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007c7c:	b480      	push	{r7}
 8007c7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007c80:	4b0b      	ldr	r3, [pc, #44]	@ (8007cb0 <vPortSetupTimerInterrupt+0x34>)
 8007c82:	2200      	movs	r2, #0
 8007c84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007c86:	4b0b      	ldr	r3, [pc, #44]	@ (8007cb4 <vPortSetupTimerInterrupt+0x38>)
 8007c88:	2200      	movs	r2, #0
 8007c8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007c8c:	4b0a      	ldr	r3, [pc, #40]	@ (8007cb8 <vPortSetupTimerInterrupt+0x3c>)
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	4a0a      	ldr	r2, [pc, #40]	@ (8007cbc <vPortSetupTimerInterrupt+0x40>)
 8007c92:	fba2 2303 	umull	r2, r3, r2, r3
 8007c96:	099b      	lsrs	r3, r3, #6
 8007c98:	4a09      	ldr	r2, [pc, #36]	@ (8007cc0 <vPortSetupTimerInterrupt+0x44>)
 8007c9a:	3b01      	subs	r3, #1
 8007c9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007c9e:	4b04      	ldr	r3, [pc, #16]	@ (8007cb0 <vPortSetupTimerInterrupt+0x34>)
 8007ca0:	2207      	movs	r2, #7
 8007ca2:	601a      	str	r2, [r3, #0]
}
 8007ca4:	bf00      	nop
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cac:	4770      	bx	lr
 8007cae:	bf00      	nop
 8007cb0:	e000e010 	.word	0xe000e010
 8007cb4:	e000e018 	.word	0xe000e018
 8007cb8:	20000004 	.word	0x20000004
 8007cbc:	10624dd3 	.word	0x10624dd3
 8007cc0:	e000e014 	.word	0xe000e014

08007cc4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007cc4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007cd4 <vPortEnableVFP+0x10>
 8007cc8:	6801      	ldr	r1, [r0, #0]
 8007cca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007cce:	6001      	str	r1, [r0, #0]
 8007cd0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007cd2:	bf00      	nop
 8007cd4:	e000ed88 	.word	0xe000ed88

08007cd8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007cd8:	b480      	push	{r7}
 8007cda:	b085      	sub	sp, #20
 8007cdc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007cde:	f3ef 8305 	mrs	r3, IPSR
 8007ce2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	2b0f      	cmp	r3, #15
 8007ce8:	d915      	bls.n	8007d16 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007cea:	4a18      	ldr	r2, [pc, #96]	@ (8007d4c <vPortValidateInterruptPriority+0x74>)
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	4413      	add	r3, r2
 8007cf0:	781b      	ldrb	r3, [r3, #0]
 8007cf2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007cf4:	4b16      	ldr	r3, [pc, #88]	@ (8007d50 <vPortValidateInterruptPriority+0x78>)
 8007cf6:	781b      	ldrb	r3, [r3, #0]
 8007cf8:	7afa      	ldrb	r2, [r7, #11]
 8007cfa:	429a      	cmp	r2, r3
 8007cfc:	d20b      	bcs.n	8007d16 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8007cfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d02:	f383 8811 	msr	BASEPRI, r3
 8007d06:	f3bf 8f6f 	isb	sy
 8007d0a:	f3bf 8f4f 	dsb	sy
 8007d0e:	607b      	str	r3, [r7, #4]
}
 8007d10:	bf00      	nop
 8007d12:	bf00      	nop
 8007d14:	e7fd      	b.n	8007d12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007d16:	4b0f      	ldr	r3, [pc, #60]	@ (8007d54 <vPortValidateInterruptPriority+0x7c>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007d1e:	4b0e      	ldr	r3, [pc, #56]	@ (8007d58 <vPortValidateInterruptPriority+0x80>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	429a      	cmp	r2, r3
 8007d24:	d90b      	bls.n	8007d3e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007d26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d2a:	f383 8811 	msr	BASEPRI, r3
 8007d2e:	f3bf 8f6f 	isb	sy
 8007d32:	f3bf 8f4f 	dsb	sy
 8007d36:	603b      	str	r3, [r7, #0]
}
 8007d38:	bf00      	nop
 8007d3a:	bf00      	nop
 8007d3c:	e7fd      	b.n	8007d3a <vPortValidateInterruptPriority+0x62>
	}
 8007d3e:	bf00      	nop
 8007d40:	3714      	adds	r7, #20
 8007d42:	46bd      	mov	sp, r7
 8007d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d48:	4770      	bx	lr
 8007d4a:	bf00      	nop
 8007d4c:	e000e3f0 	.word	0xe000e3f0
 8007d50:	20000e78 	.word	0x20000e78
 8007d54:	e000ed0c 	.word	0xe000ed0c
 8007d58:	20000e7c 	.word	0x20000e7c

08007d5c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b08a      	sub	sp, #40	@ 0x28
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007d64:	2300      	movs	r3, #0
 8007d66:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007d68:	f7fe fb5a 	bl	8006420 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007d6c:	4b5c      	ldr	r3, [pc, #368]	@ (8007ee0 <pvPortMalloc+0x184>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d101      	bne.n	8007d78 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007d74:	f000 f924 	bl	8007fc0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007d78:	4b5a      	ldr	r3, [pc, #360]	@ (8007ee4 <pvPortMalloc+0x188>)
 8007d7a:	681a      	ldr	r2, [r3, #0]
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	4013      	ands	r3, r2
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	f040 8095 	bne.w	8007eb0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d01e      	beq.n	8007dca <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007d8c:	2208      	movs	r2, #8
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	4413      	add	r3, r2
 8007d92:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f003 0307 	and.w	r3, r3, #7
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d015      	beq.n	8007dca <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f023 0307 	bic.w	r3, r3, #7
 8007da4:	3308      	adds	r3, #8
 8007da6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	f003 0307 	and.w	r3, r3, #7
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d00b      	beq.n	8007dca <pvPortMalloc+0x6e>
	__asm volatile
 8007db2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007db6:	f383 8811 	msr	BASEPRI, r3
 8007dba:	f3bf 8f6f 	isb	sy
 8007dbe:	f3bf 8f4f 	dsb	sy
 8007dc2:	617b      	str	r3, [r7, #20]
}
 8007dc4:	bf00      	nop
 8007dc6:	bf00      	nop
 8007dc8:	e7fd      	b.n	8007dc6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d06f      	beq.n	8007eb0 <pvPortMalloc+0x154>
 8007dd0:	4b45      	ldr	r3, [pc, #276]	@ (8007ee8 <pvPortMalloc+0x18c>)
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	687a      	ldr	r2, [r7, #4]
 8007dd6:	429a      	cmp	r2, r3
 8007dd8:	d86a      	bhi.n	8007eb0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007dda:	4b44      	ldr	r3, [pc, #272]	@ (8007eec <pvPortMalloc+0x190>)
 8007ddc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007dde:	4b43      	ldr	r3, [pc, #268]	@ (8007eec <pvPortMalloc+0x190>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007de4:	e004      	b.n	8007df0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007de8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007df2:	685b      	ldr	r3, [r3, #4]
 8007df4:	687a      	ldr	r2, [r7, #4]
 8007df6:	429a      	cmp	r2, r3
 8007df8:	d903      	bls.n	8007e02 <pvPortMalloc+0xa6>
 8007dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d1f1      	bne.n	8007de6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007e02:	4b37      	ldr	r3, [pc, #220]	@ (8007ee0 <pvPortMalloc+0x184>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e08:	429a      	cmp	r2, r3
 8007e0a:	d051      	beq.n	8007eb0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007e0c:	6a3b      	ldr	r3, [r7, #32]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	2208      	movs	r2, #8
 8007e12:	4413      	add	r3, r2
 8007e14:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e18:	681a      	ldr	r2, [r3, #0]
 8007e1a:	6a3b      	ldr	r3, [r7, #32]
 8007e1c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e20:	685a      	ldr	r2, [r3, #4]
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	1ad2      	subs	r2, r2, r3
 8007e26:	2308      	movs	r3, #8
 8007e28:	005b      	lsls	r3, r3, #1
 8007e2a:	429a      	cmp	r2, r3
 8007e2c:	d920      	bls.n	8007e70 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007e2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	4413      	add	r3, r2
 8007e34:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007e36:	69bb      	ldr	r3, [r7, #24]
 8007e38:	f003 0307 	and.w	r3, r3, #7
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d00b      	beq.n	8007e58 <pvPortMalloc+0xfc>
	__asm volatile
 8007e40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e44:	f383 8811 	msr	BASEPRI, r3
 8007e48:	f3bf 8f6f 	isb	sy
 8007e4c:	f3bf 8f4f 	dsb	sy
 8007e50:	613b      	str	r3, [r7, #16]
}
 8007e52:	bf00      	nop
 8007e54:	bf00      	nop
 8007e56:	e7fd      	b.n	8007e54 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e5a:	685a      	ldr	r2, [r3, #4]
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	1ad2      	subs	r2, r2, r3
 8007e60:	69bb      	ldr	r3, [r7, #24]
 8007e62:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e66:	687a      	ldr	r2, [r7, #4]
 8007e68:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007e6a:	69b8      	ldr	r0, [r7, #24]
 8007e6c:	f000 f90a 	bl	8008084 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007e70:	4b1d      	ldr	r3, [pc, #116]	@ (8007ee8 <pvPortMalloc+0x18c>)
 8007e72:	681a      	ldr	r2, [r3, #0]
 8007e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e76:	685b      	ldr	r3, [r3, #4]
 8007e78:	1ad3      	subs	r3, r2, r3
 8007e7a:	4a1b      	ldr	r2, [pc, #108]	@ (8007ee8 <pvPortMalloc+0x18c>)
 8007e7c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007e7e:	4b1a      	ldr	r3, [pc, #104]	@ (8007ee8 <pvPortMalloc+0x18c>)
 8007e80:	681a      	ldr	r2, [r3, #0]
 8007e82:	4b1b      	ldr	r3, [pc, #108]	@ (8007ef0 <pvPortMalloc+0x194>)
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	429a      	cmp	r2, r3
 8007e88:	d203      	bcs.n	8007e92 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007e8a:	4b17      	ldr	r3, [pc, #92]	@ (8007ee8 <pvPortMalloc+0x18c>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	4a18      	ldr	r2, [pc, #96]	@ (8007ef0 <pvPortMalloc+0x194>)
 8007e90:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e94:	685a      	ldr	r2, [r3, #4]
 8007e96:	4b13      	ldr	r3, [pc, #76]	@ (8007ee4 <pvPortMalloc+0x188>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	431a      	orrs	r2, r3
 8007e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e9e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007ea6:	4b13      	ldr	r3, [pc, #76]	@ (8007ef4 <pvPortMalloc+0x198>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	3301      	adds	r3, #1
 8007eac:	4a11      	ldr	r2, [pc, #68]	@ (8007ef4 <pvPortMalloc+0x198>)
 8007eae:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007eb0:	f7fe fac4 	bl	800643c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007eb4:	69fb      	ldr	r3, [r7, #28]
 8007eb6:	f003 0307 	and.w	r3, r3, #7
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d00b      	beq.n	8007ed6 <pvPortMalloc+0x17a>
	__asm volatile
 8007ebe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ec2:	f383 8811 	msr	BASEPRI, r3
 8007ec6:	f3bf 8f6f 	isb	sy
 8007eca:	f3bf 8f4f 	dsb	sy
 8007ece:	60fb      	str	r3, [r7, #12]
}
 8007ed0:	bf00      	nop
 8007ed2:	bf00      	nop
 8007ed4:	e7fd      	b.n	8007ed2 <pvPortMalloc+0x176>
	return pvReturn;
 8007ed6:	69fb      	ldr	r3, [r7, #28]
}
 8007ed8:	4618      	mov	r0, r3
 8007eda:	3728      	adds	r7, #40	@ 0x28
 8007edc:	46bd      	mov	sp, r7
 8007ede:	bd80      	pop	{r7, pc}
 8007ee0:	20004a88 	.word	0x20004a88
 8007ee4:	20004a9c 	.word	0x20004a9c
 8007ee8:	20004a8c 	.word	0x20004a8c
 8007eec:	20004a80 	.word	0x20004a80
 8007ef0:	20004a90 	.word	0x20004a90
 8007ef4:	20004a94 	.word	0x20004a94

08007ef8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b086      	sub	sp, #24
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d04f      	beq.n	8007faa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007f0a:	2308      	movs	r3, #8
 8007f0c:	425b      	negs	r3, r3
 8007f0e:	697a      	ldr	r2, [r7, #20]
 8007f10:	4413      	add	r3, r2
 8007f12:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007f14:	697b      	ldr	r3, [r7, #20]
 8007f16:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007f18:	693b      	ldr	r3, [r7, #16]
 8007f1a:	685a      	ldr	r2, [r3, #4]
 8007f1c:	4b25      	ldr	r3, [pc, #148]	@ (8007fb4 <vPortFree+0xbc>)
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	4013      	ands	r3, r2
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d10b      	bne.n	8007f3e <vPortFree+0x46>
	__asm volatile
 8007f26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f2a:	f383 8811 	msr	BASEPRI, r3
 8007f2e:	f3bf 8f6f 	isb	sy
 8007f32:	f3bf 8f4f 	dsb	sy
 8007f36:	60fb      	str	r3, [r7, #12]
}
 8007f38:	bf00      	nop
 8007f3a:	bf00      	nop
 8007f3c:	e7fd      	b.n	8007f3a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007f3e:	693b      	ldr	r3, [r7, #16]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d00b      	beq.n	8007f5e <vPortFree+0x66>
	__asm volatile
 8007f46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f4a:	f383 8811 	msr	BASEPRI, r3
 8007f4e:	f3bf 8f6f 	isb	sy
 8007f52:	f3bf 8f4f 	dsb	sy
 8007f56:	60bb      	str	r3, [r7, #8]
}
 8007f58:	bf00      	nop
 8007f5a:	bf00      	nop
 8007f5c:	e7fd      	b.n	8007f5a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007f5e:	693b      	ldr	r3, [r7, #16]
 8007f60:	685a      	ldr	r2, [r3, #4]
 8007f62:	4b14      	ldr	r3, [pc, #80]	@ (8007fb4 <vPortFree+0xbc>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	4013      	ands	r3, r2
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d01e      	beq.n	8007faa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007f6c:	693b      	ldr	r3, [r7, #16]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d11a      	bne.n	8007faa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007f74:	693b      	ldr	r3, [r7, #16]
 8007f76:	685a      	ldr	r2, [r3, #4]
 8007f78:	4b0e      	ldr	r3, [pc, #56]	@ (8007fb4 <vPortFree+0xbc>)
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	43db      	mvns	r3, r3
 8007f7e:	401a      	ands	r2, r3
 8007f80:	693b      	ldr	r3, [r7, #16]
 8007f82:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007f84:	f7fe fa4c 	bl	8006420 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007f88:	693b      	ldr	r3, [r7, #16]
 8007f8a:	685a      	ldr	r2, [r3, #4]
 8007f8c:	4b0a      	ldr	r3, [pc, #40]	@ (8007fb8 <vPortFree+0xc0>)
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	4413      	add	r3, r2
 8007f92:	4a09      	ldr	r2, [pc, #36]	@ (8007fb8 <vPortFree+0xc0>)
 8007f94:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007f96:	6938      	ldr	r0, [r7, #16]
 8007f98:	f000 f874 	bl	8008084 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007f9c:	4b07      	ldr	r3, [pc, #28]	@ (8007fbc <vPortFree+0xc4>)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	3301      	adds	r3, #1
 8007fa2:	4a06      	ldr	r2, [pc, #24]	@ (8007fbc <vPortFree+0xc4>)
 8007fa4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007fa6:	f7fe fa49 	bl	800643c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007faa:	bf00      	nop
 8007fac:	3718      	adds	r7, #24
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}
 8007fb2:	bf00      	nop
 8007fb4:	20004a9c 	.word	0x20004a9c
 8007fb8:	20004a8c 	.word	0x20004a8c
 8007fbc:	20004a98 	.word	0x20004a98

08007fc0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007fc0:	b480      	push	{r7}
 8007fc2:	b085      	sub	sp, #20
 8007fc4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007fc6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8007fca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007fcc:	4b27      	ldr	r3, [pc, #156]	@ (800806c <prvHeapInit+0xac>)
 8007fce:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	f003 0307 	and.w	r3, r3, #7
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d00c      	beq.n	8007ff4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	3307      	adds	r3, #7
 8007fde:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	f023 0307 	bic.w	r3, r3, #7
 8007fe6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007fe8:	68ba      	ldr	r2, [r7, #8]
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	1ad3      	subs	r3, r2, r3
 8007fee:	4a1f      	ldr	r2, [pc, #124]	@ (800806c <prvHeapInit+0xac>)
 8007ff0:	4413      	add	r3, r2
 8007ff2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007ff8:	4a1d      	ldr	r2, [pc, #116]	@ (8008070 <prvHeapInit+0xb0>)
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007ffe:	4b1c      	ldr	r3, [pc, #112]	@ (8008070 <prvHeapInit+0xb0>)
 8008000:	2200      	movs	r2, #0
 8008002:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	68ba      	ldr	r2, [r7, #8]
 8008008:	4413      	add	r3, r2
 800800a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800800c:	2208      	movs	r2, #8
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	1a9b      	subs	r3, r3, r2
 8008012:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	f023 0307 	bic.w	r3, r3, #7
 800801a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	4a15      	ldr	r2, [pc, #84]	@ (8008074 <prvHeapInit+0xb4>)
 8008020:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008022:	4b14      	ldr	r3, [pc, #80]	@ (8008074 <prvHeapInit+0xb4>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	2200      	movs	r2, #0
 8008028:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800802a:	4b12      	ldr	r3, [pc, #72]	@ (8008074 <prvHeapInit+0xb4>)
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	2200      	movs	r2, #0
 8008030:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	68fa      	ldr	r2, [r7, #12]
 800803a:	1ad2      	subs	r2, r2, r3
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008040:	4b0c      	ldr	r3, [pc, #48]	@ (8008074 <prvHeapInit+0xb4>)
 8008042:	681a      	ldr	r2, [r3, #0]
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	685b      	ldr	r3, [r3, #4]
 800804c:	4a0a      	ldr	r2, [pc, #40]	@ (8008078 <prvHeapInit+0xb8>)
 800804e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	685b      	ldr	r3, [r3, #4]
 8008054:	4a09      	ldr	r2, [pc, #36]	@ (800807c <prvHeapInit+0xbc>)
 8008056:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008058:	4b09      	ldr	r3, [pc, #36]	@ (8008080 <prvHeapInit+0xc0>)
 800805a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800805e:	601a      	str	r2, [r3, #0]
}
 8008060:	bf00      	nop
 8008062:	3714      	adds	r7, #20
 8008064:	46bd      	mov	sp, r7
 8008066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806a:	4770      	bx	lr
 800806c:	20000e80 	.word	0x20000e80
 8008070:	20004a80 	.word	0x20004a80
 8008074:	20004a88 	.word	0x20004a88
 8008078:	20004a90 	.word	0x20004a90
 800807c:	20004a8c 	.word	0x20004a8c
 8008080:	20004a9c 	.word	0x20004a9c

08008084 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008084:	b480      	push	{r7}
 8008086:	b085      	sub	sp, #20
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800808c:	4b28      	ldr	r3, [pc, #160]	@ (8008130 <prvInsertBlockIntoFreeList+0xac>)
 800808e:	60fb      	str	r3, [r7, #12]
 8008090:	e002      	b.n	8008098 <prvInsertBlockIntoFreeList+0x14>
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	60fb      	str	r3, [r7, #12]
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	687a      	ldr	r2, [r7, #4]
 800809e:	429a      	cmp	r2, r3
 80080a0:	d8f7      	bhi.n	8008092 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	685b      	ldr	r3, [r3, #4]
 80080aa:	68ba      	ldr	r2, [r7, #8]
 80080ac:	4413      	add	r3, r2
 80080ae:	687a      	ldr	r2, [r7, #4]
 80080b0:	429a      	cmp	r2, r3
 80080b2:	d108      	bne.n	80080c6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	685a      	ldr	r2, [r3, #4]
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	685b      	ldr	r3, [r3, #4]
 80080bc:	441a      	add	r2, r3
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	685b      	ldr	r3, [r3, #4]
 80080ce:	68ba      	ldr	r2, [r7, #8]
 80080d0:	441a      	add	r2, r3
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	429a      	cmp	r2, r3
 80080d8:	d118      	bne.n	800810c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681a      	ldr	r2, [r3, #0]
 80080de:	4b15      	ldr	r3, [pc, #84]	@ (8008134 <prvInsertBlockIntoFreeList+0xb0>)
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	429a      	cmp	r2, r3
 80080e4:	d00d      	beq.n	8008102 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	685a      	ldr	r2, [r3, #4]
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	685b      	ldr	r3, [r3, #4]
 80080f0:	441a      	add	r2, r3
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	681a      	ldr	r2, [r3, #0]
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	601a      	str	r2, [r3, #0]
 8008100:	e008      	b.n	8008114 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008102:	4b0c      	ldr	r3, [pc, #48]	@ (8008134 <prvInsertBlockIntoFreeList+0xb0>)
 8008104:	681a      	ldr	r2, [r3, #0]
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	601a      	str	r2, [r3, #0]
 800810a:	e003      	b.n	8008114 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	681a      	ldr	r2, [r3, #0]
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008114:	68fa      	ldr	r2, [r7, #12]
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	429a      	cmp	r2, r3
 800811a:	d002      	beq.n	8008122 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	687a      	ldr	r2, [r7, #4]
 8008120:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008122:	bf00      	nop
 8008124:	3714      	adds	r7, #20
 8008126:	46bd      	mov	sp, r7
 8008128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812c:	4770      	bx	lr
 800812e:	bf00      	nop
 8008130:	20004a80 	.word	0x20004a80
 8008134:	20004a88 	.word	0x20004a88

08008138 <memset>:
 8008138:	4402      	add	r2, r0
 800813a:	4603      	mov	r3, r0
 800813c:	4293      	cmp	r3, r2
 800813e:	d100      	bne.n	8008142 <memset+0xa>
 8008140:	4770      	bx	lr
 8008142:	f803 1b01 	strb.w	r1, [r3], #1
 8008146:	e7f9      	b.n	800813c <memset+0x4>

08008148 <__libc_init_array>:
 8008148:	b570      	push	{r4, r5, r6, lr}
 800814a:	4d0d      	ldr	r5, [pc, #52]	@ (8008180 <__libc_init_array+0x38>)
 800814c:	4c0d      	ldr	r4, [pc, #52]	@ (8008184 <__libc_init_array+0x3c>)
 800814e:	1b64      	subs	r4, r4, r5
 8008150:	10a4      	asrs	r4, r4, #2
 8008152:	2600      	movs	r6, #0
 8008154:	42a6      	cmp	r6, r4
 8008156:	d109      	bne.n	800816c <__libc_init_array+0x24>
 8008158:	4d0b      	ldr	r5, [pc, #44]	@ (8008188 <__libc_init_array+0x40>)
 800815a:	4c0c      	ldr	r4, [pc, #48]	@ (800818c <__libc_init_array+0x44>)
 800815c:	f000 f826 	bl	80081ac <_init>
 8008160:	1b64      	subs	r4, r4, r5
 8008162:	10a4      	asrs	r4, r4, #2
 8008164:	2600      	movs	r6, #0
 8008166:	42a6      	cmp	r6, r4
 8008168:	d105      	bne.n	8008176 <__libc_init_array+0x2e>
 800816a:	bd70      	pop	{r4, r5, r6, pc}
 800816c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008170:	4798      	blx	r3
 8008172:	3601      	adds	r6, #1
 8008174:	e7ee      	b.n	8008154 <__libc_init_array+0xc>
 8008176:	f855 3b04 	ldr.w	r3, [r5], #4
 800817a:	4798      	blx	r3
 800817c:	3601      	adds	r6, #1
 800817e:	e7f2      	b.n	8008166 <__libc_init_array+0x1e>
 8008180:	08008304 	.word	0x08008304
 8008184:	08008304 	.word	0x08008304
 8008188:	08008304 	.word	0x08008304
 800818c:	08008308 	.word	0x08008308

08008190 <memcpy>:
 8008190:	440a      	add	r2, r1
 8008192:	4291      	cmp	r1, r2
 8008194:	f100 33ff 	add.w	r3, r0, #4294967295
 8008198:	d100      	bne.n	800819c <memcpy+0xc>
 800819a:	4770      	bx	lr
 800819c:	b510      	push	{r4, lr}
 800819e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80081a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80081a6:	4291      	cmp	r1, r2
 80081a8:	d1f9      	bne.n	800819e <memcpy+0xe>
 80081aa:	bd10      	pop	{r4, pc}

080081ac <_init>:
 80081ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081ae:	bf00      	nop
 80081b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081b2:	bc08      	pop	{r3}
 80081b4:	469e      	mov	lr, r3
 80081b6:	4770      	bx	lr

080081b8 <_fini>:
 80081b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081ba:	bf00      	nop
 80081bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081be:	bc08      	pop	{r3}
 80081c0:	469e      	mov	lr, r3
 80081c2:	4770      	bx	lr
